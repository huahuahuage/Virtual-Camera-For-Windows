#pragma warning(disable: 4819)

// Copyright (c) 2018 Bernhard Schelling

// Based on UnityCam
// https://github.com/mrayy/UnityCam
// Copyright (c) 2016 MHD Yamen Saraiji

// The MIT License (MIT)

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include "shared.inl"
#include "streams.h"
#include <cguid.h>
#include <strsafe.h>
#include <math.h>

#define CaptureSourceName L"\x82b1\x82b1\x76f4\x64ad\x52a9\x624b-\x7d20\x6750\x5de5\x574a"

// 修改4x4像素数据为纯白背景
static const unsigned char g_idleImageData[4 * 4 * 3] = {
    // 第1行 - 纯白色
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    // 第2行 - 纯白色
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    // 第3行 - 纯白色
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    // 第4行 - 纯白色
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};


// Use separate GUIDs for 64bit and 32bit so both can be installed at the same time
#ifdef _WIN64
DEFINE_GUID(CLSID_UnityCaptureService, 0x5c2cd55c, 0x92ad, 0x4999, 0x86, 0x66, 0x91, 0x2b, 0xd3, 0xe7, 0xff, 0x10);
DEFINE_GUID(CLSID_UnityCaptureProperties, 0x5c2cd55c, 0x92ad, 0x4999, 0x86, 0x66, 0x91, 0x2b, 0xd3, 0xe7, 0xff, 0x11);
#else
DEFINE_GUID(CLSID_UnityCaptureService, 0x5c2cd55c, 0x92ad, 0x4999, 0x86, 0x66, 0x91, 0x2b, 0xd3, 0xe7, 0xff, 0x20);
DEFINE_GUID(CLSID_UnityCaptureProperties, 0x5c2cd55c, 0x92ad, 0x4999, 0x86, 0x66, 0x91, 0x2b, 0xd3, 0xe7, 0xff, 0x21);
#endif

// List of resolutions offered by this filter
// If you add a higher resolution, make sure to update MAX_SHARED_IMAGE_SIZE
static struct
{
    int width, height;
} _media[] =
    {
        {1920, 1080}, // 16:9
        {1280, 720},  // 16:9
        {960, 540},   // 16:9
        {640, 360},   // 16:9
        {480, 270},   // 16:9
        {256, 144},   // 16:9
        {2560, 1440}, // 16:9
        {3840, 2160}, // 16:9
        {1440, 1080}, // 4:3
        {960, 720},   // 4:3
        {640, 480},   // 4:3
        {480, 360},   // 4:3
        {320, 240},   // 4:3
        {192, 144},   // 4:3
        {1920, 1440}, // 4:3
        {2880, 2160}, // 4:3
        {1920, 1200}, // 16:10
        {1280, 800},  // 16:10
        {2880, 1800}, // 16:10
        {2560, 1600}, // 16:10
        {1680, 1050}, // 16:10
        {1440, 900},  // 16:10
        {0, 0},       // This slot is used for custom resolutions if requested by the target application
};

// Error draw modes (what to display on screen in case of errors/warnings)
enum EErrorDrawCase
{
    EDC_ResolutionMismatch,
    EDC_UnityNeverStarted,
    EDC_UnitySendingStopped,
    _EDC_MAX
};
enum EErrorDrawMode
{
    EDM_GREENKEY,
    EDM_BLUEPINK,
    EDM_GREENYELLOW,
    EDM_BLACK
};
static EErrorDrawMode ErrorDrawModes[_EDC_MAX] = {EDM_BLUEPINK, EDM_GREENYELLOW, EDM_GREENKEY};
static wchar_t *ErrorDrawModeNames[] = {L"Green Key (RGB #00FE00)", L"Blue/Pink Pattern", L"Green/Yellow Pattern", L"Fill Black"};
static bool OutputFrameRate = false;

#ifdef _DEBUG
void DebugLog(const char *format, ...)
{
    char stackbuf[1024];
    stackbuf[0] = '\0';
    va_list ap;
    va_start(ap, format);
    vsnprintf_s(stackbuf, 1024, 1024, format, ap);
    va_end(ap);
    stackbuf[1023] = '\0';
    OutputDebugStringA(stackbuf);
}
#else
#define DebugLog(...) ((void)0)
#endif

// Interface definition for ICamSource used by CCaptureSource
DEFINE_GUID(IID_ICamSource, 0xdd20e647, 0xf3e5, 0x4156, 0xb3, 0x7b, 0x54, 0x6f, 0xcf, 0x88, 0xec, 0x50);
DECLARE_INTERFACE_(ICamSource, IUnknown){};

class CCaptureStream : CSourceStream, IKsPropertySet, IAMStreamConfig, IAMStreamControl, IAMPushSource
{
public:
    CCaptureStream(CSource *pOwner, HRESULT *phr, int CapNum) : CSourceStream("Stream", phr, pOwner, L"Output")
    {
        m_llFrame = m_llFrameMissCount = 0;
        m_prevStartTime = 0;
        m_avgTimePerFrame = 10000000 / 30;
        m_pReceiver = new SharedImageMemory(CapNum);
        m_iUnscaledBufSize = 0;
        m_pUnscaledBuf = NULL;
        m_RGBA16Table = NULL;
        GetMediaType(0, &m_mt);
    }

    virtual ~CCaptureStream()
    {
        delete m_pReceiver;
        if (m_pUnscaledBuf)
            free(m_pUnscaledBuf);
        if (m_RGBA16Table)
            free(m_RGBA16Table);
    }

private:
    // 修改FillBuffer函数中的处理逻辑
    HRESULT FillBuffer(IMediaSample* pSamp) override
    {
        HRESULT hr;
        BYTE* pBuf;
        VIDEOINFO* pvi = (VIDEOINFO*)m_mt.Format();
        REFERENCE_TIME startTime = m_prevStartTime, endTime = startTime + m_avgTimePerFrame;
        LONGLONG mtStart = m_llFrame, mtEnd = mtStart + 1;
        m_prevStartTime = endTime;
        m_llFrame = mtEnd;
        UCASSERT(pSamp->GetSize() == pvi->bmiHeader.biSizeImage);
        UCASSERT(DIBSIZE(pvi->bmiHeader) == pvi->bmiHeader.biSizeImage);

        if (FAILED(hr = pSamp->GetPointer(&pBuf)))
            return hr;
        if (FAILED(hr = pSamp->SetActualDataLength(pvi->bmiHeader.biSizeImage)))
            return hr;
        if (FAILED(hr = pSamp->SetTime(&startTime, &endTime)))
            return hr;
        if (FAILED(hr = pSamp->SetMediaTime(&mtStart, &mtEnd)))
            return hr;

        ProcessState State = { pBuf, pvi->bmiHeader.biWidth, pvi->bmiHeader.biHeight, pvi->bmiHeader.biBitCount / 8, this };
        switch (m_pReceiver->Receive((SharedImageMemory::ReceiveCallbackFunc)ProcessImage, &State))
        {
        case SharedImageMemory::RECEIVERES_CAPTUREINACTIVE:
        {
            // Show color pattern indicating that Unity is not sending frame data yet
            char DisplayString[128], * DisplayStrings[] = { DisplayString };
            int DisplayStringLens[] = { sprintf_s(DisplayString, sizeof(DisplayString), "HuahuaLive capture has not started sending image data (Capture Device #%d)", 1 + m_pReceiver->GetCapNum()) };
            FillErrorPattern(ErrorDrawModes[EDC_UnityNeverStarted], &State, 1, DisplayStrings, DisplayStringLens, m_llFrame);
            Sleep((DWORD)(m_avgTimePerFrame / 10000 - 1)); // just wait a bit until capturing next frame
            break;
        }

        case SharedImageMemory::RECEIVERES_NEWFRAME:
            if (m_llFrameMissCount)
                m_llFrameMissCount = 0;
            break;

        case SharedImageMemory::RECEIVERES_OLDFRAME:
        {
            if (++m_llFrameMissCount < m_llFrameMissMax)
                break;
            // Show color pattern when received more than X frames without new image (probably Unity stopped sending data)
            char DisplayString[] = "HuahuaLive capture has stopped sending image data", * DisplayStrings[] = { DisplayString };
            int DisplayStringLens[] = { sizeof(DisplayString) - 1 };
            FillErrorPattern(ErrorDrawModes[EDC_UnitySendingStopped], &State, 1, DisplayStrings, DisplayStringLens, m_llFrame);
            break;
        }
        }
        if (OutputFrameRate)
            RenderFPSDisplay(&State);

        // 修改32位格式的alpha通道处理
        if (pvi->bmiHeader.biBitCount == 32) {
            // 移除原来的强制设置alpha为255的代码
            // 原来的代码会将透明区域变为不透明黑色

            // 如果需要确保alpha通道正确（但不强制修改为255），可以添加以下代码：
            // 这里我们只处理特殊情况，比如alpha为0但需要特殊处理的情况
            // 但通常情况下，我们直接保留传入的alpha值

            // 如果确实需要处理某些特殊情况，可以在这里添加自定义逻辑
            // 例如，如果需要将完全透明的像素设置为特定颜色而非黑色：
            /*
            for (int i = 3; i < pvi->bmiHeader.biSizeImage; i += 4) {
                if (pBuf[i] == 0) {  // 如果alpha为0
                    // 可以选择保留透明度，或者设置特定的RGB值
                    // pBuf[i-3] = 0;   // B
                    // pBuf[i-2] = 0;   // G
                    // pBuf[i-1] = 0;   // R
                    // pBuf[i] = 0;     // A (保持透明)
                }
            }
            */
        }

        return S_OK;
    }

    struct ProcessJob
    {
        enum EType
        {
            JOB_NONE,
            JOB_RGBA8toBGR8,
            JOB_RGBA8toBGRA8,
            JOB_RGBA16toBGR8,
            JOB_RGBA16toBGRA8,
            JOB_BGR_RESIZE_LINEAR,
            JOB_BGRA_RESIZE_LINEAR,
            JOB_BGR_MIRROR_HORIZONTAL,
            JOB_BGRA_MIRROR_HORIZONTAL
        } Type;
        const void *BufIn;
        void *BufOut;
        size_t Width, RowStart, RowEnd, RGBAInStride, ResizeToHeight, ResizeFromWidth, ResizeFromHeight;
        const uint8_t *RGBA16Table;

        inline void Execute()
        {
            UCASSERT(RowEnd >= RowStart);
            if (RowStart == RowEnd)
                return;
            if (Type == JOB_RGBA8toBGR8)
                RGBA8toBGR8();
            else if (Type == JOB_RGBA8toBGRA8)
                RGBA8toBGRA8();
            else if (Type == JOB_RGBA16toBGR8)
                RGBA16toBGR8();
            else if (Type == JOB_RGBA16toBGRA8)
                RGBA16toBGRA8();
            else if (Type == JOB_BGR_RESIZE_LINEAR)
                BGRResizeLinear();
            else if (Type == JOB_BGRA_RESIZE_LINEAR)
                BGRAResizeLinear();
            else if (Type == JOB_BGR_MIRROR_HORIZONTAL)
                BGRMirrorHorizontal();
            else if (Type == JOB_BGRA_MIRROR_HORIZONTAL)
                BGRAMirrorHorizontal();
        }

        void RGBA8toBGR8()
        {
            const uint32_t *src = (const uint32_t *)BufIn + (RowStart * RGBAInStride);
            uint8_t *dst = (uint8_t *)BufOut + (RowStart * Width * 3), *dstEnd = (uint8_t *)BufOut + (RowEnd * Width * 3);
            if (RGBAInStride != Width)
            {
                // Handle a case where the texture pitch does have a gap on the right side
                const uint32_t *srcLastRow = (const uint32_t *)BufIn + ((RowEnd - 1) * RGBAInStride);
                for (size_t srcStride = RGBAInStride, iMax = Width; src != srcLastRow; src += srcStride)
                    for (size_t i = 0; i != iMax; i++, dst += 3)
                        *(uint32_t *)dst = _byteswap_ulong(src[i]) >> 8;
                for (size_t i = 0, iMax = Width - 1; i != iMax; i++, dst += 3, src++)
                    *(uint32_t *)dst = _byteswap_ulong(*src) >> 8;
            }
            else
            {
                // The fastest (implemented) path to convert from RGBA to BGR
                const uint32_t *srcEnd8 = src + (((RowEnd - RowStart) * Width - 1) & ~7), *srcEnd1 = src + ((RowEnd - RowStart) * Width - 1);
                for (; src != srcEnd8; dst += 24, src += 8)
                {
                    *(uint32_t *)(dst) = _byteswap_ulong(src[0]) >> 8;
                    *(uint32_t *)(dst + 3) = _byteswap_ulong(src[1]) >> 8;
                    *(uint32_t *)(dst + 6) = _byteswap_ulong(src[2]) >> 8;
                    *(uint32_t *)(dst + 9) = _byteswap_ulong(src[3]) >> 8;
                    *(uint32_t *)(dst + 12) = _byteswap_ulong(src[4]) >> 8;
                    *(uint32_t *)(dst + 15) = _byteswap_ulong(src[5]) >> 8;
                    *(uint32_t *)(dst + 18) = _byteswap_ulong(src[6]) >> 8;
                    *(uint32_t *)(dst + 21) = _byteswap_ulong(src[7]) >> 8;
                }
                for (; src != srcEnd1; dst += 3, src++)
                    *(uint32_t *)(dst) = _byteswap_ulong(*src) >> 8;
            }
            uint32_t FinalPixel = _byteswap_ulong(*src) >> 8;
            memcpy(dst, &FinalPixel, 3);
        }

        void RGBA8toBGRA8()
        {
#define RGBATOBGRA(x) ((x & 0xFF00FF00) | ((x & 0x00FF0000) >> 16) | ((x & 0x000000FF) << 16))
            const uint32_t* src = (const uint32_t*)BufIn + (RowStart * RGBAInStride);
            uint32_t* dst = (uint32_t*)BufOut + (RowStart * Width), * dstEnd = (uint32_t*)BufOut + (RowEnd * Width);
            if (RGBAInStride != Width)
            {
                // Handle a case where the texture pitch does have a gap on the right side
                const uint32_t* srcEnd = (const uint32_t*)BufIn + ((RowEnd)*RGBAInStride);
                for (size_t srcStride = RGBAInStride, iMax = Width; src != srcEnd; src += srcStride)
                    for (size_t i = 0; i != iMax; i++, dst++)
                        *dst = RGBATOBGRA(src[i]);
            }
            else
            {
                // The fastest (implemented) path to convert from RGBA to BGRA
                const uint32_t* srcEnd8 = src + (((RowEnd - RowStart) * Width) & ~7), * srcEnd1 = src + ((RowEnd - RowStart) * Width);
                for (; src != srcEnd8; dst += 8, src += 8)
                {
                    dst[0] = RGBATOBGRA(src[0]);
                    dst[1] = RGBATOBGRA(src[1]);
                    dst[2] = RGBATOBGRA(src[2]);
                    dst[3] = RGBATOBGRA(src[3]);
                    dst[4] = RGBATOBGRA(src[4]);
                    dst[5] = RGBATOBGRA(src[5]);
                    dst[6] = RGBATOBGRA(src[6]);
                    dst[7] = RGBATOBGRA(src[7]);
                }
                for (; src != srcEnd1; dst++, src++)
                    *dst = RGBATOBGRA(*src);
            }
#undef RGBATOBGRA
        }

        void RGBA16toBGR8()
        {
            // 16 bit color downscaling (HDR (16 bit floats) to BGR)
            const uint8_t *ttbl = RGBA16Table;
#define RGBAF16toBGRU8(psrc) ((ttbl[((uint16_t *)(psrc))[0]] << 16) | (ttbl[((uint16_t *)(psrc))[1]] << 8) | ttbl[((uint16_t *)(psrc))[2]])
            const uint64_t *src = (const uint64_t *)BufIn + (RowStart * RGBAInStride);
            uint8_t *dst = (uint8_t *)BufOut + (RowStart * Width * 3), *dstEnd = (uint8_t *)BufOut + (RowEnd * Width * 3);
            if (RGBAInStride != Width)
            {
                // Handle a case where the texture pitch does have a gap on the right side
                const uint64_t *srcLastRow = (const uint64_t *)BufIn + ((RowEnd - 1) * RGBAInStride);
                for (size_t srcStride = RGBAInStride, iMax = Width; src != srcLastRow; src += srcStride)
                    for (size_t i = 0; i != iMax; i++, dst += 3)
                        *(uint32_t *)dst = RGBAF16toBGRU8(src + i);
                for (size_t i = 0, iMax = Width - 1; i != iMax; i++, dst += 3, src++)
                    *(uint32_t *)dst = RGBAF16toBGRU8(src);
            }
            else
            {
                // The fastest (implemented) path to convert from RGBA to BGR
                const uint64_t *srcEnd8 = src + (((RowEnd - RowStart) * Width - 1) & ~7), *srcEnd1 = src + ((RowEnd - RowStart) * Width - 1);
                for (; src != srcEnd8; dst += 24, src += 8)
                {
                    *(uint32_t *)(dst) = RGBAF16toBGRU8(src);
                    *(uint32_t *)(dst + 3) = RGBAF16toBGRU8(src + 1);
                    *(uint32_t *)(dst + 6) = RGBAF16toBGRU8(src + 2);
                    *(uint32_t *)(dst + 9) = RGBAF16toBGRU8(src + 3);
                    *(uint32_t *)(dst + 12) = RGBAF16toBGRU8(src + 4);
                    *(uint32_t *)(dst + 15) = RGBAF16toBGRU8(src + 5);
                    *(uint32_t *)(dst + 18) = RGBAF16toBGRU8(src + 6);
                    *(uint32_t *)(dst + 21) = RGBAF16toBGRU8(src + 7);
                }
                for (; src != srcEnd1; dst += 3, src++)
                    *(uint32_t *)(dst) = RGBAF16toBGRU8(src);
            }
            // For the final pixel we can't use 4 byte uint32_t copy so we call memcpy
            uint32_t FinalPixel = RGBAF16toBGRU8(src);
            memcpy(dst, &FinalPixel, 3);
#undef RGBAF16toBGRU8
        }

        void RGBA16toBGRA8()
        {
            // 16 bit color downscaling (HDR (16 bit floats) to BGRA)
            const uint8_t *ttbl = RGBA16Table;
#define RGBAF16toBGRAU8(psrc) ((ttbl[((uint16_t *)(psrc))[3]] << 24) | (ttbl[((uint16_t *)(psrc))[0]] << 16) | (ttbl[((uint16_t *)(psrc))[1]] << 8) | ttbl[((uint16_t *)(psrc))[2]])
            const uint64_t *src = (const uint64_t *)BufIn + (RowStart * RGBAInStride);
            uint32_t *dst = (uint32_t *)BufOut + (RowStart * Width), *dstEnd = (uint32_t *)BufOut + (RowEnd * Width);
            if (RGBAInStride != Width)
            {
                // Handle a case where the texture pitch does have a gap on the right side
                const uint64_t *srcEnd = (const uint64_t *)BufIn + (RowEnd * RGBAInStride);
                for (size_t srcStride = RGBAInStride, iMax = Width; src != srcEnd; src += srcStride)
                    for (size_t i = 0; i != iMax; i++, dst++)
                        *dst = RGBAF16toBGRAU8(src + i);
            }
            else
            {
                // The fastest (implemented) path to convert from RGBA to BGR
                const uint64_t *srcEnd8 = src + (((RowEnd - RowStart) * Width - 1) & ~7), *srcEnd1 = src + ((RowEnd - RowStart) * Width - 1);
                for (; src != srcEnd8; dst += 8, src += 8)
                {
                    dst[0] = RGBAF16toBGRAU8(src);
                    dst[1] = RGBAF16toBGRAU8(src + 1);
                    dst[2] = RGBAF16toBGRAU8(src + 2);
                    dst[3] = RGBAF16toBGRAU8(src + 3);
                    dst[4] = RGBAF16toBGRAU8(src + 4);
                    dst[5] = RGBAF16toBGRAU8(src + 5);
                    dst[6] = RGBAF16toBGRAU8(src + 6);
                    dst[7] = RGBAF16toBGRAU8(src + 7);
                }
                for (; src != srcEnd1; dst++, src++)
                    *dst = RGBAF16toBGRAU8(src);
            }
#undef RGBAF16toBGRAU8
        }

        void BGRResizeLinear()
        {
            const size_t w = Width, h = ResizeToHeight, ResizeFromPitch = ResizeFromWidth * 3;
            const double aw = (double)w, ah = (double)h;
            const double scale = max(ResizeFromWidth / aw, ResizeFromHeight / ah);
            const double ax = (aw - (ResizeFromWidth / scale)) / 2.0;
            const double ay = (ah - (ResizeFromHeight / scale)) / 2.0;
            const uint8_t *src = (const uint8_t *)BufIn, BlackPixel[3] = {0, 0, 0};
            uint8_t *dst = (uint8_t *)BufOut + (RowStart * Width * 3);
            for (size_t y = RowStart, yEnd = RowEnd, isMaxW = ResizeFromWidth, isOffsetMax = ResizeFromHeight * ResizeFromPitch; y != yEnd; y++)
                for (size_t x = 0; x != w; x++, dst += 3)
                {
                    const size_t isx = (size_t)((x - ax) * scale), isy = (size_t)((y - ay) * scale);
                    const size_t isOffset = (isx > isMaxW ? isOffsetMax : isy * ResizeFromPitch + isx * 3);
                    memcpy(dst, (isOffset >= isOffsetMax ? BlackPixel : src + isOffset), 3);
                }
        }

        void BGRAResizeLinear()
        {
            const size_t w = Width, h = ResizeToHeight, fromw = ResizeFromWidth;
            const double aw = (double)w, ah = (double)h;
            const double scale = max(ResizeFromWidth / aw, ResizeFromHeight / ah);
            const double ax = (aw - (ResizeFromWidth / scale)) / 2.0;
            const double ay = (ah - (ResizeFromHeight / scale)) / 2.0;
            const uint32_t *src = (const uint32_t *)BufIn;
            uint32_t *dst = (uint32_t *)BufOut + (RowStart * Width);
            for (size_t y = RowStart, yEnd = RowEnd, isMaxW = ResizeFromWidth, isOffsetMax = ResizeFromHeight * fromw; y != yEnd; y++)
                for (size_t x = 0; x != w; x++, dst++)
                {
                    const size_t isx = (size_t)((x - ax) * scale), isy = (size_t)((y - ay) * scale);
                    const size_t isOffset = (isx > isMaxW ? isOffsetMax : isy * fromw + isx);
                    *dst = (isOffset >= isOffsetMax ? 0 : src[isOffset]);
                }
            UCASSERT(dst == (uint32_t *)BufOut + (RowEnd * Width));
        }

        void BGRMirrorHorizontal()
        {
            uint8_t *dst = (uint8_t *)BufOut + (RowStart * Width * 3), *dstEnd = (uint8_t *)BufOut + (RowEnd * Width * 3);
            for (size_t dstPitch = Width * 3; dst != dstEnd; dst += dstPitch)
                for (uint8_t tmp[3], *dstA = dst, *dstB = dst + dstPitch - 3; dstA < dstB; dstA += 3, dstB -= 3)
                    memcpy(tmp, dstA, 3), memcpy(dstA, dstB, 3), memcpy(dstB, tmp, 3);
        }

        void BGRAMirrorHorizontal()
        {
            uint32_t *dst = (uint32_t *)BufOut + (RowStart * Width), *dstEnd = (uint32_t *)BufOut + (RowEnd * Width);
            for (size_t w = Width; dst != dstEnd; dst += w)
                for (uint32_t tmp, *dstA = dst, *dstB = dst + w - 1; dstA < dstB; dstA++, dstB--)
                    tmp = *dstA, *dstA = *dstB, *dstB = tmp;
        }
    };

    struct ProcessWorkers
    {
        ProcessWorkers() : WorkersRunning(WORKERCOUNT)
        {
            for (size_t i = 0; i != WORKERCOUNT; i++)
                Threads[i].Start((sThread::FUNC_t)&ProcessThread, (void *)this);
        }

        ~ProcessWorkers()
        {
            WorkersRunning = 0;
            for (size_t i = 0; i != WORKERCOUNT; i++)
                NewJobSemaphore.Post(); // wake up all threads
            for (size_t i = 0; i != WORKERCOUNT; i++)
            {
                Threads[i].Stop();
            }
        }

        void StartNewJob(ProcessJob NewJob)
        {
            // Notify threads of new work to do
            WorkingJobCount = 0;
            size_t Num = NewJob.RowEnd;
            for (size_t i = 0; i != WORKERCOUNT; i++)
            {
                NewJob.RowStart = Num * (i) / (WORKERCOUNT + 1);
                NewJob.RowEnd = Num * (i + 1) / (WORKERCOUNT + 1);
                Jobs[i] = NewJob;
                NewJobSemaphore.Post();
            }

            // Do work in the main thread as well
            NewJob.RowStart = NewJob.RowEnd;
            NewJob.RowEnd = Num;
            NewJob.Execute();

            // Wait for threads to finish working
            for (size_t i = 0; i != WORKERCOUNT && JobDoneSemaphore.WaitForPost(); i++)
            {
            }
        }

    private:
        // Wrapper objects for Windows concurrency objects (thread, mutex, semaphore)
        struct sThread
        {
            typedef DWORD(WINAPI *FUNC_t)(LPVOID);
            sThread() : h(0)
            {
            }
            sThread(FUNC_t f, void *p = NULL) : h(0)
            {
                Start(f, p);
            }
            void Start(FUNC_t f, void *p = NULL)
            {
                if (h)
                    this->~sThread();
                h = CreateThread(0, 0, f, p, 0, 0);
            }
            void Stop()
            {
                if (h)
                {
                    WaitForSingleObject(h, INFINITE);
                    CloseHandle(h);
                    h = 0;
                }
            }
            ~sThread()
            {
                if (h)
                {
                    WaitForSingleObject(h, INFINITE);
                    CloseHandle(h);
                }
            }

        private:
            HANDLE h;
            sThread(const sThread &);
            sThread &operator=(const sThread &);
        };

        struct sMutex
        {
            sMutex() : h(CreateMutexA(0, 0, 0)) {}
            ~sMutex() { CloseHandle(h); }
            __inline void Lock()
            {
                WaitForSingleObject(h, INFINITE);
            }
            __inline void Unlock()
            {
                ReleaseMutex(h);
            }

        private:
            HANDLE h;
            sMutex(const sMutex &);
            sMutex &operator=(const sMutex &);
        };

        struct sSemaphore
        {
            sSemaphore() : h(CreateSemaphoreA(0, 0, 32768, 0)) {}
            ~sSemaphore() { CloseHandle(h); }
            __inline void Post()
            {
                ReleaseSemaphore(h, 1, 0);
            }
            __inline bool WaitForPost()
            {
                return WaitForSingleObject(h, INFINITE) == WAIT_OBJECT_0;
            }

        private:
            HANDLE h;
            sSemaphore(const sSemaphore &);
            sSemaphore &operator=(const sSemaphore &);
        };

        enum
        {
            WORKERCOUNT = 3
        };
        sMutex JobsMutex;
        sThread Threads[WORKERCOUNT];
        ProcessJob Jobs[WORKERCOUNT];
        sSemaphore NewJobSemaphore, JobDoneSemaphore;
        size_t WorkingJobCount, WorkersRunning;

        static void ProcessThread(ProcessWorkers *mw)
        {
            while (mw->NewJobSemaphore.WaitForPost() && mw->WorkersRunning)
            {
                mw->JobsMutex.Lock();
                size_t MyJob = mw->WorkingJobCount++;
                mw->JobsMutex.Unlock();
                mw->Jobs[MyJob].Execute();
                mw->JobDoneSemaphore.Post();
            }
        }
    };

    struct ProcessState
    {
        uint8_t *Buf;
        int BufWidth, BufHeight, BufBPP;
        CCaptureStream *Owner;
    };

    // 在ProcessImage函数中确保正确处理RGB32格式
    static void ProcessImage(int InWidth, int InHeight, int InStride, SharedImageMemory::EFormat Format, SharedImageMemory::EResizeMode ResizeMode, SharedImageMemory::EMirrorMode MirrorMode, int Timeout, uint8_t* InBuf, ProcessState* State)
    {
        // Set maximum number of missed frames allowed until we show sending as having stopped
        State->Owner->m_llFrameMissMax = (Timeout + SharedImageMemory::RECEIVE_MAX_WAIT - 1) / SharedImageMemory::RECEIVE_MAX_WAIT;

        const bool NeedResize = (InWidth != State->BufWidth || InHeight != State->BufHeight);
        if (NeedResize && ResizeMode == SharedImageMemory::RESIZEMODE_DISABLED)
        {
            // Show color pattern indicating that the requested resolution does not match the resolution provided by Unity
            char DisplayString1[128], DisplayString2[128], DisplayString3[128];
            char* DisplayStrings[] = { DisplayString1, DisplayString2, DisplayString3 };
            int DisplayStringLens[] = {
                sprintf_s(DisplayString1, sizeof(DisplayString1), "Capture output resolution is %d x %d", State->BufWidth, State->BufHeight),
                sprintf_s(DisplayString2, sizeof(DisplayString2), "HuahuaLive capture render resolution is %d x %d", InWidth, InHeight),
                sprintf_s(DisplayString3, sizeof(DisplayString3), "please set these to match"),
            };
            FillErrorPattern(ErrorDrawModes[EDC_ResolutionMismatch], State, 3, DisplayStrings, DisplayStringLens);
            return;
        }

        if (NeedResize)
        {
            // Prepare buffer for image scaling
            DWORD UnscaledBufSize = (InWidth * InHeight * State->BufBPP);
            if (State->Owner->m_iUnscaledBufSize != UnscaledBufSize)
            {
                if (State->Owner->m_pUnscaledBuf)
                    free(State->Owner->m_pUnscaledBuf);
                State->Owner->m_pUnscaledBuf = (uint8_t*)malloc(UnscaledBufSize);
                State->Owner->m_iUnscaledBufSize = UnscaledBufSize;
            }
        }

        if (Format != SharedImageMemory::FORMAT_UINT8 && (!State->Owner->m_RGBA16Table || State->Owner->m_RGBA16TableFormat != Format))
        {
            // Build a 64k table that maps 16 bit float values (either linear SRGB or gamma RGB) to 8 bit color values
            const bool SRGB = (Format == SharedImageMemory::FORMAT_FP16_LINEAR);
            uint8_t* RGBA16Table = State->Owner->m_RGBA16Table;
            if (!RGBA16Table)
                RGBA16Table = State->Owner->m_RGBA16Table = (uint8_t*)malloc(0xFFFF + 1);
            for (int i = 0; i <= 0xFFFF; i++)
            {
                float f;
                (i & 0x8000 ? f = 0 : (*(uint32_t*)&f = (i << 13) + 0x38000000));
                if (SRGB)
                    f = (f <= 0.0031308f ? (f * 12.92f) : (powf(f, 1.0f / 2.4f) * 1.055f - 0.055f));
                RGBA16Table[i] = (f < 1.0f ? (uint8_t)(f * 255.9999f) : 255);
            }
            State->Owner->m_RGBA16TableFormat = Format;
        }

        // Multi-threaded conversion of RGBA source to 8-bit BGR format while also eliminating possible row gaps (when stride != width)
        ProcessJob Job;
        // 确保正确处理32位格式（包括RGB32）
        if (State->BufBPP == 4)
            Job.Type = (Format == SharedImageMemory::FORMAT_UINT8 ? ProcessJob::JOB_RGBA8toBGRA8 : ProcessJob::JOB_RGBA16toBGRA8);
        else
            Job.Type = (Format == SharedImageMemory::FORMAT_UINT8 ? ProcessJob::JOB_RGBA8toBGR8 : ProcessJob::JOB_RGBA16toBGR8);
        Job.BufIn = InBuf, Job.BufOut = (NeedResize ? State->Owner->m_pUnscaledBuf : State->Buf);
        Job.Width = InWidth, Job.RowStart = 0, Job.RowEnd = InHeight, Job.RGBAInStride = InStride;
        Job.RGBA16Table = State->Owner->m_RGBA16Table;
        State->Owner->m_ProcessWorkers.StartNewJob(Job);

        if (NeedResize)
        {
            // Multi-threaded image scaling
            Job.Type = (State->BufBPP == 4 ? ProcessJob::JOB_BGRA_RESIZE_LINEAR : ProcessJob::JOB_BGR_RESIZE_LINEAR);
            Job.BufIn = State->Owner->m_pUnscaledBuf, Job.BufOut = State->Buf;
            Job.Width = State->BufWidth, Job.RowStart = 0, Job.RowEnd = State->BufHeight;
            Job.ResizeToHeight = State->BufHeight, Job.ResizeFromWidth = InWidth, Job.ResizeFromHeight = InHeight;
            State->Owner->m_ProcessWorkers.StartNewJob(Job);
        }

        if (MirrorMode == SharedImageMemory::MIRRORMODE_HORIZONTALLY)
        {
            // Multi-threaded horizontal image flipping
            Job.Type = (State->BufBPP == 4 ? ProcessJob::JOB_BGRA_MIRROR_HORIZONTAL : ProcessJob::JOB_BGR_MIRROR_HORIZONTAL);
            Job.BufOut = State->Buf;
            Job.Width = State->BufWidth, Job.RowStart = 0, Job.RowEnd = State->BufHeight;
            State->Owner->m_ProcessWorkers.StartNewJob(Job);
        }

        // 不再在这里强制修改alpha通道，保留原始的透明度信息
    }

    static void FillErrorPattern(EErrorDrawMode edm, ProcessState* State, int LineCount = 0, char** LineStrings = NULL, int* LineLengths = NULL, LONGLONG FrameNumber = -1)
    {
        if (FrameNumber >= 0 && FrameNumber < 5)
            edm = EDM_BLACK; // show errors as just black during the first 5 frames (when starting)

        BYTE* p = State->Buf, * pEnd = State->Buf + (State->BufWidth * State->BufHeight * State->BufBPP), SkipCount = static_cast<BYTE>(State->BufBPP - 3);

        // 特殊处理：当是EDC_UnityNeverStarted错误时，显示纯白背景和提示文字
        if (LineCount > 0 && LineStrings != NULL && LineStrings[0] != NULL &&
            strstr(LineStrings[0], "HuahuaLive capture has not started sending image data") != NULL)
        {
            // 填充纯白背景
            p = State->Buf;
            while (p != pEnd)
            {
                *(p++) = 0xFF; // B
                *(p++) = 0xFF; // G
                *(p++) = 0xFF; // R
                p += SkipCount;
            }

            // 显示"虚拟摄像头未开启"文字 - 修复编码问题
            wchar_t displayText[] = L"\x865a\x62df\x6444\x50cf\x5934\x672a\x5f00\x542f"; // 虚拟摄像头未开启
            int textLen = 8; // wcslen(displayText);

            HDC screenDC = GetDC(NULL);
            HDC TextDC = CreateCompatibleDC(screenDC);

            // 计算文字显示区域大小
            LONG bufWidth = static_cast<LONG>(State->BufWidth);
            LONG bufHeight = static_cast<LONG>(State->BufHeight);
            WORD bitCount = static_cast<WORD>(8 * State->BufBPP);
            LONG imageSize = static_cast<LONG>(bufHeight * bufWidth * State->BufBPP);
            DWORD dwImageSize = (imageSize > 0) ? static_cast<DWORD>(imageSize) : 0;

            BITMAPINFO TextBMI = {
                sizeof(BITMAPINFOHEADER),
                bufWidth,
                bufHeight,
                1,
                bitCount,
                0,
                dwImageSize
            };

            void* pTextBuf;
            HBITMAP TextHBitmap = CreateDIBSection(TextDC, &TextBMI, DIB_RGB_COLORS, &pTextBuf, NULL, 0);
            SelectObject(TextDC, TextHBitmap);

            // 填充白色背景
            RECT rc = { 0, 0, bufWidth, bufHeight };
            HBRUSH whiteBrush = CreateSolidBrush(RGB(255, 255, 255));
            FillRect(TextDC, &rc, whiteBrush);
            DeleteObject(whiteBrush);

            // 原始LOGO尺寸和放大后的尺寸
            const int originalLogoWidth = 128;
            const int originalLogoHeight = 128;
            const int scale = 2.5; // 放大4倍
            const int scaledLogoWidth = originalLogoWidth * scale;
            const int scaledLogoHeight = originalLogoHeight * scale;

            // 计算字体大小（根据放大后的布局调整）
            int fontSize = max(24, min(bufHeight / 15, bufWidth / 20));

            // 计算文字高度（估算）
            int textHeight = fontSize + 10;

            // 计算组合元素总高度
            int totalHeight = scaledLogoHeight + textHeight + 20; // 20为间距

            // 计算组合元素在屏幕上的位置（整体居中）
            int startY = (bufHeight - totalHeight) / 2;
            int logoX = (bufWidth - scaledLogoWidth) / 2;
            int logoY = startY;
            int textX = 0;
            int textY = logoY + scaledLogoHeight + 20;
            // BMP文件头信息
            static const unsigned char logoBMP[] = {
    0x42, 0x4D, 0x36, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00,
    0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
    0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0xFA, 0xD9, 0xD7, 0xE1,
    0xF2, 0xF1, 0xF5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF9, 0xF9, 0xFA, 0xA6, 0xA1, 0xBA, 0x54, 0x48, 0x83, 0x4D, 0x39, 0x97,
    0x76, 0x6D, 0x99, 0xFD, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC8, 0xC5, 0xD4,
    0x62, 0x57, 0x8C, 0x52, 0x3C, 0xA0, 0x5F, 0x43, 0xC1, 0x60, 0x44, 0xC3,
    0x4E, 0x3A, 0x98, 0xBA, 0xB6, 0xCA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF0, 0xEF, 0xF3, 0x82, 0x7B, 0xA0, 0x51, 0x3F, 0x92,
    0x5E, 0x44, 0xBE, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x5F, 0x43, 0xC1, 0x54, 0x47, 0x88, 0xF3, 0xF3, 0xF6, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xF3, 0xF5,
    0xFC, 0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xCD, 0xCA, 0xD8, 0x60, 0x53, 0x91, 0x6D, 0x54, 0xC9, 0x64, 0x48, 0xC8,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x59, 0x40, 0xB3, 0x84, 0x7D, 0xA0, 0xFE, 0xFE, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE8, 0xE7, 0xEE, 0x5B, 0x51, 0x84,
    0x82, 0x7A, 0xA3, 0xF6, 0xF6, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE4, 0xDE, 0xDA, 0xEF, 0xEB, 0xE9,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0xFA, 0xFB, 0x93, 0x8D, 0xAD,
    0x61, 0x4D, 0xAC, 0x8B, 0x6D, 0xF8, 0x8E, 0x6F, 0xFE, 0x8B, 0x6D, 0xFB,
    0x77, 0x59, 0xE1, 0x63, 0x47, 0xC7, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x4E, 0x3B, 0x98, 0xB5, 0xB1, 0xC5,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF9, 0xF9, 0xFA, 0x6A, 0x60, 0x8F, 0x58, 0x3F, 0xB1,
    0x55, 0x3D, 0xA8, 0x7D, 0x74, 0x9E, 0xFB, 0xFB, 0xFC, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBC, 0xAC, 0xA3, 0x70, 0x45, 0x2B,
    0xAA, 0x95, 0x89, 0xFD, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xDF, 0xDD, 0xE6, 0x6B, 0x60, 0x96, 0x77, 0x5D, 0xD4,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8E, 0x6F, 0xFE, 0x89, 0x6B, 0xF8, 0x75, 0x58, 0xDE, 0x63, 0x47, 0xC7,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x51, 0x40, 0x92,
    0xC9, 0xC6, 0xD5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFE, 0xFE, 0xFE, 0x9B, 0x94, 0xB4, 0x55, 0x3E, 0xA7, 0x60, 0x44, 0xC3,
    0x5F, 0x43, 0xC2, 0x4E, 0x39, 0x97, 0xAA, 0xA5, 0xBE, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xED, 0xEB, 0x61, 0x39, 0x1F,
    0x60, 0x39, 0x1E, 0xA7, 0x91, 0x86, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xB2, 0xAD, 0xC4, 0x5E, 0x4C, 0xA0, 0x88, 0x6B, 0xF3, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8A, 0x6C, 0xF9,
    0x79, 0x5B, 0xE3, 0x67, 0x4A, 0xCC, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC2,
    0x4D, 0x3C, 0x8A, 0xC1, 0xBD, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFA, 0xFC,
    0x96, 0x8F, 0xB4, 0x68, 0x52, 0xB8, 0x64, 0x48, 0xC9, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x5E, 0x43, 0xC0, 0x4E, 0x40, 0x84, 0xE3, 0xE1, 0xE9,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x69, 0x45, 0x30,
    0x68, 0x43, 0x24, 0x5D, 0x35, 0x1C, 0xD0, 0xC4, 0xBE, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF8, 0xF7, 0xF6, 0xEA, 0xE6, 0xE4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF7, 0xF9, 0x8D, 0x85, 0xAB,
    0x6A, 0x54, 0xBE, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8D, 0x6F, 0xFD, 0x82, 0x64, 0xEF, 0x74, 0x57, 0xDD,
    0x6A, 0x4E, 0xCF, 0x50, 0x3E, 0x94, 0xA1, 0x9B, 0xB6, 0xFC, 0xFC, 0xFD,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xEF, 0xF3, 0x75, 0x6D, 0x98,
    0x6C, 0x55, 0xC0, 0x8E, 0x6F, 0xFE, 0x69, 0x4C, 0xCF, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x57, 0x3F, 0xAF, 0x8A, 0x84, 0xA5,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x79, 0x5A, 0x47,
    0x69, 0x44, 0x25, 0x68, 0x43, 0x24, 0x6D, 0x49, 0x34, 0xF3, 0xF0, 0xEF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xBC, 0xAC, 0xA5, 0x8C, 0x71, 0x63, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xDD, 0xDC, 0xE5, 0x6B, 0x60, 0x97, 0x7A, 0x60, 0xDA,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8E, 0x6F, 0xFE,
    0x8D, 0x6E, 0xFD, 0x88, 0x6A, 0xF6, 0x69, 0x52, 0xBC, 0x78, 0x70, 0x9A,
    0xD3, 0xD1, 0xDE, 0xA9, 0xA4, 0xBC, 0x60, 0x52, 0x96, 0x7E, 0x63, 0xE0,
    0x8E, 0x6F, 0xFE, 0x8E, 0x6F, 0xFE, 0x68, 0x4B, 0xCD, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x5F, 0x43, 0xC2, 0x52, 0x45, 0x87,
    0xF7, 0xF6, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF7, 0xF4, 0xF3, 0xEB, 0xE5, 0xE3, 0xE9, 0xE3, 0xE0,
    0xE0, 0xD9, 0xD5, 0xE2, 0xDA, 0xD6, 0xF7, 0xF5, 0xF4, 0xFE, 0xFE, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x71, 0x4F, 0x3B,
    0x68, 0x43, 0x24, 0x69, 0x44, 0x25, 0x62, 0x3C, 0x20, 0xB4, 0xA0, 0x96,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xF4, 0xF2,
    0x6B, 0x48, 0x34, 0x5E, 0x38, 0x20, 0xDE, 0xD6, 0xD2, 0xFF, 0xFF, 0xFF,
    0xC7, 0xC4, 0xD4, 0x59, 0x49, 0x96, 0x86, 0x69, 0xEF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x83, 0x66, 0xEA,
    0x64, 0x4F, 0xB4, 0x7A, 0x60, 0xDB, 0x8C, 0x6E, 0xFB, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8C, 0x6D, 0xFB, 0x62, 0x46, 0xC6, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x4F, 0x3B, 0x9B,
    0xE6, 0xE5, 0xED, 0xFF, 0xFF, 0xFF, 0xC9, 0xBC, 0xB6, 0xE1, 0xDA, 0xD7,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xCE, 0xC3, 0xBD, 0x6D, 0x4D, 0x3B, 0x6E, 0x41, 0x23,
    0x74, 0x40, 0x16, 0x6F, 0x3E, 0x18, 0x68, 0x3C, 0x1F, 0x77, 0x52, 0x3D,
    0xA8, 0x91, 0x85, 0xEA, 0xE4, 0xE2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFB, 0xFB, 0x64, 0x3E, 0x28,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x68, 0x43, 0x24, 0x75, 0x52, 0x3E,
    0xFB, 0xFA, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA7, 0x90, 0x84,
    0x5E, 0x3B, 0x21, 0x67, 0x42, 0x24, 0x76, 0x57, 0x46, 0xF7, 0xF5, 0xF5,
    0x6B, 0x62, 0x90, 0x87, 0x6A, 0xF2, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x84, 0x65, 0xF1, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x43, 0xC2, 0x51, 0x3C, 0x9B,
    0xDF, 0xDD, 0xE6, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xFC, 0xA1, 0x8B, 0x80,
    0xC4, 0xB7, 0xB0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF2, 0xEF, 0xEE, 0xEC, 0xE8, 0xE5, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF7, 0xF6,
    0xE8, 0xE5, 0xE3, 0xE0, 0xDB, 0xD8, 0xD7, 0xD0, 0xCD, 0xD9, 0xD3, 0xCF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEC, 0xE5, 0xDF, 0x85, 0x61, 0x4A,
    0x98, 0x50, 0x0E, 0xAC, 0x5B, 0x0D, 0xA8, 0x58, 0x0D, 0x9D, 0x51, 0x0C,
    0x8A, 0x46, 0x0E, 0x71, 0x3B, 0x17, 0x90, 0x71, 0x61, 0xDE, 0xD5, 0xD1,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xDC, 0xD8, 0x5E, 0x37, 0x1E,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x61, 0x3A, 0x1F,
    0xCE, 0xC2, 0xBB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD9, 0xCF, 0xCA, 0x5F, 0x3C, 0x26,
    0x67, 0x43, 0x25, 0x69, 0x44, 0x25, 0x62, 0x3C, 0x20, 0x80, 0x64, 0x58,
    0xB5, 0xB0, 0xC4, 0x70, 0x58, 0xC7, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8E, 0x6F, 0xFE, 0x8D, 0x6E, 0xFD,
    0x86, 0x67, 0xF3, 0x7E, 0x60, 0xE9, 0x7E, 0x60, 0xE9, 0x80, 0x62, 0xEC,
    0x87, 0x68, 0xF5, 0x8E, 0x6F, 0xFE, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8E, 0x70, 0xFE, 0x78, 0x5A, 0xE2, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x5B, 0x41, 0xB7, 0x48, 0x34, 0x57,
    0xBC, 0xAD, 0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFB, 0xFB,
    0x7B, 0x5F, 0x51, 0xC8, 0xC1, 0xBD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x98, 0x87, 0x7D, 0x61, 0x3D, 0x24, 0x69, 0x45, 0x2E,
    0x8F, 0x76, 0x68, 0xD5, 0xCC, 0xC8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFA, 0xFA, 0xB0, 0xA0, 0x98,
    0xC8, 0xBD, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF4, 0xF2, 0xF1,
    0x7B, 0x4F, 0x33, 0xA7, 0x58, 0x0C, 0xA9, 0x58, 0x0C, 0xA6, 0x55, 0x0B,
    0xA5, 0x53, 0x0B, 0xA2, 0x51, 0x0A, 0x90, 0x47, 0x0C, 0x73, 0x3F, 0x1B,
    0xA7, 0x90, 0x83, 0xF7, 0xF5, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBE, 0xAD, 0xA4, 0x61, 0x3B, 0x20,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x67, 0x41, 0x23,
    0xA2, 0x8A, 0x7D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFB, 0xF9, 0xF9, 0x7B, 0x5A, 0x48, 0x62, 0x3E, 0x22,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x62, 0x3B, 0x20,
    0x75, 0x59, 0x51, 0x58, 0x48, 0x80, 0x8A, 0x6C, 0xF7, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8E, 0x6F, 0xFD, 0x81, 0x63, 0xEE, 0x71, 0x53, 0xD8, 0x65, 0x48, 0xC9,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x68, 0x4B, 0xCD, 0x7B, 0x5D, 0xE6, 0x8B, 0x6C, 0xFA,
    0x8E, 0x6F, 0xFE, 0x6C, 0x4F, 0xD2, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x43, 0xC2, 0x44, 0x33, 0x7C, 0x63, 0x40, 0x2F,
    0x5E, 0x39, 0x25, 0xC2, 0xB4, 0xAE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xB1, 0x9F, 0x96, 0x5E, 0x3D, 0x2C, 0xE4, 0xE3, 0xE2, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xE3, 0xDD, 0xD9, 0x5D, 0x38, 0x1F, 0x69, 0x44, 0x25,
    0x67, 0x42, 0x23, 0x61, 0x3A, 0x21, 0xA7, 0x92, 0x87, 0xFC, 0xFB, 0xFB,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 0xF2, 0xF1,
    0x7D, 0x5F, 0x4F, 0xD7, 0xCE, 0xC9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xD0, 0xC4, 0xBD, 0x82, 0x43, 0x11, 0xA7, 0x57, 0x0B, 0xA5, 0x54, 0x0B,
    0xA4, 0x52, 0x0B, 0xA2, 0x51, 0x0A, 0xA1, 0x4F, 0x0A, 0x9F, 0x4E, 0x0A,
    0x87, 0x42, 0x0D, 0x82, 0x5C, 0x45, 0xE0, 0xD8, 0xD4, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x8A, 0x6E, 0x5F, 0x66, 0x41, 0x23,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x68, 0x43, 0x24,
    0x84, 0x65, 0x53, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xA4, 0x8D, 0x81, 0x62, 0x3B, 0x20, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x65, 0x3E, 0x22, 0x57, 0x35, 0x2D, 0x63, 0x4F, 0xAF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8E, 0x6F, 0xFE, 0x7F, 0x61, 0xEA,
    0x68, 0x4C, 0xCE, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x45, 0xBE, 0x60, 0x4C, 0xAB, 0x6A, 0x5B, 0xA8, 0x5C, 0x4B, 0x9C,
    0x5B, 0x41, 0xB6, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x64, 0x48, 0xC9,
    0x78, 0x5B, 0xE2, 0x62, 0x46, 0xC5, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x4E, 0x39, 0x9A, 0x54, 0x39, 0x42, 0x6B, 0x44, 0x25,
    0x6A, 0x43, 0x24, 0x62, 0x3D, 0x27, 0xE5, 0xE0, 0xDD, 0xFF, 0xFF, 0xFF,
    0xC1, 0xB2, 0xAA, 0x5B, 0x35, 0x1C, 0x89, 0x74, 0x6A, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF6, 0xF4, 0xF3, 0x5C, 0x37, 0x20, 0x6A, 0x45, 0x26,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x63, 0x3D, 0x20, 0x7D, 0x5D, 0x4A,
    0xDE, 0xD5, 0xD1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x90, 0x72, 0x60, 0x7F, 0x5B, 0x43, 0xED, 0xE9, 0xE6, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFA, 0xF9, 0xE5, 0xE0, 0xDD,
    0xE7, 0xE2, 0xE0, 0xF6, 0xF4, 0xF2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFD, 0xFD, 0xFD, 0x86, 0x61, 0x4B, 0xA1, 0x52, 0x0C, 0xA4, 0x54, 0x0B,
    0xA3, 0x52, 0x0A, 0xA2, 0x50, 0x0A, 0xA0, 0x4F, 0x0A, 0x9F, 0x4E, 0x0A,
    0x9E, 0x4D, 0x0A, 0x97, 0x4A, 0x0B, 0x71, 0x3D, 0x1B, 0xC2, 0xB2, 0xAA,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xEC, 0xE8, 0xE5, 0x61, 0x3B, 0x24, 0x68, 0x43, 0x24,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x68, 0x42, 0x2A, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xC2, 0xB3, 0xAB, 0x63, 0x3B, 0x20, 0x6B, 0x43, 0x24, 0x6A, 0x44, 0x25,
    0x6A, 0x44, 0x25, 0x67, 0x41, 0x24, 0x5D, 0x3B, 0x21, 0x55, 0x35, 0x1D,
    0x5E, 0x3A, 0x1C, 0x83, 0x4F, 0x24, 0x64, 0x43, 0x4D, 0x7B, 0x61, 0xDC,
    0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF, 0x8F, 0x70, 0xFF,
    0x8E, 0x70, 0xFF, 0x8E, 0x6F, 0xFE, 0x8D, 0x6E, 0xFD, 0x8D, 0x6E, 0xFD,
    0x8E, 0x6F, 0xFD, 0x8B, 0x6C, 0xFA, 0x6D, 0x50, 0xD4, 0x61, 0x45, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x5E, 0x43, 0xBD, 0x60, 0x4F, 0xA8,
    0x8F, 0x8A, 0xC1, 0xB0, 0xAF, 0xE4, 0xBC, 0xBC, 0xF1, 0xB7, 0xB7, 0xEA,
    0x73, 0x69, 0xA7, 0x58, 0x40, 0xB1, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC2, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x4F, 0x3A, 0x9E, 0x4E, 0x36, 0x4A, 0x6D, 0x44, 0x26, 0x6D, 0x45, 0x25,
    0x6C, 0x44, 0x25, 0x6A, 0x43, 0x24, 0x84, 0x68, 0x59, 0xFE, 0xFE, 0xFE,
    0xAD, 0x99, 0x8F, 0x62, 0x3E, 0x22, 0x5F, 0x3A, 0x22, 0xDE, 0xDA, 0xD9,
    0xFF, 0xFF, 0xFF, 0xF1, 0xEE, 0xEC, 0x5B, 0x36, 0x1D, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x67, 0x41, 0x23,
    0x66, 0x3F, 0x28, 0xE1, 0xD9, 0xD5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x90, 0x73, 0x63, 0x75, 0x47, 0x22, 0x91, 0x74, 0x63, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFB, 0xFB,
    0xD0, 0xC4, 0xBE, 0x8B, 0x6E, 0x5E, 0x6E, 0x41, 0x25, 0x72, 0x3B, 0x12,
    0x67, 0x39, 0x16, 0x88, 0x7D, 0x78, 0xCB, 0xCB, 0xCB, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xCB, 0xBE, 0xB7, 0x85, 0x44, 0x0F, 0xA4, 0x53, 0x0B,
    0xA3, 0x52, 0x0C, 0xA1, 0x50, 0x0B, 0xA0, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A,
    0x9D, 0x4C, 0x0A, 0x9C, 0x4B, 0x0A, 0x9A, 0x4A, 0x0A, 0x76, 0x3B, 0x11,
    0xB6, 0xA3, 0x9A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xB4, 0xA1, 0x97, 0x63, 0x3D, 0x20, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x2B, 0xEC, 0xE7, 0xE4, 0xFF, 0xFF, 0xFF, 0xDC, 0xD3, 0xCE,
    0x69, 0x41, 0x2A, 0x6C, 0x43, 0x24, 0x6C, 0x44, 0x25, 0x69, 0x41, 0x24,
    0x66, 0x3C, 0x1D, 0x7B, 0x46, 0x17, 0x99, 0x56, 0x16, 0x99, 0x57, 0x15,
    0x91, 0x54, 0x1D, 0x85, 0x4F, 0x23, 0x7E, 0x4C, 0x26, 0x55, 0x3E, 0x6E,
    0x83, 0x67, 0xEA, 0x8F, 0x70, 0xFF, 0x8E, 0x6F, 0xFE, 0x88, 0x69, 0xF6,
    0x79, 0x5B, 0xE3, 0x6C, 0x4F, 0xD3, 0x67, 0x4A, 0xCC, 0x66, 0x4A, 0xCB,
    0x67, 0x4A, 0xCC, 0x64, 0x47, 0xC8, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x61, 0x4A, 0xB4, 0x86, 0x7E, 0xBE, 0xB6, 0xB6, 0xEA,
    0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2,
    0xBB, 0xBB, 0xF0, 0x74, 0x6C, 0xA7, 0x5A, 0x40, 0xB3, 0x60, 0x44, 0xC3,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x5F, 0x43, 0xC2, 0x4D, 0x39, 0x98,
    0x52, 0x38, 0x4B, 0x71, 0x45, 0x27, 0x71, 0x45, 0x26, 0x70, 0x45, 0x26,
    0x6E, 0x45, 0x25, 0x6D, 0x44, 0x25, 0x63, 0x3B, 0x20, 0xCE, 0xC3, 0xBE,
    0x86, 0x69, 0x59, 0x67, 0x42, 0x24, 0x66, 0x40, 0x22, 0x9C, 0x86, 0x7C,
    0xFF, 0xFF, 0xFF, 0xD1, 0xC8, 0xC3, 0x62, 0x3B, 0x1E, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x68, 0x42, 0x24, 0x6D, 0x48, 0x33, 0xEA, 0xE4, 0xE2, 0xFF, 0xFF, 0xFF,
    0x8C, 0x6C, 0x5A, 0x78, 0x4A, 0x23, 0x6A, 0x3E, 0x1F, 0xDB, 0xD2, 0xCD,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD2, 0xC6, 0xC0, 0x7B, 0x58, 0x46,
    0x74, 0x3C, 0x13, 0x96, 0x4D, 0x0D, 0xAA, 0x59, 0x0D, 0x96, 0x52, 0x10,
    0xA3, 0x98, 0x8D, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFB, 0xFA, 0xFA, 0x78, 0x4D, 0x32, 0xA3, 0x52, 0x0B,
    0xA1, 0x50, 0x0B, 0xA0, 0x4F, 0x0A, 0x9F, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A,
    0x9D, 0x4C, 0x0A, 0x9C, 0x4B, 0x0A, 0x9C, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A,
    0x77, 0x3A, 0x11, 0xBA, 0xA8, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF3, 0xF1, 0xF0, 0x6B, 0x47, 0x32, 0x68, 0x43, 0x24, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x63, 0x3B, 0x21, 0xE3, 0xDB, 0xD7, 0xD7, 0xCD, 0xC8, 0x6A, 0x43, 0x2C,
    0x6C, 0x42, 0x23, 0x6F, 0x43, 0x24, 0x6E, 0x40, 0x1E, 0x84, 0x49, 0x16,
    0xA8, 0x5E, 0x16, 0xAF, 0x62, 0x17, 0x90, 0x51, 0x17, 0x79, 0x47, 0x22,
    0x70, 0x43, 0x24, 0x70, 0x43, 0x24, 0x71, 0x44, 0x26, 0x6E, 0x44, 0x2C,
    0x50, 0x3C, 0x77, 0x7B, 0x5F, 0xE2, 0x6E, 0x51, 0xD5, 0x61, 0x45, 0xC5,
    0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC3, 0x60, 0x44, 0xC2,
    0x60, 0x43, 0xC2, 0x60, 0x44, 0xC3, 0x5E, 0x43, 0xC0, 0x5E, 0x44, 0xBA,
    0x65, 0x54, 0xA5, 0x9D, 0x9A, 0xCC, 0xA4, 0xA2, 0xD7, 0xA0, 0x9E, 0xD3,
    0x9C, 0x9A, 0xCE, 0x9C, 0x9A, 0xCF, 0xA4, 0xA2, 0xD7, 0xAE, 0xAD, 0xE2,
    0xBD, 0xBD, 0xF2, 0xB8, 0xB8, 0xED, 0x66, 0x5B, 0x9B, 0x5F, 0x43, 0xC0,
    0x60, 0x44, 0xC2, 0x5D, 0x42, 0xBC, 0x45, 0x33, 0x81, 0x5B, 0x3B, 0x42,
    0x74, 0x46, 0x27, 0x74, 0x47, 0x27, 0x73, 0x46, 0x26, 0x71, 0x46, 0x26,
    0x70, 0x45, 0x26, 0x6F, 0x45, 0x26, 0x6D, 0x44, 0x25, 0x74, 0x52, 0x3F,
    0x63, 0x3C, 0x22, 0x69, 0x44, 0x25, 0x69, 0x43, 0x24, 0x67, 0x42, 0x2C,
    0xF8, 0xF7, 0xF6, 0xA4, 0x91, 0x87, 0x6B, 0x42, 0x21, 0x69, 0x44, 0x24,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x66, 0x40, 0x23, 0x81, 0x60, 0x4F, 0xFB, 0xF9, 0xF9,
    0x7B, 0x57, 0x41, 0x78, 0x4B, 0x24, 0x75, 0x47, 0x22, 0x99, 0x7E, 0x70,
    0xF9, 0xF8, 0xF7, 0xA3, 0x8B, 0x7F, 0x67, 0x34, 0x13, 0x94, 0x4B, 0x0D,
    0xA6, 0x55, 0x0B, 0xA8, 0x56, 0x0B, 0x9D, 0x53, 0x0E, 0x8C, 0x7C, 0x6E,
    0xFC, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAC, 0x96, 0x8A, 0x96, 0x4C, 0x0D,
    0xA1, 0x50, 0x0B, 0x9F, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9C, 0x4B, 0x0A, 0x9B, 0x4B, 0x0A, 0x9B, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A,
    0x99, 0x49, 0x0A, 0x6E, 0x3C, 0x1C, 0xDD, 0xD5, 0xD1, 0xE5, 0xDF, 0xDB,
    0x84, 0x65, 0x54, 0x64, 0x3D, 0x20, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6B, 0x44, 0x25,
    0x61, 0x37, 0x1D, 0xC2, 0xB3, 0xAB, 0x6B, 0x43, 0x2C, 0x6F, 0x44, 0x25,
    0x70, 0x43, 0x22, 0x78, 0x41, 0x16, 0x9A, 0x54, 0x17, 0xAA, 0x5E, 0x18,
    0xAD, 0x60, 0x18, 0x92, 0x52, 0x18, 0x7A, 0x47, 0x23, 0x78, 0x46, 0x25,
    0x77, 0x46, 0x25, 0x77, 0x46, 0x25, 0x76, 0x47, 0x25, 0x76, 0x47, 0x26,
    0x6B, 0x42, 0x2F, 0x44, 0x32, 0x71, 0x5C, 0x41, 0xBA, 0x5F, 0x43, 0xC2,
    0x5C, 0x41, 0xBA, 0x55, 0x3D, 0xAB, 0x4F, 0x3A, 0x9E, 0x49, 0x36, 0x8E,
    0x3F, 0x31, 0x76, 0x3F, 0x33, 0x71, 0x40, 0x35, 0x6F, 0x4B, 0x42, 0x77,
    0x6E, 0x69, 0x93, 0x88, 0x85, 0xA9, 0x84, 0x80, 0xA6, 0x81, 0x7D, 0xA4,
    0x77, 0x72, 0x9B, 0x62, 0x5B, 0x89, 0x57, 0x4F, 0x7F, 0x4D, 0x44, 0x77,
    0x43, 0x3A, 0x70, 0x53, 0x4B, 0x82, 0x50, 0x48, 0x7F, 0x46, 0x34, 0x88,
    0x50, 0x3A, 0x9F, 0x42, 0x31, 0x69, 0x67, 0x41, 0x36, 0x77, 0x47, 0x27,
    0x77, 0x47, 0x27, 0x76, 0x47, 0x27, 0x75, 0x47, 0x27, 0x73, 0x46, 0x26,
    0x72, 0x46, 0x26, 0x71, 0x45, 0x26, 0x6F, 0x45, 0x26, 0x65, 0x3C, 0x20,
    0x6B, 0x42, 0x24, 0x6B, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x5F, 0x36, 0x1C,
    0xC9, 0xBC, 0xB5, 0x72, 0x51, 0x3E, 0x6A, 0x44, 0x24, 0x69, 0x44, 0x24,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x61, 0x3A, 0x1E, 0xB0, 0x9B, 0x90,
    0x68, 0x41, 0x28, 0x75, 0x48, 0x23, 0x77, 0x49, 0x23, 0x69, 0x3F, 0x26,
    0x75, 0x51, 0x3D, 0x77, 0x3B, 0x0F, 0xA1, 0x51, 0x0B, 0xA5, 0x54, 0x0B,
    0xA6, 0x55, 0x0B, 0xA8, 0x57, 0x0D, 0x8C, 0x73, 0x5F, 0xF6, 0xF5, 0xF5,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD8, 0xCE, 0xC8, 0x80, 0x40, 0x0F,
    0xA0, 0x4F, 0x0A, 0x9F, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9C, 0x4B, 0x0A, 0x9B, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A,
    0x9B, 0x49, 0x0A, 0x81, 0x44, 0x15, 0x5D, 0x34, 0x1D, 0x56, 0x2A, 0x13,
    0x5D, 0x33, 0x19, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x6A, 0x44, 0x25, 0x6B, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x6E, 0x44, 0x25,
    0x5D, 0x32, 0x19, 0x65, 0x3A, 0x1F, 0x70, 0x44, 0x25, 0x6E, 0x41, 0x23,
    0x7F, 0x44, 0x17, 0xA3, 0x58, 0x18, 0xA8, 0x5C, 0x1A, 0xAA, 0x5F, 0x1B,
    0x9E, 0x59, 0x1B, 0x79, 0x46, 0x22, 0x79, 0x48, 0x26, 0x7A, 0x48, 0x26,
    0x7A, 0x48, 0x26, 0x7A, 0x48, 0x26, 0x79, 0x48, 0x26, 0x78, 0x47, 0x26,
    0x75, 0x46, 0x27, 0x5E, 0x3C, 0x3B, 0x3F, 0x30, 0x74, 0x44, 0x36, 0x7D,
    0x57, 0x4E, 0x82, 0x77, 0x72, 0x9B, 0x90, 0x8D, 0xAF, 0xA2, 0xA1, 0xBF,
    0xBE, 0xC0, 0xD7, 0xD2, 0xD5, 0xE7, 0xE0, 0xE4, 0xF3, 0xE5, 0xEA, 0xF7,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEA, 0xEF, 0xFB,
    0xE0, 0xE5, 0xF3, 0xD3, 0xD6, 0xE8, 0xBD, 0xBE, 0xD6, 0xA5, 0xA4, 0xC1,
    0x82, 0x7E, 0xA4, 0x5D, 0x55, 0x82, 0x4A, 0x38, 0x5C, 0x5A, 0x3A, 0x40,
    0x71, 0x45, 0x2E, 0x78, 0x48, 0x27, 0x77, 0x47, 0x27, 0x76, 0x47, 0x27,
    0x74, 0x46, 0x26, 0x72, 0x46, 0x26, 0x71, 0x45, 0x26, 0x6F, 0x45, 0x26,
    0x6E, 0x44, 0x25, 0x6D, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x65, 0x3D, 0x20,
    0x75, 0x52, 0x41, 0x64, 0x3C, 0x21, 0x6B, 0x44, 0x25, 0x6B, 0x44, 0x25,
    0x6B, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x68, 0x43, 0x24, 0x60, 0x37, 0x1F,
    0x62, 0x3A, 0x1E, 0x6A, 0x44, 0x24, 0x6D, 0x45, 0x24, 0x62, 0x38, 0x1B,
    0x7B, 0x3C, 0x0E, 0xA2, 0x51, 0x0B, 0xA3, 0x52, 0x0B, 0xA4, 0x53, 0x0B,
    0xA5, 0x54, 0x0B, 0x8F, 0x54, 0x20, 0xDF, 0xDD, 0xDC, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFA, 0xFA, 0x79, 0x48, 0x27,
    0xA0, 0x4F, 0x0A, 0x9F, 0x4E, 0x0A, 0x9D, 0x4D, 0x0A, 0x9C, 0x4C, 0x0A,
    0x9C, 0x4B, 0x0A, 0x9B, 0x4A, 0x0A, 0x9B, 0x49, 0x0A, 0x9B, 0x49, 0x0A,
    0x9A, 0x49, 0x0A, 0x88, 0x47, 0x14, 0x64, 0x39, 0x1B, 0x5C, 0x31, 0x18,
    0x67, 0x42, 0x23, 0x69, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x6B, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x6E, 0x44, 0x25, 0x70, 0x45, 0x26,
    0x6F, 0x43, 0x24, 0x72, 0x46, 0x26, 0x6F, 0x43, 0x24, 0x7F, 0x45, 0x19,
    0xA4, 0x58, 0x19, 0xA6, 0x5B, 0x1C, 0xA8, 0x5D, 0x1E, 0xAA, 0x60, 0x1E,
    0x86, 0x4C, 0x20, 0x7C, 0x48, 0x27, 0x7C, 0x49, 0x27, 0x7D, 0x49, 0x27,
    0x7D, 0x48, 0x27, 0x7B, 0x48, 0x28, 0x69, 0x41, 0x36, 0x57, 0x3B, 0x4B,
    0x57, 0x4C, 0x76, 0x82, 0x7E, 0xA3, 0xB0, 0xB1, 0xC9, 0xD7, 0xDC, 0xEA,
    0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xE3, 0xE9, 0xF6, 0xB2, 0xB3, 0xCC,
    0x6E, 0x67, 0x90, 0x4C, 0x36, 0x53, 0x69, 0x40, 0x35, 0x78, 0x47, 0x27,
    0x76, 0x46, 0x27, 0x74, 0x46, 0x26, 0x73, 0x46, 0x26, 0x71, 0x46, 0x26,
    0x70, 0x45, 0x25, 0x6E, 0x45, 0x25, 0x6D, 0x45, 0x25, 0x6B, 0x42, 0x23,
    0x59, 0x2E, 0x16, 0x6C, 0x44, 0x24, 0x6C, 0x44, 0x25, 0x6B, 0x44, 0x25,
    0x6B, 0x44, 0x25, 0x6B, 0x44, 0x25, 0x6B, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x5F, 0x37, 0x1C,
    0x67, 0x41, 0x23, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x63, 0x3C, 0x1F,
    0x8E, 0x46, 0x0C, 0xA2, 0x51, 0x0A, 0xA3, 0x52, 0x0B, 0xA4, 0x53, 0x0B,
    0xA2, 0x53, 0x0C, 0xAA, 0x92, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9A, 0x7F, 0x70,
    0x99, 0x4B, 0x0C, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4B, 0x0A, 0x9C, 0x4A, 0x0A, 0x9B, 0x49, 0x0A, 0x9B, 0x49, 0x0A,
    0x9A, 0x49, 0x0A, 0x8C, 0x47, 0x11, 0x6A, 0x41, 0x20, 0x5C, 0x34, 0x1A,
    0x69, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6B, 0x44, 0x25,
    0x6D, 0x44, 0x25, 0x6F, 0x44, 0x25, 0x71, 0x45, 0x25, 0x72, 0x45, 0x25,
    0x74, 0x46, 0x26, 0x75, 0x46, 0x26, 0x6F, 0x3E, 0x1D, 0xA1, 0x56, 0x1A,
    0xA4, 0x5A, 0x1D, 0xA6, 0x5D, 0x20, 0xA8, 0x5F, 0x22, 0x9C, 0x5A, 0x27,
    0x79, 0x47, 0x2A, 0x7E, 0x49, 0x27, 0x7E, 0x49, 0x28, 0x7B, 0x48, 0x2A,
    0x5B, 0x3B, 0x45, 0x58, 0x4B, 0x72, 0x99, 0x97, 0xB6, 0xD0, 0xD4, 0xE6,
    0xED, 0xF3, 0xFE, 0xED, 0xF3, 0xFF, 0xEC, 0xF3, 0xFE, 0xEA, 0xF0, 0xFE,
    0xE7, 0xEE, 0xFE, 0xE9, 0xEF, 0xFE, 0xEB, 0xF2, 0xFE, 0xED, 0xF3, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF,
    0xEC, 0xF2, 0xFE, 0xD7, 0xDC, 0xEE, 0x8A, 0x88, 0xAB, 0x59, 0x43, 0x5E,
    0x65, 0x3F, 0x3A, 0x74, 0x46, 0x28, 0x74, 0x46, 0x26, 0x73, 0x46, 0x26,
    0x72, 0x46, 0x26, 0x70, 0x45, 0x26, 0x70, 0x45, 0x26, 0x70, 0x45, 0x26,
    0x5D, 0x32, 0x19, 0x6F, 0x45, 0x25, 0x6E, 0x44, 0x25, 0x6C, 0x44, 0x25,
    0x6C, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x6B, 0x44, 0x25, 0x6B, 0x44, 0x25,
    0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x69, 0x44, 0x25, 0x68, 0x42, 0x24,
    0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x68, 0x40, 0x21,
    0x91, 0x48, 0x0C, 0xA2, 0x51, 0x0A, 0xA3, 0x51, 0x0B, 0xA4, 0x53, 0x0B,
    0x93, 0x54, 0x1E, 0xED, 0xEA, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0xBC, 0xB5,
    0x7A, 0x3B, 0x0E, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9A, 0x49, 0x0A,
    0x9A, 0x49, 0x0A, 0x90, 0x48, 0x0F, 0x6C, 0x44, 0x22, 0x59, 0x34, 0x1B,
    0x69, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6B, 0x44, 0x25, 0x6D, 0x44, 0x25,
    0x6F, 0x44, 0x25, 0x71, 0x45, 0x25, 0x73, 0x46, 0x26, 0x74, 0x46, 0x26,
    0x77, 0x47, 0x26, 0x69, 0x40, 0x2B, 0x89, 0x4D, 0x24, 0xA3, 0x58, 0x1E,
    0xA4, 0x5B, 0x21, 0xA7, 0x5E, 0x24, 0xA8, 0x61, 0x26, 0x7C, 0x4A, 0x31,
    0x80, 0x49, 0x28, 0x80, 0x49, 0x28, 0x70, 0x43, 0x34, 0x57, 0x47, 0x6D,
    0xA3, 0xA2, 0xC3, 0xE3, 0xE9, 0xFB, 0xE7, 0xEE, 0xFE, 0xE9, 0xEF, 0xFE,
    0xEA, 0xF0, 0xFE, 0xEB, 0xF1, 0xFE, 0xE7, 0xEE, 0xFE, 0xE1, 0xE8, 0xFD,
    0xDE, 0xE5, 0xFC, 0xDF, 0xE6, 0xFD, 0xE3, 0xEA, 0xFD, 0xEA, 0xF1, 0xFE,
    0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF,
    0xED, 0xF3, 0xFF, 0xEB, 0xF1, 0xFE, 0xEA, 0xF0, 0xFE, 0xDF, 0xE5, 0xF5,
    0x9F, 0x9F, 0xBE, 0x50, 0x41, 0x68, 0x5F, 0x3D, 0x3C, 0x75, 0x46, 0x27,
    0x75, 0x46, 0x27, 0x73, 0x46, 0x26, 0x73, 0x46, 0x26, 0x73, 0x45, 0x26,
    0x63, 0x3B, 0x20, 0x72, 0x45, 0x25, 0x71, 0x45, 0x26, 0x6F, 0x45, 0x25,
    0x6E, 0x44, 0x25, 0x6D, 0x44, 0x25, 0x6D, 0x44, 0x25, 0x6C, 0x44, 0x25,
    0x6C, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x6B, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x6A, 0x44, 0x25, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25, 0x72, 0x44, 0x1E,
    0x9D, 0x4F, 0x0C, 0xA2, 0x51, 0x0A, 0xA3, 0x52, 0x0B, 0xA2, 0x52, 0x0B,
    0xB1, 0x90, 0x76, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE9, 0xE6, 0xE4,
    0x6D, 0x39, 0x17, 0x9E, 0x4D, 0x0A, 0x9C, 0x4C, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9B, 0x49, 0x0A, 0x9A, 0x49, 0x09,
    0x9A, 0x49, 0x0A, 0x93, 0x48, 0x0D, 0x6C, 0x44, 0x22, 0x59, 0x37, 0x1D,
    0x6A, 0x44, 0x25, 0x6B, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x6F, 0x44, 0x25,
    0x71, 0x45, 0x25, 0x73, 0x46, 0x25, 0x75, 0x47, 0x26, 0x78, 0x47, 0x27,
    0x76, 0x47, 0x29, 0x75, 0x44, 0x2F, 0xA0, 0x56, 0x1E, 0xA3, 0x5A, 0x22,
    0xA5, 0x5D, 0x26, 0xA7, 0x60, 0x29, 0xA5, 0x62, 0x31, 0x60, 0x3D, 0x44,
    0x77, 0x45, 0x30, 0x5D, 0x3A, 0x43, 0x64, 0x5D, 0x8A, 0xCE, 0xD3, 0xEF,
    0xDC, 0xE3, 0xFC, 0xDC, 0xE4, 0xFC, 0xDE, 0xE5, 0xFC, 0xDF, 0xE6, 0xFD,
    0xE0, 0xE7, 0xFD, 0xE1, 0xE8, 0xFD, 0xDF, 0xE6, 0xFD, 0xDB, 0xE2, 0xFC,
    0xDA, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDD, 0xE4, 0xFC, 0xE2, 0xE9, 0xFD,
    0xEB, 0xF1, 0xFE, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xED, 0xF3, 0xFF, 0xEC, 0xF2, 0xFF, 0xEB, 0xF0, 0xFE, 0xEA, 0xF0, 0xFE,
    0xE8, 0xF0, 0xFE, 0xDD, 0xE3, 0xF3, 0x92, 0x8E, 0xAF, 0x4F, 0x3B, 0x5C,
    0x6A, 0x42, 0x31, 0x76, 0x47, 0x27, 0x77, 0x47, 0x27, 0x77, 0x46, 0x26,
    0x6D, 0x40, 0x24, 0x74, 0x45, 0x26, 0x75, 0x46, 0x26, 0x73, 0x46, 0x26,
    0x71, 0x46, 0x26, 0x6F, 0x45, 0x25, 0x6F, 0x45, 0x25, 0x6E, 0x44, 0x25,
    0x6E, 0x44, 0x25, 0x6D, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x6B, 0x44, 0x25,
    0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x7E, 0x45, 0x17,
    0xA1, 0x50, 0x0B, 0xA2, 0x51, 0x0A, 0xA3, 0x52, 0x0B, 0x94, 0x4D, 0x11,
    0xE7, 0xDE, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
    0x71, 0x4B, 0x35, 0x9C, 0x4C, 0x0A, 0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9B, 0x49, 0x0A, 0x9A, 0x49, 0x0A,
    0x9A, 0x49, 0x09, 0x94, 0x48, 0x0C, 0x6C, 0x44, 0x22, 0x6A, 0x44, 0x24,
    0x6B, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x6E, 0x44, 0x25, 0x71, 0x45, 0x25,
    0x73, 0x45, 0x25, 0x75, 0x46, 0x26, 0x77, 0x47, 0x27, 0x7A, 0x48, 0x27,
    0x76, 0x45, 0x2C, 0x99, 0x52, 0x20, 0xA1, 0x58, 0x22, 0xA3, 0x5C, 0x27,
    0xA5, 0x5F, 0x2B, 0xA7, 0x62, 0x2E, 0x92, 0x60, 0x48, 0x91, 0x8E, 0xC3,
    0x86, 0x81, 0xB2, 0x94, 0x93, 0xB9, 0xD9, 0xE0, 0xFB, 0xD9, 0xE1, 0xFC,
    0xD9, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC,
    0xD9, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDB, 0xE3, 0xFC, 0xDA, 0xE1, 0xFC,
    0xD8, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDC, 0xE3, 0xFC,
    0xE2, 0xE9, 0xFD, 0xEC, 0xF2, 0xFE, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xEC, 0xF2, 0xFF, 0xEA, 0xF0, 0xFE,
    0xE8, 0xF0, 0xFE, 0xE8, 0xEE, 0xFE, 0xE8, 0xEE, 0xFE, 0xD8, 0xDE, 0xF0,
    0x73, 0x6D, 0x96, 0x55, 0x39, 0x49, 0x77, 0x47, 0x2A, 0x7B, 0x49, 0x29,
    0x77, 0x46, 0x28, 0x79, 0x47, 0x27, 0x79, 0x47, 0x27, 0x77, 0x47, 0x26,
    0x75, 0x47, 0x26, 0x73, 0x46, 0x26, 0x71, 0x45, 0x26, 0x70, 0x45, 0x26,
    0x6F, 0x45, 0x25, 0x6E, 0x44, 0x25, 0x6C, 0x44, 0x25, 0x6C, 0x44, 0x25,
    0x6B, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x24, 0x93, 0x4C, 0x10,
    0xA1, 0x50, 0x0B, 0xA2, 0x51, 0x0B, 0xA3, 0x52, 0x0B, 0xA0, 0x71, 0x4A,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x8A, 0x6C, 0x5C, 0x95, 0x48, 0x0A, 0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4A, 0x0A, 0x9B, 0x49, 0x0A, 0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x09,
    0x9A, 0x49, 0x09, 0x96, 0x48, 0x0B, 0x6E, 0x44, 0x21, 0x6A, 0x44, 0x24,
    0x6C, 0x44, 0x25, 0x6D, 0x44, 0x25, 0x6F, 0x44, 0x25, 0x72, 0x45, 0x25,
    0x74, 0x46, 0x26, 0x77, 0x47, 0x27, 0x6A, 0x42, 0x31, 0x5B, 0x40, 0x49,
    0x75, 0x43, 0x31, 0xA0, 0x56, 0x20, 0xA1, 0x5A, 0x26, 0xA3, 0x5E, 0x2C,
    0xA5, 0x62, 0x31, 0xA7, 0x64, 0x33, 0x8A, 0x66, 0x64, 0xBC, 0xBC, 0xF1,
    0xCA, 0xCD, 0xF6, 0xD9, 0xE1, 0xFB, 0xD9, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC,
    0xD9, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC,
    0xD9, 0xE0, 0xFC, 0xD8, 0xE0, 0xFC, 0xDB, 0xE2, 0xFC, 0xDB, 0xE1, 0xFC,
    0xD9, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC,
    0xDA, 0xE2, 0xFC, 0xE3, 0xEA, 0xFD, 0xEC, 0xF2, 0xFE, 0xED, 0xF3, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xD9, 0xDF, 0xF3,
    0xC0, 0xC5, 0xEA, 0xC0, 0xC5, 0xEE, 0xBF, 0xC4, 0xEE, 0xC3, 0xC8, 0xF1,
    0xC8, 0xCD, 0xF5, 0xC5, 0xCA, 0xF0, 0xCC, 0xD1, 0xEF, 0xD4, 0xDA, 0xEF,
    0xE9, 0xEF, 0xFC, 0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xEC, 0xF2, 0xFE,
    0xE9, 0xEF, 0xFE, 0xE7, 0xED, 0xFE, 0xE6, 0xED, 0xFE, 0xE5, 0xEC, 0xFE,
    0xE4, 0xEA, 0xFD, 0xAA, 0xA9, 0xC7, 0x50, 0x3D, 0x5E, 0x76, 0x45, 0x2D,
    0x7D, 0x49, 0x28, 0x7D, 0x48, 0x28, 0x7C, 0x48, 0x27, 0x7B, 0x48, 0x27,
    0x7A, 0x48, 0x27, 0x77, 0x47, 0x27, 0x75, 0x46, 0x27, 0x73, 0x46, 0x26,
    0x71, 0x45, 0x26, 0x6F, 0x45, 0x25, 0x6D, 0x44, 0x25, 0x6C, 0x44, 0x25,
    0x6C, 0x44, 0x25, 0x6A, 0x44, 0x25, 0x6F, 0x45, 0x22, 0xA0, 0x50, 0x0B,
    0xA1, 0x50, 0x0B, 0xA2, 0x51, 0x0B, 0x9D, 0x4F, 0x0B, 0xCC, 0xB6, 0xA5,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xA4, 0x8D, 0x81, 0x8D, 0x43, 0x0B, 0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9B, 0x4A, 0x0A, 0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x09,
    0x9A, 0x49, 0x09, 0x97, 0x48, 0x0A, 0x6F, 0x44, 0x21, 0x6B, 0x44, 0x25,
    0x6C, 0x44, 0x25, 0x6E, 0x44, 0x25, 0x70, 0x45, 0x25, 0x73, 0x45, 0x26,
    0x66, 0x3F, 0x31, 0x51, 0x3D, 0x59, 0x86, 0x82, 0xA4, 0xA6, 0x94, 0x99,
    0x93, 0x4F, 0x22, 0xA0, 0x58, 0x24, 0xA2, 0x5C, 0x2A, 0xA4, 0x60, 0x30,
    0xA6, 0x63, 0x35, 0xA7, 0x66, 0x37, 0x8A, 0x75, 0x8B, 0xBD, 0xBD, 0xF2,
    0xD1, 0xD6, 0xF9, 0xD9, 0xE0, 0xFC, 0xD8, 0xE0, 0xFC, 0xD9, 0xE0, 0xFC,
    0xD9, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC,
    0xD8, 0xE0, 0xFC, 0xD7, 0xDE, 0xFC, 0xD9, 0xE0, 0xFC, 0xDB, 0xE2, 0xFC,
    0xDA, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC, 0xD9, 0xE0, 0xFC, 0xD9, 0xE0, 0xFC,
    0xD8, 0xDF, 0xFC, 0xD9, 0xE1, 0xFC, 0xE4, 0xEA, 0xFD, 0xEC, 0xF2, 0xFE,
    0xED, 0xF3, 0xFE, 0xE3, 0xE9, 0xF7, 0xAF, 0xB4, 0xD9, 0xA3, 0xA7, 0xE0,
    0xB6, 0xBA, 0xF4, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB6, 0xBA, 0xF4, 0xA7, 0xAB, 0xE5,
    0xA0, 0xA4, 0xDA, 0xAE, 0xB3, 0xD7, 0xE5, 0xEB, 0xF9, 0xED, 0xF3, 0xFE,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFE, 0xEC, 0xF2, 0xFE,
    0xE9, 0xEF, 0xFE, 0xE6, 0xEC, 0xFD, 0xE5, 0xEC, 0xFE, 0xE4, 0xEB, 0xFE,
    0xE4, 0xEA, 0xFE, 0xE4, 0xEA, 0xFE, 0xD1, 0xD4, 0xE8, 0x60, 0x54, 0x76,
    0x6A, 0x40, 0x38, 0x80, 0x49, 0x28, 0x80, 0x49, 0x28, 0x7F, 0x49, 0x28,
    0x7C, 0x48, 0x28, 0x7B, 0x48, 0x28, 0x7A, 0x47, 0x27, 0x77, 0x46, 0x27,
    0x74, 0x46, 0x26, 0x71, 0x45, 0x26, 0x6F, 0x45, 0x26, 0x6D, 0x45, 0x25,
    0x6C, 0x44, 0x25, 0x6B, 0x44, 0x25, 0x7A, 0x47, 0x1D, 0xA2, 0x51, 0x0B,
    0xA2, 0x51, 0x0B, 0xA3, 0x51, 0x0B, 0x96, 0x52, 0x19, 0xF6, 0xF3, 0xF0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xAB, 0x95, 0x8A, 0x88, 0x42, 0x0D, 0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9B, 0x4A, 0x0A, 0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x0A,
    0x9A, 0x49, 0x09, 0x98, 0x48, 0x09, 0x71, 0x44, 0x20, 0x6B, 0x44, 0x25,
    0x6D, 0x44, 0x25, 0x6F, 0x45, 0x25, 0x6E, 0x44, 0x27, 0x52, 0x38, 0x46,
    0x7F, 0x7A, 0x9E, 0xDD, 0xE1, 0xF0, 0xDE, 0xE2, 0xF7, 0x8D, 0x5E, 0x49,
    0x9E, 0x55, 0x21, 0xA0, 0x5A, 0x28, 0xA2, 0x5E, 0x2F, 0xA4, 0x62, 0x35,
    0xA6, 0x65, 0x39, 0xA2, 0x65, 0x3C, 0x8A, 0x7F, 0xA4, 0xBD, 0xBD, 0xF2,
    0xD6, 0xDC, 0xFA, 0xD8, 0xDF, 0xFC, 0xD8, 0xDF, 0xFC, 0xD8, 0xDF, 0xFC,
    0xD9, 0xE0, 0xFC, 0xDA, 0xE1, 0xFC, 0xD1, 0xD8, 0xF2, 0xAA, 0xB0, 0xC5,
    0xAC, 0xB2, 0xC8, 0xCF, 0xD6, 0xF2, 0xD7, 0xDE, 0xFC, 0xD9, 0xE0, 0xFC,
    0xD9, 0xE1, 0xFC, 0xD9, 0xE0, 0xFC, 0xD8, 0xE0, 0xFC, 0xD8, 0xE0, 0xFC,
    0xD8, 0xDF, 0xFC, 0xD7, 0xDF, 0xFC, 0xDA, 0xE1, 0xFC, 0xE7, 0xED, 0xFE,
    0xD0, 0xD6, 0xE9, 0x9C, 0xA1, 0xD6, 0xB7, 0xBB, 0xF5, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB3, 0xB7, 0xF1, 0x94, 0x98, 0xC5, 0xDB, 0xE1, 0xF0,
    0xED, 0xF3, 0xFF, 0xEA, 0xF1, 0xFE, 0xE6, 0xEC, 0xFE, 0xE2, 0xE8, 0xFD,
    0xD6, 0xDB, 0xFA, 0xD0, 0xD3, 0xF7, 0xD0, 0xD3, 0xF7, 0xD1, 0xD5, 0xF8,
    0xD5, 0xDA, 0xF9, 0xD7, 0xDC, 0xFA, 0xDB, 0xDF, 0xFB, 0xDC, 0xE1, 0xF4,
    0x5E, 0x52, 0x74, 0x75, 0x44, 0x31, 0x83, 0x4A, 0x29, 0x82, 0x4A, 0x29,
    0x7C, 0x48, 0x2A, 0x70, 0x41, 0x29, 0x77, 0x44, 0x25, 0x7B, 0x47, 0x27,
    0x77, 0x46, 0x27, 0x73, 0x46, 0x26, 0x70, 0x45, 0x26, 0x6F, 0x45, 0x26,
    0x6D, 0x45, 0x25, 0x6B, 0x44, 0x25, 0x86, 0x4A, 0x18, 0xA1, 0x50, 0x0B,
    0xA1, 0x50, 0x0A, 0xA1, 0x51, 0x0B, 0xA3, 0x7A, 0x5B, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xAF, 0x9A, 0x8F, 0x86, 0x41, 0x0D, 0x9C, 0x4B, 0x0A, 0x9C, 0x4A, 0x0A,
    0x92, 0x45, 0x0A, 0x93, 0x46, 0x0A, 0x9A, 0x49, 0x0A, 0x9B, 0x49, 0x09,
    0x9B, 0x49, 0x0A, 0x99, 0x49, 0x0A, 0x73, 0x44, 0x1F, 0x6B, 0x44, 0x25,
    0x6E, 0x44, 0x25, 0x6A, 0x42, 0x2A, 0x56, 0x43, 0x5F, 0xB6, 0xB7, 0xD0,
    0xE4, 0xE8, 0xFC, 0xCB, 0xCD, 0xF6, 0xA7, 0x9A, 0xBB, 0x90, 0x4D, 0x22,
    0x9F, 0x57, 0x24, 0xA1, 0x5B, 0x2C, 0xA2, 0x5F, 0x33, 0xA4, 0x63, 0x39,
    0xA6, 0x66, 0x3E, 0x9D, 0x63, 0x41, 0x90, 0x8B, 0xB8, 0xBD, 0xBE, 0xF2,
    0xD8, 0xDF, 0xFB, 0xD7, 0xDE, 0xFC, 0xD6, 0xDE, 0xFB, 0xD5, 0xDD, 0xFB,
    0xD5, 0xDC, 0xFB, 0xCB, 0xD2, 0xED, 0x8A, 0x8F, 0xA2, 0xBD, 0xC3, 0xDE,
    0xC5, 0xCB, 0xE8, 0xD0, 0xD7, 0xF5, 0xD5, 0xDD, 0xFB, 0xD5, 0xDD, 0xFB,
    0xD7, 0xDF, 0xFB, 0xD8, 0xE0, 0xFC, 0xD8, 0xDF, 0xFC, 0xD8, 0xDF, 0xFC,
    0xD7, 0xDE, 0xFC, 0xD6, 0xDE, 0xFC, 0xD7, 0xDE, 0xFC, 0xDF, 0xE6, 0xFD,
    0x87, 0x8C, 0xBC, 0x9F, 0xA4, 0xE9, 0xA8, 0xAD, 0xEE, 0xB5, 0xB9, 0xF5,
    0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB6, 0xBA, 0xF4, 0xA0, 0xA4, 0xD2,
    0xE9, 0xEF, 0xFD, 0xE4, 0xEB, 0xFD, 0xE0, 0xE7, 0xFD, 0xDE, 0xE6, 0xFC,
    0xC2, 0xC1, 0xD8, 0x98, 0x8A, 0x9F, 0xA0, 0x8E, 0xA3, 0xAD, 0x9E, 0xBB,
    0xB6, 0xB3, 0xE3, 0xBC, 0xBC, 0xF1, 0xBD, 0xBD, 0xF2, 0xBE, 0xBF, 0xF2,
    0xB8, 0xB8, 0xE2, 0x4E, 0x3C, 0x5E, 0x82, 0x4A, 0x2B, 0x85, 0x4B, 0x29,
    0x83, 0x4B, 0x29, 0x81, 0x4A, 0x2A, 0x71, 0x3F, 0x23, 0x61, 0x33, 0x1A,
    0x70, 0x3F, 0x22, 0x76, 0x46, 0x27, 0x73, 0x45, 0x26, 0x70, 0x45, 0x26,
    0x6E, 0x45, 0x25, 0x6C, 0x44, 0x25, 0x8F, 0x4C, 0x13, 0xA1, 0x50, 0x0B,
    0xA1, 0x50, 0x0B, 0x95, 0x4C, 0x0E, 0xB3, 0x9F, 0x94, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xAE, 0x99, 0x8F, 0x87, 0x41, 0x0D, 0x9D, 0x4B, 0x0A, 0x87, 0x41, 0x0C,
    0x7C, 0x3B, 0x0D, 0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x0A,
    0x9B, 0x49, 0x0A, 0x9A, 0x49, 0x0A, 0x78, 0x46, 0x1F, 0x6B, 0x44, 0x25,
    0x68, 0x42, 0x2A, 0x57, 0x49, 0x6B, 0xCA, 0xCC, 0xE3, 0xCA, 0xCC, 0xF5,
    0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0x8A, 0x66, 0x68, 0x9D, 0x54, 0x20,
    0x9F, 0x58, 0x28, 0xA1, 0x5D, 0x31, 0xA3, 0x61, 0x37, 0xA5, 0x65, 0x3E,
    0xA6, 0x68, 0x42, 0x92, 0x5E, 0x45, 0x99, 0x96, 0xC6, 0xC0, 0xC0, 0xF2,
    0xD9, 0xE0, 0xFB, 0xD4, 0xDC, 0xFB, 0xCF, 0xD5, 0xF9, 0xCB, 0xD0, 0xF6,
    0xC0, 0xC5, 0xE6, 0x80, 0x84, 0x98, 0x99, 0x9E, 0xB4, 0xC6, 0xCD, 0xEB,
    0xD3, 0xDA, 0xFA, 0xCD, 0xD5, 0xF7, 0xCD, 0xD5, 0xF7, 0xD1, 0xD9, 0xFA,
    0xD3, 0xDB, 0xFB, 0xD7, 0xDE, 0xFB, 0xD8, 0xDE, 0xFC, 0xD7, 0xDF, 0xFC,
    0xD7, 0xDE, 0xFC, 0xD6, 0xDE, 0xFC, 0xD6, 0xDE, 0xFC, 0xDA, 0xE1, 0xFC,
    0x7C, 0x81, 0xB5, 0x9B, 0xA0, 0xE6, 0x9F, 0xA3, 0xEA, 0xA3, 0xA8, 0xEC,
    0xB1, 0xB5, 0xF3, 0xB7, 0xBB, 0xF5, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB8, 0xBC, 0xF6, 0xB0, 0xB4, 0xEE,
    0xBB, 0xC1, 0xDF, 0xE1, 0xE8, 0xFD, 0xDF, 0xE7, 0xFC, 0xDE, 0xE6, 0xFB,
    0xD5, 0xDA, 0xEC, 0xB7, 0xAF, 0xB8, 0x98, 0x82, 0x7C, 0x67, 0x39, 0x1D,
    0x6F, 0x3E, 0x23, 0x7B, 0x53, 0x44, 0x81, 0x68, 0x73, 0x9D, 0x93, 0xB7,
    0xB8, 0xB7, 0xEB, 0x91, 0x8E, 0xC0, 0x60, 0x3B, 0x3E, 0x86, 0x4C, 0x2A,
    0x86, 0x4C, 0x2A, 0x84, 0x4B, 0x2A, 0x82, 0x4B, 0x29, 0x74, 0x40, 0x22,
    0x5D, 0x2F, 0x16, 0x68, 0x39, 0x1C, 0x74, 0x45, 0x26, 0x72, 0x45, 0x26,
    0x6F, 0x45, 0x26, 0x6E, 0x45, 0x25, 0x98, 0x4E, 0x0F, 0xA2, 0x50, 0x0B,
    0xA2, 0x51, 0x0B, 0x83, 0x43, 0x11, 0xCE, 0xC2, 0xBB, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xAD, 0x98, 0x8E, 0x89, 0x43, 0x0E, 0x8B, 0x43, 0x0B, 0x76, 0x38, 0x0D,
    0x9A, 0x49, 0x0A, 0x9A, 0x4A, 0x0A, 0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x0A,
    0x9A, 0x49, 0x09, 0x9A, 0x49, 0x0A, 0x7B, 0x46, 0x1D, 0x6A, 0x43, 0x26,
    0x54, 0x45, 0x66, 0xCE, 0xD1, 0xE6, 0xC4, 0xC4, 0xF3, 0xBD, 0xBD, 0xF2,
    0xBD, 0xBD, 0xF2, 0xAE, 0xAA, 0xD9, 0x89, 0x4A, 0x25, 0x9D, 0x55, 0x23,
    0xA0, 0x5A, 0x2C, 0xA1, 0x5F, 0x34, 0xA3, 0x63, 0x3C, 0xA5, 0x67, 0x41,
    0xA6, 0x6A, 0x45, 0x8A, 0x5B, 0x49, 0xA3, 0xA1, 0xD3, 0xC1, 0xC2, 0xF3,
    0xD3, 0xD8, 0xF9, 0xBF, 0xC0, 0xED, 0x88, 0x85, 0xA0, 0x67, 0x4D, 0x3E,
    0x5C, 0x57, 0x5B, 0x88, 0x8D, 0xA0, 0xAF, 0xB6, 0xCF, 0xCD, 0xD5, 0xF3,
    0xD3, 0xDA, 0xFB, 0xD2, 0xDA, 0xFB, 0xD1, 0xD9, 0xFA, 0xCC, 0xD4, 0xF7,
    0xCA, 0xD2, 0xF6, 0xD0, 0xD7, 0xF8, 0xD6, 0xDE, 0xFB, 0xD7, 0xDF, 0xFC,
    0xD6, 0xDE, 0xFC, 0xD6, 0xDE, 0xFC, 0xD7, 0xDF, 0xFC, 0xD9, 0xE1, 0xFC,
    0xA9, 0xAF, 0xD3, 0x6D, 0x71, 0xB5, 0x9F, 0xA3, 0xEA, 0x9F, 0xA3, 0xEA,
    0x9F, 0xA4, 0xEA, 0xA8, 0xAD, 0xEE, 0xB0, 0xB4, 0xF2, 0xB3, 0xB7, 0xF3,
    0xB6, 0xBA, 0xF5, 0xB7, 0xBB, 0xF5, 0xB7, 0xBB, 0xF5, 0xB8, 0xBC, 0xF6,
    0xB8, 0xBC, 0xF6, 0xB7, 0xBB, 0xF5, 0xB4, 0xB8, 0xF4, 0xAA, 0xAF, 0xEF,
    0x98, 0x9D, 0xCA, 0xE0, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD,
    0xDF, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD, 0xE0, 0xE7, 0xFD, 0xD0, 0xCB, 0xD4,
    0x88, 0x62, 0x4B, 0x8D, 0x53, 0x27, 0xA7, 0x68, 0x36, 0x8F, 0x57, 0x31,
    0x70, 0x47, 0x38, 0x82, 0x6F, 0x84, 0x59, 0x4B, 0x71, 0x82, 0x49, 0x2D,
    0x87, 0x4C, 0x2A, 0x85, 0x4B, 0x2A, 0x84, 0x4B, 0x2A, 0x81, 0x4A, 0x29,
    0x66, 0x35, 0x1A, 0x77, 0x41, 0x21, 0x64, 0x35, 0x19, 0x72, 0x45, 0x25,
    0x71, 0x45, 0x26, 0x73, 0x46, 0x23, 0x9F, 0x50, 0x0C, 0xA1, 0x51, 0x0B,
    0xA2, 0x51, 0x0B, 0x77, 0x46, 0x25, 0xFA, 0xF9, 0xF8, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xAD, 0x98, 0x8D, 0x83, 0x40, 0x0D, 0x6A, 0x33, 0x0E, 0x96, 0x48, 0x0A,
    0x9B, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9A, 0x4A, 0x0A, 0x9A, 0x49, 0x0A,
    0x9A, 0x49, 0x09, 0x9B, 0x4A, 0x0A, 0x7E, 0x46, 0x1A, 0x55, 0x3C, 0x4A,
    0xBC, 0xBD, 0xD5, 0xC9, 0xCA, 0xF5, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2,
    0xBD, 0xBD, 0xF2, 0x91, 0x7A, 0x8D, 0x9B, 0x51, 0x1D, 0x9E, 0x57, 0x27,
    0xA0, 0x5C, 0x30, 0xA2, 0x61, 0x38, 0xA4, 0x66, 0x3F, 0xA5, 0x69, 0x45,
    0xA7, 0x6C, 0x49, 0x86, 0x5A, 0x4A, 0xAF, 0xAE, 0xE0, 0xBF, 0xC0, 0xF2,
    0xAB, 0xAA, 0xD1, 0x75, 0x5D, 0x5A, 0x99, 0x5E, 0x2E, 0x7E, 0x55, 0x31,
    0xBE, 0xC1, 0xD8, 0xD3, 0xDC, 0xFB, 0xD3, 0xDC, 0xFB, 0xD2, 0xDA, 0xFA,
    0xCD, 0xD5, 0xF7, 0xCF, 0xD6, 0xF8, 0xD2, 0xDA, 0xFA, 0xD2, 0xDA, 0xFB,
    0xD2, 0xD9, 0xFA, 0xCF, 0xD7, 0xF9, 0xCE, 0xD6, 0xF7, 0xCF, 0xD7, 0xF8,
    0xD2, 0xDA, 0xF9, 0xD5, 0xDD, 0xFB, 0xD8, 0xDF, 0xFC, 0xD9, 0xE1, 0xFC,
    0xDD, 0xE3, 0xFC, 0x94, 0x99, 0xC1, 0x6B, 0x6F, 0xB2, 0x9A, 0x9E, 0xE5,
    0x9F, 0xA3, 0xEA, 0x9F, 0xA3, 0xEA, 0x9F, 0xA3, 0xEA, 0x9F, 0xA4, 0xEA,
    0xA1, 0xA5, 0xEA, 0xA3, 0xA7, 0xEC, 0xA5, 0xAA, 0xED, 0xA8, 0xAC, 0xEE,
    0xAA, 0xAE, 0xEF, 0xA6, 0xAB, 0xED, 0xA0, 0xA5, 0xEA, 0x9C, 0xA1, 0xE7,
    0x86, 0x8B, 0xBE, 0xDC, 0xE3, 0xFC, 0xDE, 0xE6, 0xFD, 0xDF, 0xE6, 0xFD,
    0xDF, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD, 0xE0, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD,
    0xDD, 0xE2, 0xF8, 0xA0, 0x8D, 0x8B, 0x89, 0x54, 0x30, 0xAE, 0x70, 0x42,
    0xAD, 0x72, 0x47, 0x99, 0x62, 0x3E, 0x67, 0x3D, 0x30, 0x69, 0x3A, 0x2B,
    0x88, 0x4B, 0x29, 0x87, 0x4C, 0x2A, 0x85, 0x4C, 0x29, 0x83, 0x4B, 0x29,
    0x73, 0x3F, 0x21, 0x7E, 0x46, 0x23, 0x87, 0x4C, 0x25, 0x61, 0x34, 0x19,
    0x71, 0x45, 0x25, 0x7B, 0x48, 0x1F, 0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B,
    0x9C, 0x4D, 0x0B, 0x91, 0x73, 0x62, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xA4, 0x8C, 0x80, 0x66, 0x31, 0x0F, 0x89, 0x42, 0x0B, 0x9C, 0x4B, 0x0A,
    0x9B, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9A, 0x4A, 0x0A, 0x9A, 0x4A, 0x0A,
    0x9A, 0x49, 0x09, 0x9A, 0x49, 0x09, 0x78, 0x42, 0x21, 0x79, 0x73, 0x98,
    0xDE, 0xE2, 0xFA, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2,
    0xB9, 0xB8, 0xEC, 0x85, 0x53, 0x42, 0x9D, 0x54, 0x21, 0x9F, 0x59, 0x2A,
    0xA1, 0x5E, 0x33, 0xA2, 0x63, 0x3C, 0xA4, 0x67, 0x43, 0xA5, 0x6A, 0x48,
    0xA6, 0x6C, 0x4B, 0x7C, 0x54, 0x42, 0xB2, 0xB1, 0xE1, 0x95, 0x8F, 0xB0,
    0x80, 0x5A, 0x46, 0xA9, 0x69, 0x37, 0x93, 0x5B, 0x2C, 0xAF, 0xAB, 0xBA,
    0xD4, 0xDC, 0xFB, 0xD3, 0xDC, 0xFB, 0xD2, 0xDA, 0xFA, 0xD2, 0xDA, 0xFA,
    0xD3, 0xDB, 0xFB, 0xD1, 0xD8, 0xF9, 0xCC, 0xD3, 0xF6, 0xCA, 0xD1, 0xF5,
    0xC9, 0xD1, 0xF5, 0xCD, 0xD5, 0xF8, 0xD2, 0xDA, 0xFA, 0xD5, 0xDC, 0xFB,
    0xD3, 0xDA, 0xFA, 0xD1, 0xD9, 0xF8, 0xD3, 0xDA, 0xF9, 0xD6, 0xDD, 0xFA,
    0xDC, 0xE3, 0xFC, 0xE1, 0xE8, 0xFD, 0xB9, 0xBF, 0xDA, 0x71, 0x75, 0xA8,
    0x74, 0x78, 0xBC, 0x99, 0x9C, 0xE3, 0x9E, 0xA2, 0xE9, 0x9E, 0xA2, 0xE9,
    0x9F, 0xA3, 0xEA, 0x9F, 0xA3, 0xEA, 0x9F, 0xA3, 0xEA, 0x9F, 0xA3, 0xEA,
    0x9F, 0xA3, 0xEA, 0x9F, 0xA3, 0xEA, 0x9E, 0xA2, 0xE9, 0x82, 0x86, 0xCB,
    0xA9, 0xAF, 0xD9, 0xD6, 0xDD, 0xFB, 0xDA, 0xE1, 0xFC, 0xDD, 0xE4, 0xFC,
    0xDD, 0xE4, 0xFC, 0xDD, 0xE5, 0xFC, 0xDD, 0xE5, 0xFC, 0xDD, 0xE4, 0xFC,
    0xDC, 0xE3, 0xFC, 0xDB, 0xE2, 0xFB, 0xAB, 0xA1, 0xAB, 0x89, 0x57, 0x38,
    0xAE, 0x74, 0x4D, 0xAD, 0x75, 0x50, 0xAD, 0x74, 0x51, 0x8A, 0x56, 0x39,
    0x6A, 0x39, 0x1F, 0x86, 0x4A, 0x29, 0x86, 0x4C, 0x29, 0x84, 0x4B, 0x29,
    0x78, 0x43, 0x24, 0x74, 0x3F, 0x1F, 0xA2, 0x5F, 0x2F, 0x7A, 0x41, 0x1D,
    0x62, 0x35, 0x1A, 0x82, 0x4A, 0x1C, 0xA1, 0x50, 0x0B, 0xA2, 0x51, 0x0B,
    0x8F, 0x47, 0x0C, 0xAC, 0x96, 0x8B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x91, 0x75, 0x65, 0x69, 0x33, 0x0F, 0x9D, 0x4B, 0x0A, 0x9C, 0x4B, 0x09,
    0x9B, 0x4A, 0x09, 0x9B, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9A, 0x49, 0x0A,
    0x9A, 0x49, 0x0A, 0x9A, 0x49, 0x09, 0x5D, 0x39, 0x42, 0xCF, 0xD2, 0xE4,
    0xCE, 0xD0, 0xF6, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2,
    0xA3, 0x9B, 0xC5, 0x91, 0x4C, 0x1F, 0x9E, 0x56, 0x23, 0x9F, 0x5B, 0x2E,
    0xA1, 0x60, 0x37, 0xA3, 0x64, 0x40, 0xA4, 0x68, 0x47, 0xA6, 0x6B, 0x4C,
    0xA7, 0x6E, 0x4E, 0x77, 0x53, 0x43, 0x86, 0x7D, 0x96, 0x8A, 0x5D, 0x43,
    0xAB, 0x6E, 0x43, 0xA9, 0x69, 0x37, 0x90, 0x7B, 0x73, 0xD6, 0xDD, 0xFB,
    0xD5, 0xDC, 0xFB, 0xD4, 0xDC, 0xFB, 0xD3, 0xDB, 0xFB, 0xCF, 0xD7, 0xF9,
    0xCD, 0xD5, 0xF7, 0xD0, 0xD8, 0xF9, 0xD3, 0xDB, 0xFB, 0xD3, 0xDB, 0xFB,
    0xD2, 0xDA, 0xFA, 0xCE, 0xD6, 0xF8, 0xCC, 0xD3, 0xF6, 0xCD, 0xD5, 0xF6,
    0xD4, 0xDB, 0xFB, 0xD5, 0xDD, 0xFC, 0xD6, 0xDE, 0xFC, 0xD8, 0xDF, 0xFC,
    0xDD, 0xE4, 0xFC, 0xE3, 0xEA, 0xFD, 0xE7, 0xEE, 0xFE, 0xE9, 0xEF, 0xFE,
    0xC5, 0xCB, 0xE0, 0x85, 0x89, 0xB3, 0x63, 0x66, 0xA4, 0x6F, 0x73, 0xB8,
    0x8A, 0x8E, 0xD4, 0x94, 0x98, 0xDE, 0x9B, 0x9F, 0xE6, 0x9A, 0x9E, 0xE5,
    0x91, 0x95, 0xDB, 0x87, 0x8A, 0xD1, 0x72, 0x75, 0xB8, 0x96, 0x9B, 0xCA,
    0xD2, 0xDA, 0xFB, 0xD4, 0xDC, 0xFB, 0xD5, 0xDC, 0xFC, 0xD6, 0xDD, 0xFC,
    0xD6, 0xDE, 0xFC, 0xD7, 0xDE, 0xFC, 0xD7, 0xDE, 0xFC, 0xD7, 0xDE, 0xFC,
    0xD7, 0xDF, 0xFC, 0xD7, 0xDF, 0xFC, 0xD7, 0xDE, 0xFB, 0xA2, 0x95, 0x9D,
    0x92, 0x5E, 0x3F, 0xAE, 0x78, 0x55, 0xAE, 0x78, 0x57, 0xAD, 0x77, 0x58,
    0x9E, 0x69, 0x4C, 0x6C, 0x3B, 0x21, 0x83, 0x49, 0x28, 0x84, 0x4C, 0x2A,
    0x7D, 0x47, 0x27, 0x68, 0x37, 0x1A, 0xA3, 0x60, 0x30, 0xA1, 0x5B, 0x27,
    0x72, 0x3B, 0x18, 0x78, 0x3D, 0x13, 0xA1, 0x51, 0x0B, 0xA2, 0x51, 0x0A,
    0x81, 0x40, 0x0D, 0xCA, 0xBD, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFD,
    0x7A, 0x57, 0x44, 0x8D, 0x44, 0x0B, 0x9D, 0x4C, 0x0A, 0x9C, 0x4B, 0x09,
    0x9C, 0x4A, 0x09, 0x9B, 0x4A, 0x0A, 0x9B, 0x4A, 0x0A, 0x9A, 0x49, 0x0A,
    0x9A, 0x49, 0x0A, 0x95, 0x47, 0x0E, 0x67, 0x59, 0x78, 0xED, 0xF3, 0xFE,
    0xC5, 0xC6, 0xF4, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2,
    0x90, 0x76, 0x86, 0x9C, 0x52, 0x1C, 0x9E, 0x57, 0x26, 0xA0, 0x5C, 0x31,
    0xA1, 0x61, 0x3A, 0xA3, 0x66, 0x43, 0xA5, 0x6A, 0x4B, 0xA6, 0x6D, 0x4F,
    0xA6, 0x6E, 0x51, 0x6E, 0x4A, 0x38, 0x89, 0x5C, 0x43, 0xA9, 0x6E, 0x49,
    0xAD, 0x72, 0x4A, 0x8F, 0x5E, 0x3A, 0xC5, 0xC9, 0xDE, 0xD9, 0xE1, 0xFC,
    0xD9, 0xE0, 0xFC, 0xD7, 0xDE, 0xFC, 0xD5, 0xDC, 0xFB, 0xD4, 0xDC, 0xFB,
    0xD5, 0xDC, 0xFB, 0xD1, 0xD7, 0xF9, 0xCB, 0xD2, 0xF6, 0xCC, 0xD4, 0xF6,
    0xD2, 0xDA, 0xFA, 0xD5, 0xDC, 0xFB, 0xD5, 0xDD, 0xFB, 0xD7, 0xDE, 0xFB,
    0xD7, 0xDF, 0xFC, 0xD6, 0xDE, 0xFC, 0xD7, 0xDF, 0xFC, 0xDA, 0xE1, 0xFC,
    0xE2, 0xE9, 0xFD, 0xE8, 0xEE, 0xFE, 0xEB, 0xF1, 0xFE, 0xEC, 0xF2, 0xFF,
    0xEC, 0xF3, 0xFE, 0xED, 0xF3, 0xFE, 0xE6, 0xEC, 0xF9, 0xC3, 0xC8, 0xDF,
    0x9B, 0xA0, 0xC3, 0x78, 0x7C, 0xA9, 0x7A, 0x7E, 0xAC, 0x84, 0x88, 0xB5,
    0x92, 0x96, 0xBF, 0xB0, 0xB6, 0xD6, 0xD7, 0xDE, 0xF6, 0xD9, 0xE0, 0xFC,
    0xD7, 0xDE, 0xFC, 0xD6, 0xDE, 0xFB, 0xD5, 0xDD, 0xFC, 0xD5, 0xDD, 0xFC,
    0xD5, 0xDD, 0xFC, 0xD5, 0xDD, 0xFC, 0xD4, 0xDB, 0xFB, 0xD2, 0xDA, 0xFB,
    0xD3, 0xDB, 0xFB, 0xD4, 0xDC, 0xFB, 0xD5, 0xDC, 0xFB, 0xD4, 0xDB, 0xF9,
    0x8C, 0x73, 0x70, 0xA1, 0x6D, 0x50, 0xAE, 0x7A, 0x5C, 0xAE, 0x79, 0x5B,
    0xAD, 0x78, 0x5A, 0xA0, 0x6B, 0x4D, 0x69, 0x38, 0x1E, 0x82, 0x4A, 0x28,
    0x81, 0x4A, 0x29, 0x61, 0x32, 0x18, 0xA2, 0x60, 0x30, 0xA3, 0x5D, 0x28,
    0x9F, 0x57, 0x20, 0x66, 0x33, 0x13, 0x92, 0x48, 0x0C, 0xA2, 0x51, 0x0A,
    0x73, 0x39, 0x0F, 0xE1, 0xDA, 0xD5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD0, 0xC4, 0xBE,
    0x70, 0x39, 0x13, 0x9E, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9C, 0x4B, 0x09,
    0x9C, 0x4A, 0x09, 0x9B, 0x4A, 0x09, 0x9B, 0x4A, 0x09, 0x9A, 0x49, 0x0A,
    0x9A, 0x49, 0x0A, 0x91, 0x47, 0x11, 0x7E, 0x77, 0x98, 0xED, 0xF3, 0xFE,
    0xC4, 0xC5, 0xF4, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xBA, 0xBA, 0xEF,
    0x86, 0x55, 0x45, 0x9D, 0x53, 0x1F, 0x9F, 0x59, 0x2A, 0xA0, 0x5E, 0x34,
    0xA2, 0x63, 0x3E, 0xA4, 0x68, 0x47, 0xA5, 0x6C, 0x4D, 0xA6, 0x6F, 0x51,
    0x8A, 0x5C, 0x44, 0x8E, 0x5F, 0x46, 0xA8, 0x6F, 0x4F, 0xA9, 0x6E, 0x49,
    0xA7, 0x6A, 0x41, 0x9A, 0x8A, 0x87, 0xDB, 0xE2, 0xFC, 0xDA, 0xE0, 0xFC,
    0xDA, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC, 0xCD, 0xD4, 0xF2, 0xCC, 0xD3, 0xF2,
    0xD5, 0xDD, 0xFB, 0xD5, 0xDD, 0xFC, 0xD6, 0xDE, 0xFC, 0xD5, 0xDD, 0xFB,
    0xCF, 0xD6, 0xF7, 0xCD, 0xD4, 0xF6, 0xCF, 0xD6, 0xF6, 0xD4, 0xDB, 0xF8,
    0xDA, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDB, 0xE2, 0xFC, 0xDF, 0xE6, 0xFD,
    0xE6, 0xED, 0xFE, 0xEC, 0xF2, 0xFE, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF,
    0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xEB, 0xF1, 0xFE,
    0xE8, 0xEE, 0xFE, 0xE3, 0xE9, 0xFD, 0xDF, 0xE6, 0xFD, 0xDD, 0xE4, 0xFC,
    0xDC, 0xE3, 0xFC, 0xDA, 0xE1, 0xFC, 0xD7, 0xDF, 0xFC, 0xD3, 0xDB, 0xFA,
    0xD0, 0xD8, 0xF8, 0xCF, 0xD6, 0xF7, 0xCB, 0xD3, 0xF6, 0xC8, 0xD0, 0xF6,
    0xC7, 0xCF, 0xF5, 0xC9, 0xD0, 0xF5, 0xCA, 0xD2, 0xF6, 0xCA, 0xD2, 0xF6,
    0xBF, 0xC1, 0xDF, 0x79, 0x4E, 0x39, 0xAE, 0x7B, 0x5D, 0xAF, 0x7B, 0x5F,
    0xAD, 0x79, 0x5D, 0xAC, 0x77, 0x59, 0x98, 0x64, 0x46, 0x6D, 0x3A, 0x1D,
    0x80, 0x4A, 0x29, 0x63, 0x34, 0x1A, 0xA2, 0x60, 0x30, 0xA4, 0x5E, 0x28,
    0xA2, 0x59, 0x20, 0x94, 0x4F, 0x19, 0x6A, 0x33, 0x10, 0xA0, 0x50, 0x0A,
    0x68, 0x36, 0x17, 0xF2, 0xEF, 0xEE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x82, 0x62, 0x50,
    0x91, 0x47, 0x0C, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4B, 0x09,
    0x9C, 0x4B, 0x09, 0x9B, 0x4A, 0x09, 0x9B, 0x4A, 0x09, 0x9B, 0x49, 0x09,
    0x9A, 0x49, 0x09, 0x98, 0x48, 0x0C, 0x78, 0x6B, 0x87, 0xEE, 0xF4, 0xFF,
    0xCC, 0xCE, 0xF6, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xA8, 0xA0, 0xC9,
    0x8D, 0x4A, 0x1F, 0x9D, 0x55, 0x22, 0x9F, 0x5A, 0x2C, 0xA0, 0x5F, 0x37,
    0xA2, 0x64, 0x41, 0xA4, 0x69, 0x4A, 0xA5, 0x6D, 0x50, 0xA1, 0x6C, 0x51,
    0x81, 0x56, 0x40, 0xA8, 0x71, 0x54, 0xA8, 0x70, 0x50, 0xA8, 0x6E, 0x4A,
    0x97, 0x66, 0x46, 0xCA, 0xCD, 0xDE, 0xDC, 0xE3, 0xFC, 0xDB, 0xE2, 0xFC,
    0xDA, 0xE1, 0xFC, 0xB0, 0xB5, 0xD8, 0x4B, 0x4D, 0x7F, 0x4F, 0x52, 0x83,
    0xCA, 0xD1, 0xF0, 0xD8, 0xDF, 0xFC, 0xD8, 0xDF, 0xFC, 0xD8, 0xDE, 0xFC,
    0xD7, 0xDE, 0xFC, 0xD8, 0xE0, 0xFC, 0xD9, 0xE0, 0xFC, 0xD8, 0xDF, 0xFA,
    0xDB, 0xE2, 0xFC, 0xDC, 0xE4, 0xFC, 0xDE, 0xE5, 0xFD, 0xE2, 0xE8, 0xFD,
    0xE9, 0xEF, 0xFE, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xEC, 0xF2, 0xFF, 0xEA, 0xF0, 0xFE,
    0xE6, 0xEC, 0xFE, 0xE2, 0xE9, 0xFD, 0xE0, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD,
    0xDE, 0xE5, 0xFD, 0xDC, 0xE4, 0xFC, 0xD9, 0xE1, 0xFC, 0xD8, 0xDF, 0xFC,
    0xD8, 0xDF, 0xFC, 0xD8, 0xDF, 0xFC, 0xD6, 0xDE, 0xFB, 0xD2, 0xDA, 0xFB,
    0xCE, 0xD7, 0xFB, 0xCF, 0xD7, 0xFB, 0xCF, 0xD7, 0xFB, 0xCE, 0xD7, 0xFB,
    0xCD, 0xD6, 0xFA, 0x9D, 0x88, 0x91, 0x91, 0x61, 0x46, 0xB0, 0x7E, 0x61,
    0xAF, 0x7C, 0x61, 0xAD, 0x79, 0x5D, 0xAC, 0x76, 0x57, 0x85, 0x51, 0x32,
    0x74, 0x41, 0x22, 0x63, 0x34, 0x1A, 0xA2, 0x61, 0x31, 0xA4, 0x5E, 0x28,
    0xA3, 0x5A, 0x20, 0xA3, 0x57, 0x19, 0x72, 0x39, 0x13, 0x84, 0x41, 0x0C,
    0x6A, 0x41, 0x29, 0xFC, 0xFB, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE2, 0xDA, 0xD7, 0x6B, 0x37, 0x16,
    0x9E, 0x4D, 0x0A, 0x9E, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x09,
    0x9C, 0x4B, 0x09, 0x9C, 0x4A, 0x09, 0x9B, 0x4A, 0x09, 0x9B, 0x49, 0x09,
    0x9B, 0x49, 0x09, 0x9B, 0x49, 0x09, 0x63, 0x3E, 0x46, 0xD9, 0xDD, 0xED,
    0xDE, 0xE3, 0xFA, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0x95, 0x7C, 0x8E,
    0x9A, 0x50, 0x1A, 0x9E, 0x56, 0x24, 0xA0, 0x5C, 0x2F, 0xA1, 0x61, 0x39,
    0xA2, 0x66, 0x43, 0xA5, 0x6B, 0x4C, 0xA6, 0x6E, 0x52, 0x88, 0x5A, 0x43,
    0xA1, 0x6D, 0x52, 0xA8, 0x72, 0x55, 0xA9, 0x71, 0x51, 0xA8, 0x6E, 0x4A,
    0xA2, 0x8B, 0x7F, 0xE7, 0xEE, 0xFD, 0xE1, 0xE8, 0xFD, 0xDD, 0xE4, 0xFC,
    0xD5, 0xDC, 0xF7, 0x53, 0x55, 0x87, 0x75, 0x79, 0xA7, 0x6C, 0x70, 0xA1,
    0xB9, 0xBE, 0xE1, 0xDB, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC,
    0xD9, 0xE0, 0xFC, 0xD9, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDB, 0xE3, 0xFC,
    0xDD, 0xE4, 0xFD, 0xDE, 0xE5, 0xFD, 0xE0, 0xE7, 0xFD, 0xE5, 0xEB, 0xFD,
    0xEB, 0xF1, 0xFE, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xEC, 0xF2, 0xFF, 0xE9, 0xF0, 0xFE,
    0xE6, 0xED, 0xFE, 0xE3, 0xEA, 0xFD, 0xE1, 0xE7, 0xFD, 0xDF, 0xE6, 0xFD,
    0xDE, 0xE4, 0xFD, 0xDD, 0xE4, 0xFD, 0xDA, 0xE1, 0xFC, 0xD9, 0xE0, 0xFC,
    0xD9, 0xE0, 0xFC, 0xD8, 0xE0, 0xFC, 0xD8, 0xDF, 0xFC, 0xD6, 0xDE, 0xFB,
    0xD1, 0xD9, 0xFB, 0xCD, 0xD6, 0xFB, 0xCD, 0xD6, 0xFB, 0xCD, 0xD5, 0xFB,
    0xCD, 0xD5, 0xFB, 0xC3, 0xC5, 0xEF, 0x7A, 0x53, 0x45, 0xAF, 0x7E, 0x63,
    0xAF, 0x7D, 0x63, 0xAE, 0x7B, 0x5F, 0xAD, 0x77, 0x59, 0xA9, 0x71, 0x4F,
    0x6E, 0x3C, 0x20, 0x66, 0x37, 0x1C, 0xA3, 0x62, 0x33, 0xA5, 0x5F, 0x29,
    0xA4, 0x5A, 0x20, 0xA2, 0x57, 0x19, 0x9C, 0x51, 0x14, 0x61, 0x2F, 0x11,
    0x6D, 0x47, 0x33, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAA, 0x94, 0x88, 0x83, 0x40, 0x0D,
    0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4B, 0x09, 0x9C, 0x4B, 0x09, 0x9C, 0x4A, 0x09, 0x9B, 0x4A, 0x09,
    0x9B, 0x4A, 0x09, 0x9A, 0x49, 0x0A, 0x77, 0x42, 0x22, 0x73, 0x6C, 0x92,
    0xE9, 0xEE, 0xFA, 0xDD, 0xE1, 0xFA, 0xC8, 0xC9, 0xF4, 0x8B, 0x5E, 0x53,
    0x9C, 0x51, 0x1B, 0x9E, 0x57, 0x26, 0xA0, 0x5D, 0x31, 0xA2, 0x62, 0x3B,
    0xA3, 0x67, 0x45, 0xA5, 0x6C, 0x4D, 0xA0, 0x6A, 0x4F, 0x96, 0x64, 0x4C,
    0xA8, 0x72, 0x57, 0xA9, 0x72, 0x55, 0xA9, 0x70, 0x50, 0x9F, 0x68, 0x48,
    0xCB, 0xCA, 0xD0, 0xED, 0xF3, 0xFE, 0xE9, 0xEF, 0xFD, 0xD0, 0xD6, 0xEE,
    0xBD, 0xC2, 0xE1, 0x3D, 0x3F, 0x79, 0xB3, 0xB9, 0xDD, 0x6F, 0x73, 0xA6,
    0xC8, 0xCE, 0xED, 0xDA, 0xE0, 0xFC, 0xDB, 0xE2, 0xFC, 0xDB, 0xE2, 0xFC,
    0xDB, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDB, 0xE1, 0xFC, 0xDC, 0xE3, 0xFC,
    0xDE, 0xE5, 0xFD, 0xE1, 0xE8, 0xFD, 0xE5, 0xEC, 0xFD, 0xEA, 0xF0, 0xFE,
    0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xEC, 0xF2, 0xFF, 0xEA, 0xF0, 0xFE,
    0xE7, 0xED, 0xFE, 0xE4, 0xEA, 0xFD, 0xE1, 0xE8, 0xFD, 0xDF, 0xE6, 0xFD,
    0xDD, 0xE4, 0xFC, 0xDB, 0xE2, 0xFC, 0xDA, 0xE1, 0xFC, 0xD9, 0xE0, 0xFC,
    0xD9, 0xE0, 0xFB, 0xD3, 0xDA, 0xF8, 0xD3, 0xDA, 0xF8, 0xD1, 0xD8, 0xF7,
    0xCF, 0xD7, 0xF7, 0xCA, 0xD2, 0xF7, 0xC8, 0xD0, 0xF8, 0xCB, 0xD3, 0xF9,
    0xCD, 0xD5, 0xFB, 0xC8, 0xCE, 0xF8, 0x9B, 0x8B, 0xA2, 0x98, 0x69, 0x50,
    0xB1, 0x7F, 0x65, 0xAF, 0x7D, 0x63, 0xAD, 0x78, 0x5A, 0xAB, 0x74, 0x52,
    0x94, 0x5E, 0x3C, 0x61, 0x33, 0x19, 0xA4, 0x63, 0x34, 0xA5, 0x5F, 0x2A,
    0xA4, 0x5B, 0x21, 0xA3, 0x57, 0x1A, 0xA2, 0x55, 0x14, 0x83, 0x42, 0x10,
    0x77, 0x53, 0x41, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x76, 0x51, 0x3D, 0x99, 0x4B, 0x0A,
    0x9F, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4B, 0x0A,
    0x9C, 0x4B, 0x09, 0x9C, 0x4B, 0x09, 0x9C, 0x4B, 0x09, 0x9B, 0x4A, 0x09,
    0x9B, 0x4A, 0x0A, 0x96, 0x49, 0x0C, 0x73, 0x45, 0x1F, 0x58, 0x3B, 0x39,
    0x6F, 0x67, 0x89, 0xCA, 0xCD, 0xE0, 0xE6, 0xEA, 0xF5, 0x87, 0x4A, 0x25,
    0x9C, 0x52, 0x1C, 0x9F, 0x58, 0x27, 0xA0, 0x5D, 0x32, 0xA2, 0x62, 0x3D,
    0xA4, 0x68, 0x46, 0xA5, 0x6C, 0x4E, 0xA2, 0x6C, 0x51, 0xA6, 0x70, 0x56,
    0xA8, 0x72, 0x57, 0xA8, 0x71, 0x55, 0xA8, 0x70, 0x50, 0x9C, 0x79, 0x65,
    0xEC, 0xF2, 0xFC, 0xED, 0xF3, 0xFE, 0xCD, 0xD2, 0xE6, 0xAB, 0xB0, 0xCD,
    0x90, 0x94, 0xBA, 0x61, 0x64, 0x98, 0x75, 0x7A, 0xAB, 0x79, 0x7D, 0xAF,
    0x9B, 0xA0, 0xCA, 0xD5, 0xDB, 0xF7, 0xDC, 0xE3, 0xFC, 0xDC, 0xE3, 0xFC,
    0xDC, 0xE3, 0xFC, 0xDC, 0xE3, 0xFC, 0xDD, 0xE4, 0xFC, 0xE0, 0xE7, 0xFD,
    0xE4, 0xEB, 0xFD, 0xE8, 0xEF, 0xFE, 0xEB, 0xF2, 0xFE, 0xED, 0xF3, 0xFF,
    0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xEA, 0xF0, 0xFE,
    0xE6, 0xED, 0xFE, 0xE3, 0xEA, 0xFD, 0xE0, 0xE7, 0xFD, 0xDF, 0xE6, 0xFD,
    0xDC, 0xE4, 0xFC, 0xDA, 0xE1, 0xFC, 0xD9, 0xE0, 0xFC, 0xD9, 0xE1, 0xFC,
    0xD9, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xDA, 0xE1, 0xFC, 0xD9, 0xE1, 0xFC,
    0xD9, 0xE1, 0xFC, 0xD5, 0xDD, 0xFB, 0xC9, 0xD1, 0xF7, 0xCA, 0xD2, 0xF9,
    0xCD, 0xD5, 0xFB, 0xCC, 0xD3, 0xFA, 0xBD, 0xBC, 0xEE, 0x8B, 0x65, 0x59,
    0xB0, 0x7E, 0x65, 0xB2, 0x81, 0x66, 0xAD, 0x79, 0x5B, 0xAD, 0x75, 0x54,
    0xA7, 0x6D, 0x49, 0x6C, 0x3B, 0x1F, 0xA6, 0x64, 0x35, 0xA4, 0x5F, 0x29,
    0xA3, 0x5B, 0x20, 0xA2, 0x57, 0x19, 0xA2, 0x54, 0x14, 0xA0, 0x52, 0x0F,
    0x6A, 0x39, 0x1B, 0xEC, 0xE7, 0xE4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xEB, 0xE6, 0xE3, 0x6A, 0x36, 0x15, 0xA0, 0x4E, 0x0A,
    0x9F, 0x4D, 0x0A, 0x9E, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9D, 0x4B, 0x09, 0x9C, 0x4B, 0x09, 0x9C, 0x4B, 0x09, 0x9B, 0x4B, 0x0A,
    0x9B, 0x4A, 0x0A, 0x8E, 0x48, 0x11, 0x70, 0x44, 0x21, 0x6A, 0x44, 0x24,
    0x66, 0x42, 0x2A, 0x50, 0x38, 0x45, 0x50, 0x3E, 0x5F, 0x8F, 0x49, 0x1B,
    0x9D, 0x53, 0x1D, 0x9F, 0x58, 0x27, 0xA0, 0x5E, 0x33, 0xA2, 0x63, 0x3D,
    0xA4, 0x68, 0x47, 0xA5, 0x6C, 0x4E, 0xA6, 0x6F, 0x54, 0xA7, 0x71, 0x57,
    0xA8, 0x72, 0x57, 0xA7, 0x71, 0x54, 0xA5, 0x6D, 0x4D, 0xBC, 0xAF, 0xAD,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xC6, 0xCB, 0xE0, 0x7C, 0x7F, 0xA8,
    0x80, 0x84, 0xAD, 0x49, 0x4C, 0x86, 0x5E, 0x62, 0x98, 0x5D, 0x61, 0x97,
    0x63, 0x67, 0x9D, 0x8E, 0x93, 0xBF, 0xD5, 0xDB, 0xF4, 0xE1, 0xE8, 0xFD,
    0xE4, 0xEA, 0xFD, 0xE6, 0xED, 0xFE, 0xE9, 0xEF, 0xFE, 0xEB, 0xF1, 0xFE,
    0xEC, 0xF3, 0xFE, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xEB, 0xF1, 0xFE,
    0xE6, 0xEC, 0xFE, 0xE2, 0xE8, 0xFD, 0xDF, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD,
    0xDF, 0xE6, 0xFD, 0xDD, 0xE4, 0xFC, 0xDC, 0xE3, 0xFC, 0xDB, 0xE2, 0xFC,
    0xD0, 0xD7, 0xF6, 0xCD, 0xD4, 0xF4, 0xCC, 0xD3, 0xF3, 0xCB, 0xD2, 0xF3,
    0xC9, 0xCF, 0xF2, 0xCA, 0xD1, 0xF3, 0xCF, 0xD6, 0xF7, 0xD1, 0xD9, 0xFB,
    0xCD, 0xD5, 0xFB, 0xCE, 0xD6, 0xFB, 0xC7, 0xCA, 0xF5, 0xA0, 0x8F, 0xA5,
    0xA4, 0x75, 0x5C, 0xAF, 0x7D, 0x62, 0xAE, 0x79, 0x5C, 0xAD, 0x76, 0x54,
    0xA7, 0x6D, 0x48, 0x7F, 0x4B, 0x29, 0xA7, 0x65, 0x35, 0xA5, 0x5F, 0x29,
    0xA4, 0x5A, 0x20, 0xA2, 0x57, 0x19, 0xA2, 0x54, 0x13, 0xA2, 0x53, 0x0F,
    0x8A, 0x45, 0x0E, 0xA0, 0x87, 0x79, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xC1, 0xB1, 0xA9, 0x7C, 0x3D, 0x0E, 0xA0, 0x4E, 0x0A,
    0x9F, 0x4D, 0x0A, 0x9E, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9D, 0x4B, 0x0A, 0x9C, 0x4B, 0x09, 0x9C, 0x4B, 0x09, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4A, 0x0A, 0x87, 0x48, 0x15, 0x6C, 0x44, 0x23, 0x6A, 0x44, 0x25,
    0x6B, 0x45, 0x25, 0x6A, 0x44, 0x26, 0x60, 0x3A, 0x2C, 0x9B, 0x4E, 0x15,
    0x9E, 0x53, 0x1D, 0x9F, 0x59, 0x28, 0xA1, 0x5E, 0x33, 0xA2, 0x63, 0x3D,
    0xA4, 0x68, 0x47, 0xA5, 0x6C, 0x4E, 0xA6, 0x6F, 0x53, 0xA6, 0x70, 0x56,
    0xA6, 0x70, 0x56, 0xA7, 0x70, 0x53, 0x9A, 0x68, 0x4C, 0xE0, 0xE2, 0xEA,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xCB, 0xD0, 0xE5,
    0x6B, 0x6F, 0x9E, 0x40, 0x44, 0x80, 0x38, 0x3B, 0x7B, 0x4A, 0x4E, 0x88,
    0x4A, 0x4E, 0x89, 0x45, 0x49, 0x85, 0x73, 0x78, 0xA7, 0xD2, 0xD8, 0xEB,
    0xED, 0xF3, 0xFE, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF, 0xED, 0xF3, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xEC, 0xF2, 0xFF,
    0xE7, 0xED, 0xFE, 0xE2, 0xE9, 0xFD, 0xE1, 0xE7, 0xFD, 0xE1, 0xE7, 0xFD,
    0xE1, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD, 0xDE, 0xE6, 0xFD, 0xDE, 0xE5, 0xFD,
    0xDD, 0xE4, 0xFD, 0xDD, 0xE4, 0xFD, 0xDC, 0xE4, 0xFC, 0xDB, 0xE3, 0xFC,
    0xDB, 0xE2, 0xFC, 0xDB, 0xE2, 0xFC, 0xDB, 0xE3, 0xFC, 0xD4, 0xDC, 0xF7,
    0xB3, 0xBA, 0xD6, 0xD1, 0xD8, 0xF1, 0xDD, 0xE2, 0xFA, 0xB7, 0xB4, 0xE4,
    0x94, 0x6A, 0x58, 0xAF, 0x7D, 0x62, 0xAE, 0x79, 0x5C, 0xAD, 0x76, 0x54,
    0xA3, 0x6A, 0x46, 0x8B, 0x55, 0x30, 0xA7, 0x65, 0x35, 0xA5, 0x5F, 0x29,
    0xA4, 0x5A, 0x20, 0xA2, 0x56, 0x18, 0xA2, 0x54, 0x13, 0xA1, 0x52, 0x0E,
    0x9F, 0x4F, 0x0B, 0x70, 0x40, 0x22, 0xF0, 0xEC, 0xEA, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x90, 0x73, 0x63, 0x91, 0x47, 0x0B, 0xA0, 0x4E, 0x0A,
    0x9F, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4B, 0x0A,
    0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4B, 0x0A, 0x81, 0x47, 0x18, 0x6A, 0x44, 0x24, 0x6B, 0x44, 0x25,
    0x6B, 0x45, 0x25, 0x66, 0x40, 0x26, 0x6D, 0x3F, 0x23, 0x9C, 0x4F, 0x14,
    0x9E, 0x53, 0x1D, 0x9F, 0x59, 0x27, 0xA1, 0x5E, 0x33, 0xA2, 0x63, 0x3D,
    0xA4, 0x67, 0x46, 0xA6, 0x6C, 0x4E, 0xA6, 0x6E, 0x52, 0xA6, 0x70, 0x54,
    0xA7, 0x70, 0x54, 0xA7, 0x6F, 0x51, 0x9D, 0x79, 0x67, 0xED, 0xF3, 0xFE,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xE2, 0xE8, 0xF6, 0x94, 0x99, 0xBE, 0x44, 0x47, 0x83, 0x36, 0x3A, 0x7A,
    0x3B, 0x3F, 0x7E, 0x45, 0x49, 0x85, 0x3E, 0x41, 0x7F, 0x4C, 0x50, 0x8A,
    0xAD, 0xB2, 0xD0, 0xEA, 0xF0, 0xFC, 0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF,
    0xE8, 0xEE, 0xFE, 0xE3, 0xEA, 0xFD, 0xE1, 0xE7, 0xFC, 0xE0, 0xE7, 0xFD,
    0xE0, 0xE7, 0xFD, 0xE0, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD, 0xDF, 0xE6, 0xFD,
    0xDE, 0xE4, 0xFD, 0xDD, 0xE4, 0xFD, 0xDD, 0xE4, 0xFD, 0xDC, 0xE4, 0xFC,
    0xDC, 0xE3, 0xFC, 0xDB, 0xE3, 0xFC, 0xD8, 0xDF, 0xF8, 0x84, 0x88, 0x97,
    0x8C, 0x90, 0x9E, 0xAC, 0xB0, 0xBA, 0xEB, 0xF1, 0xFD, 0xC0, 0xC0, 0xF2,
    0x95, 0x79, 0x7E, 0xAF, 0x7D, 0x62, 0xAE, 0x79, 0x5C, 0xAC, 0x75, 0x54,
    0x9C, 0x65, 0x42, 0x97, 0x5D, 0x36, 0xA7, 0x64, 0x34, 0xA5, 0x5E, 0x29,
    0xA3, 0x5A, 0x1F, 0xA2, 0x56, 0x18, 0xA1, 0x53, 0x12, 0xA1, 0x52, 0x0E,
    0xA1, 0x50, 0x0B, 0x83, 0x41, 0x0E, 0xAF, 0x99, 0x8F, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFA, 0xF9, 0xF8, 0x6F, 0x46, 0x2E, 0x9D, 0x4D, 0x0A, 0xA0, 0x4E, 0x0A,
    0x9F, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9C, 0x4C, 0x0A, 0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A,
    0x9C, 0x4B, 0x0A, 0x7B, 0x46, 0x1B, 0x6A, 0x44, 0x24, 0x6B, 0x44, 0x25,
    0x6B, 0x45, 0x25, 0x62, 0x3D, 0x22, 0x7D, 0x44, 0x19, 0x9D, 0x50, 0x14,
    0x9E, 0x54, 0x1C, 0xA0, 0x59, 0x27, 0xA1, 0x5E, 0x32, 0xA3, 0x63, 0x3C,
    0xA3, 0x67, 0x45, 0xA5, 0x6B, 0x4B, 0xA6, 0x6E, 0x50, 0xA6, 0x6F, 0x53,
    0xA6, 0x6F, 0x53, 0xA7, 0x6E, 0x50, 0xB0, 0x97, 0x8D, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEC, 0xF2, 0xFE, 0xCA, 0xCF, 0xE5, 0x78, 0x7D, 0xAA,
    0x3F, 0x43, 0x80, 0x33, 0x36, 0x78, 0x36, 0x39, 0x7A, 0x3D, 0x40, 0x7F,
    0x34, 0x37, 0x78, 0x64, 0x69, 0x9B, 0xB4, 0xBA, 0xD5, 0xEB, 0xF1, 0xFD,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF,
    0xEA, 0xF1, 0xFE, 0xE5, 0xEC, 0xFD, 0xE2, 0xE9, 0xFC, 0xE1, 0xE8, 0xFD,
    0xE1, 0xE7, 0xFD, 0xE0, 0xE7, 0xFD, 0xDF, 0xE7, 0xFD, 0xDE, 0xE6, 0xFD,
    0xDE, 0xE5, 0xFD, 0xDE, 0xE4, 0xFD, 0xDD, 0xE4, 0xFD, 0xDD, 0xE4, 0xFD,
    0xDC, 0xE4, 0xFC, 0xDC, 0xE3, 0xFC, 0x97, 0x9C, 0xAE, 0x71, 0x74, 0x80,
    0xD4, 0xDA, 0xEA, 0xA5, 0xAA, 0xB2, 0xED, 0xF3, 0xFE, 0xC6, 0xC8, 0xF2,
    0xA3, 0x97, 0xB3, 0xA5, 0x74, 0x5A, 0xAE, 0x79, 0x5B, 0xAC, 0x74, 0x53,
    0x96, 0x5F, 0x3E, 0x9F, 0x62, 0x39, 0xA7, 0x64, 0x33, 0xA5, 0x5E, 0x28,
    0xA3, 0x59, 0x1F, 0xA2, 0x55, 0x17, 0xA1, 0x53, 0x12, 0xA1, 0x51, 0x0D,
    0xA1, 0x50, 0x0B, 0x9D, 0x4E, 0x0B, 0x72, 0x4A, 0x33, 0xFE, 0xFE, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xDF, 0xD7, 0xD3, 0x6F, 0x38, 0x13, 0xA1, 0x4F, 0x0A, 0xA0, 0x4E, 0x0A,
    0x9F, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A, 0x9E, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9D, 0x4C, 0x0A, 0x9D, 0x4B, 0x0A, 0x9C, 0x4B, 0x0A, 0x9D, 0x4B, 0x0A,
    0x9C, 0x4B, 0x0A, 0x77, 0x45, 0x1D, 0x6A, 0x44, 0x25, 0x6B, 0x44, 0x25,
    0x6B, 0x44, 0x25, 0x5E, 0x3A, 0x20, 0x8C, 0x49, 0x15, 0x9E, 0x50, 0x13,
    0x9E, 0x54, 0x1C, 0xA0, 0x59, 0x27, 0xA1, 0x5E, 0x31, 0xA3, 0x63, 0x3B,
    0xA3, 0x67, 0x43, 0xA5, 0x6B, 0x4A, 0xA6, 0x6D, 0x4F, 0xA6, 0x6E, 0x51,
    0xA6, 0x6E, 0x51, 0xA6, 0x6D, 0x4E, 0xBD, 0xAF, 0xAD, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xEC, 0xF2, 0xFD,
    0xCF, 0xD4, 0xE8, 0x84, 0x89, 0xB2, 0x44, 0x48, 0x84, 0x30, 0x33, 0x75,
    0x31, 0x34, 0x76, 0x32, 0x35, 0x76, 0x48, 0x4C, 0x87, 0x70, 0x75, 0xA4,
    0xBD, 0xC3, 0xDB, 0xEB, 0xF1, 0xFC, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF4, 0xFF,
    0xED, 0xF3, 0xFE, 0xE9, 0xF0, 0xFD, 0xE7, 0xEE, 0xFE, 0xE5, 0xEC, 0xFD,
    0xE5, 0xEB, 0xFD, 0xE4, 0xEB, 0xFD, 0xE3, 0xEA, 0xFD, 0xE2, 0xE9, 0xFD,
    0xE1, 0xE8, 0xFD, 0xDF, 0xE6, 0xFD, 0xDE, 0xE4, 0xFC, 0xDC, 0xE2, 0xFB,
    0xDC, 0xE4, 0xFC, 0xD7, 0xDE, 0xF7, 0x57, 0x5A, 0x7B, 0xB0, 0xB6, 0xCE,
    0xB7, 0xBC, 0xD1, 0xA0, 0xA4, 0xB5, 0xCF, 0xD5, 0xE1, 0xC6, 0xC8, 0xEE,
    0xB4, 0xB1, 0xDE, 0x93, 0x67, 0x50, 0xAE, 0x79, 0x5A, 0xAC, 0x74, 0x52,
    0x91, 0x5C, 0x3C, 0xA5, 0x67, 0x3C, 0xA6, 0x63, 0x32, 0xA4, 0x5D, 0x27,
    0xA3, 0x59, 0x1E, 0xA2, 0x55, 0x17, 0xA1, 0x53, 0x11, 0xA1, 0x50, 0x0D,
    0xA1, 0x50, 0x0B, 0xA2, 0x51, 0x0B, 0x70, 0x38, 0x12, 0xDF, 0xD6, 0xD2,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xBB, 0xAA, 0xA1, 0x81, 0x3F, 0x0E, 0xA1, 0x4F, 0x0A, 0xA0, 0x4F, 0x0A,
    0x9F, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9D, 0x4B, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9C, 0x4C, 0x0A, 0x73, 0x45, 0x20, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x69, 0x43, 0x24, 0x62, 0x3A, 0x1C, 0x9C, 0x4E, 0x0F, 0x9E, 0x51, 0x14,
    0x9F, 0x54, 0x1C, 0xA0, 0x59, 0x26, 0xA1, 0x5E, 0x30, 0xA2, 0x62, 0x39,
    0xA4, 0x67, 0x42, 0xA4, 0x6A, 0x49, 0xA5, 0x6D, 0x4E, 0x9A, 0x64, 0x47,
    0x92, 0x60, 0x41, 0x99, 0x63, 0x44, 0xBE, 0xBB, 0xC8, 0xED, 0xF3, 0xFE,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xDC, 0xE2, 0xF2, 0x9E, 0xA3, 0xC5,
    0x59, 0x5C, 0x91, 0x33, 0x36, 0x76, 0x2F, 0x32, 0x73, 0x3C, 0x3F, 0x7C,
    0x56, 0x59, 0x8E, 0x94, 0x99, 0xBB, 0xE7, 0xED, 0xF9, 0xEE, 0xF4, 0xFF,
    0xEF, 0xF5, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xED, 0xF3, 0xFE, 0xEC, 0xF2, 0xFE, 0xEC, 0xF2, 0xFE, 0xEB, 0xF1, 0xFE,
    0xEA, 0xF1, 0xFE, 0xE9, 0xF0, 0xFE, 0xE9, 0xEF, 0xFD, 0xE8, 0xEE, 0xFD,
    0xE7, 0xEE, 0xFC, 0xE5, 0xEB, 0xFC, 0xDF, 0xE6, 0xFA, 0xCF, 0xD6, 0xEF,
    0xBF, 0xC6, 0xE3, 0xAC, 0xB2, 0xD4, 0x63, 0x68, 0x98, 0x75, 0x7A, 0xA5,
    0x61, 0x64, 0x90, 0x68, 0x6B, 0x8C, 0xA0, 0xA4, 0xB6, 0xC6, 0xC8, 0xEE,
    0xBC, 0xBC, 0xED, 0x8C, 0x66, 0x53, 0xAE, 0x78, 0x5A, 0xAC, 0x74, 0x51,
    0x8C, 0x58, 0x37, 0xA8, 0x69, 0x3C, 0xA6, 0x62, 0x32, 0xA4, 0x5D, 0x26,
    0xA3, 0x58, 0x1D, 0xA2, 0x55, 0x16, 0xA1, 0x52, 0x10, 0xA1, 0x50, 0x0C,
    0xA1, 0x50, 0x0B, 0xA2, 0x51, 0x0B, 0x85, 0x42, 0x0E, 0xB0, 0x9B, 0x90,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x99, 0x7E, 0x70, 0x93, 0x49, 0x0C, 0xA1, 0x50, 0x0A, 0x9F, 0x4F, 0x0A,
    0x9F, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9E, 0x4C, 0x0A,
    0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A,
    0x9C, 0x4C, 0x0A, 0x6F, 0x45, 0x21, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x66, 0x41, 0x23, 0x74, 0x3F, 0x17, 0x9E, 0x4F, 0x0F, 0x9F, 0x51, 0x15,
    0x9F, 0x55, 0x1C, 0xA0, 0x59, 0x26, 0xA2, 0x5E, 0x30, 0xA3, 0x62, 0x39,
    0xA4, 0x66, 0x41, 0xA5, 0x6A, 0x48, 0xA6, 0x6C, 0x4C, 0xA6, 0x6D, 0x4F,
    0xA1, 0x6A, 0x4C, 0x89, 0x5A, 0x3D, 0x7C, 0x65, 0x62, 0xCC, 0xCA, 0xDD,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE,
    0xDD, 0xE2, 0xF2, 0xC0, 0xC6, 0xDD, 0x8D, 0x91, 0xB7, 0x8A, 0x8E, 0xB5,
    0x92, 0x96, 0xBA, 0xBA, 0xC0, 0xD8, 0xE3, 0xE9, 0xF6, 0xED, 0xF3, 0xFE,
    0xEF, 0xF4, 0xFE, 0xF0, 0xF5, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xED, 0xF3, 0xFE, 0xED, 0xF3, 0xFE, 0xED, 0xF3, 0xFE, 0xEC, 0xF2, 0xFD,
    0xE8, 0xEE, 0xFA, 0xDD, 0xE3, 0xF2, 0xD3, 0xD9, 0xEC, 0xC6, 0xCB, 0xE2,
    0xAE, 0xB3, 0xD1, 0x91, 0x96, 0xBC, 0x76, 0x7B, 0xA9, 0x5E, 0x62, 0x97,
    0x50, 0x54, 0x8C, 0x45, 0x49, 0x84, 0x46, 0x4A, 0x85, 0x4D, 0x51, 0x89,
    0x5E, 0x62, 0x93, 0xA7, 0xAC, 0xC8, 0xDF, 0xE5, 0xF4, 0xC7, 0xC9, 0xF0,
    0xBF, 0xBF, 0xF2, 0x8C, 0x6C, 0x5E, 0xAE, 0x78, 0x59, 0xAC, 0x73, 0x50,
    0x8D, 0x58, 0x37, 0xA8, 0x67, 0x3B, 0xA6, 0x62, 0x30, 0xA4, 0x5D, 0x25,
    0xA3, 0x58, 0x1C, 0xA2, 0x54, 0x15, 0xA1, 0x52, 0x0F, 0xA1, 0x50, 0x0B,
    0xA1, 0x50, 0x0B, 0xA2, 0x51, 0x0B, 0x96, 0x4B, 0x0C, 0x84, 0x63, 0x52,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x79, 0x54, 0x40, 0x9D, 0x4E, 0x0A, 0xA1, 0x50, 0x0A, 0xA0, 0x4F, 0x0A,
    0x9F, 0x4E, 0x0A, 0x9E, 0x4D, 0x0A, 0xA2, 0x53, 0x12, 0x9F, 0x4D, 0x0B,
    0x9D, 0x4C, 0x0A, 0x9D, 0x4C, 0x0A, 0x9E, 0x4C, 0x0A, 0x9E, 0x4C, 0x0A,
    0x9A, 0x4C, 0x0B, 0x6C, 0x44, 0x23, 0x6A, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x69, 0x3F, 0x1F, 0x89, 0x45, 0x0F, 0x9E, 0x4F, 0x0F, 0x9F, 0x52, 0x15,
    0xA0, 0x56, 0x1D, 0xA1, 0x59, 0x26, 0xA2, 0x5F, 0x30, 0xA3, 0x62, 0x39,
    0xA4, 0x66, 0x41, 0xA5, 0x69, 0x48, 0xA6, 0x6C, 0x4C, 0xA6, 0x6D, 0x4E,
    0xA6, 0x6D, 0x4E, 0x9A, 0x64, 0x47, 0x91, 0x5E, 0x3F, 0x78, 0x5B, 0x4E,
    0xAD, 0x9E, 0x97, 0xE2, 0xE4, 0xEB, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xE9, 0xEF, 0xFB, 0xD9, 0xDF, 0xF0, 0xD5, 0xDB, 0xED, 0xD3, 0xD9, 0xEB,
    0xDD, 0xE3, 0xF2, 0xE7, 0xED, 0xFA, 0xED, 0xF3, 0xFE, 0xED, 0xF3, 0xFE,
    0xEE, 0xF4, 0xFF, 0xF1, 0xF6, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xED, 0xF2, 0xFE, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xED, 0xF3, 0xFE, 0xDD, 0xE2, 0xF1, 0x9B, 0x9F, 0xBD, 0x5C, 0x60, 0x90,
    0x50, 0x53, 0x8B, 0x47, 0x4B, 0x86, 0x44, 0x48, 0x84, 0x42, 0x46, 0x83,
    0x40, 0x44, 0x81, 0x43, 0x46, 0x83, 0x3F, 0x43, 0x81, 0x3F, 0x43, 0x80,
    0x3C, 0x3F, 0x7E, 0x41, 0x45, 0x81, 0x42, 0x45, 0x81, 0x5D, 0x61, 0x95,
    0x98, 0x9C, 0xBF, 0xD6, 0xDB, 0xED, 0xEC, 0xF2, 0xFD, 0xCD, 0xCF, 0xF6,
    0xC0, 0xC0, 0xF2, 0x8A, 0x6E, 0x62, 0xA6, 0x71, 0x53, 0xA8, 0x6F, 0x4D,
    0x8D, 0x58, 0x36, 0xA7, 0x67, 0x3A, 0xA6, 0x62, 0x2F, 0xA4, 0x5C, 0x24,
    0xA3, 0x57, 0x1B, 0xA2, 0x54, 0x14, 0xA1, 0x51, 0x0F, 0xA1, 0x50, 0x0B,
    0xA1, 0x51, 0x0B, 0xA2, 0x51, 0x0B, 0xA2, 0x51, 0x0B, 0x66, 0x3A, 0x21,
    0xF7, 0xF5, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFA, 0xFA,
    0x6D, 0x3F, 0x24, 0xA1, 0x51, 0x0A, 0xA1, 0x50, 0x0A, 0xA0, 0x4F, 0x0A,
    0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A, 0x9E, 0x4C, 0x0A,
    0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A,
    0x98, 0x4C, 0x0D, 0x6A, 0x44, 0x23, 0x69, 0x44, 0x25, 0x6A, 0x44, 0x25,
    0x6E, 0x3F, 0x19, 0x94, 0x4A, 0x0E, 0x9F, 0x50, 0x10, 0xA0, 0x52, 0x15,
    0xA1, 0x56, 0x1D, 0xA1, 0x5A, 0x26, 0xA2, 0x5E, 0x30, 0xA4, 0x63, 0x38,
    0xA4, 0x67, 0x40, 0xA5, 0x69, 0x47, 0xA5, 0x6C, 0x4C, 0xA6, 0x6D, 0x4E,
    0xA6, 0x6D, 0x4E, 0x98, 0x63, 0x46, 0xA1, 0x68, 0x46, 0x84, 0x57, 0x3C,
    0x94, 0x87, 0x9A, 0x93, 0x7C, 0x72, 0xBB, 0xB1, 0xAB, 0xE9, 0xEE, 0xF7,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xF0, 0xF5, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xE8, 0xED, 0xF8, 0xA5, 0xA3, 0xB2, 0x85, 0x7E, 0x80,
    0xD2, 0xCD, 0xD1, 0xE8, 0xED, 0xFD, 0xEC, 0xF2, 0xFE, 0xED, 0xF3, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xE2, 0xE8, 0xF5, 0xBF, 0xC5, 0xDB,
    0x91, 0x96, 0xBA, 0x64, 0x68, 0x9A, 0x4A, 0x4D, 0x88, 0x40, 0x44, 0x81,
    0x3D, 0x41, 0x7F, 0x42, 0x46, 0x82, 0x51, 0x55, 0x8E, 0x6C, 0x70, 0xA0,
    0x88, 0x8D, 0xB5, 0xAE, 0xB4, 0xD0, 0xD1, 0xD7, 0xEA, 0xE5, 0xEB, 0xF8,
    0xEB, 0xF1, 0xFD, 0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xCC, 0xCD, 0xF6,
    0xC0, 0xC0, 0xF2, 0x91, 0x73, 0x66, 0x9F, 0x6C, 0x4D, 0x9D, 0x67, 0x46,
    0x97, 0x5F, 0x3A, 0xA8, 0x66, 0x38, 0xA5, 0x61, 0x2D, 0xA4, 0x5B, 0x23,
    0xA2, 0x57, 0x1A, 0xA2, 0x53, 0x13, 0xA1, 0x51, 0x0E, 0xA1, 0x50, 0x0B,
    0xA1, 0x51, 0x0B, 0xA2, 0x51, 0x0B, 0xA3, 0x52, 0x0B, 0x63, 0x31, 0x13,
    0xDE, 0xD5, 0xD1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF6, 0xF5,
    0x70, 0x40, 0x1F, 0xA3, 0x52, 0x0A, 0xA1, 0x50, 0x0A, 0xA0, 0x4F, 0x0A,
    0xA0, 0x4F, 0x0A, 0x9F, 0x4E, 0x0A, 0x9F, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A,
    0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A,
    0x96, 0x4B, 0x0E, 0x6A, 0x44, 0x24, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x6E, 0x3D, 0x17, 0x9D, 0x4F, 0x0E, 0xA0, 0x51, 0x11, 0xA0, 0x54, 0x17,
    0xA1, 0x57, 0x1E, 0xA2, 0x5B, 0x26, 0xA3, 0x5F, 0x30, 0xA3, 0x63, 0x39,
    0xA5, 0x67, 0x41, 0xA6, 0x6A, 0x47, 0xA6, 0x6C, 0x4C, 0xA7, 0x6E, 0x4E,
    0xA1, 0x6A, 0x4C, 0x91, 0x5F, 0x44, 0xA2, 0x69, 0x48, 0xA3, 0x68, 0x43,
    0x83, 0x6D, 0x73, 0xC7, 0xC8, 0xF2, 0xB7, 0xAC, 0xA7, 0x95, 0x7F, 0x6F,
    0xD0, 0xCC, 0xCE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xE1, 0xE5, 0xEF,
    0xE2, 0xE7, 0xF1, 0xED, 0xF3, 0xFE, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEF, 0xF5, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xCB, 0xCC, 0xF5, 0x6A, 0x57, 0x58,
    0x82, 0x5D, 0x47, 0x95, 0x8A, 0x9F, 0xC3, 0xC3, 0xF2, 0xDA, 0xDD, 0xF9,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEC, 0xF2, 0xFE, 0xDB, 0xE0, 0xF1,
    0xDE, 0xE4, 0xF3, 0xED, 0xF3, 0xFE, 0xE8, 0xEE, 0xFB, 0xE5, 0xEB, 0xF9,
    0xDF, 0xE5, 0xF4, 0xDB, 0xE1, 0xF1, 0xDA, 0xE0, 0xF0, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xC9, 0xCB, 0xF5,
    0xBB, 0xBB, 0xEC, 0x98, 0x73, 0x60, 0x9E, 0x6A, 0x4A, 0x8F, 0x5D, 0x3E,
    0xA4, 0x67, 0x3E, 0xA8, 0x66, 0x36, 0xA6, 0x60, 0x2C, 0xA4, 0x5B, 0x21,
    0xA2, 0x56, 0x19, 0xA1, 0x53, 0x12, 0xA1, 0x51, 0x0D, 0xA1, 0x50, 0x0B,
    0xA2, 0x51, 0x0B, 0xA3, 0x52, 0x0B, 0xA3, 0x52, 0x0B, 0x6A, 0x34, 0x10,
    0xD4, 0xC9, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF7, 0xF6,
    0x70, 0x3E, 0x1D, 0xA3, 0x52, 0x0B, 0xA2, 0x51, 0x0A, 0xA1, 0x50, 0x0A,
    0xA0, 0x4F, 0x0A, 0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A,
    0x9E, 0x4D, 0x0A, 0x9E, 0x4D, 0x0A, 0x9F, 0x4D, 0x0A, 0x9F, 0x4D, 0x0A,
    0x94, 0x4C, 0x0F, 0x69, 0x44, 0x24, 0x69, 0x44, 0x25, 0x69, 0x44, 0x25,
    0x74, 0x3E, 0x14, 0xA0, 0x50, 0x0F, 0xA0, 0x52, 0x12, 0xA1, 0x54, 0x17,
    0xA2, 0x58, 0x1F, 0xA3, 0x5C, 0x28, 0xA3, 0x60, 0x30, 0xA4, 0x63, 0x39,
    0xA5, 0x67, 0x41, 0xA6, 0x6A, 0x48, 0xA6, 0x6D, 0x4D, 0xA7, 0x6E, 0x50,
    0xA6, 0x6D, 0x50, 0x81, 0x56, 0x3F, 0xA3, 0x6A, 0x4B, 0xA6, 0x6A, 0x47,
    0x8D, 0x5C, 0x3F, 0xA1, 0x9F, 0xC8, 0xDC, 0xE0, 0xFA, 0xDC, 0xDD, 0xE2,
    0x91, 0x79, 0x68, 0xAB, 0x9B, 0x91, 0xE9, 0xEE, 0xF8, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xE1, 0xE5, 0xEF,
    0xAC, 0xAB, 0xB1, 0x98, 0x93, 0xA4, 0xC7, 0xC8, 0xED, 0xE0, 0xE5, 0xFB,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xCC, 0xCE, 0xF6, 0x81, 0x74, 0x85,
    0xA1, 0x74, 0x5A, 0x97, 0x6C, 0x54, 0x7F, 0x6F, 0x7C, 0xBB, 0xBB, 0xEF,
    0xD1, 0xD4, 0xF7, 0xEC, 0xF2, 0xFE, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE,
    0xE5, 0xEB, 0xF8, 0xDA, 0xE0, 0xF0, 0xDD, 0xE2, 0xF2, 0xE6, 0xEC, 0xF9,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xC5, 0xC6, 0xF4,
    0xB4, 0xB3, 0xE1, 0xA1, 0x75, 0x5D, 0x9B, 0x68, 0x48, 0x88, 0x57, 0x39,
    0xAA, 0x6B, 0x40, 0xA7, 0x65, 0x35, 0xA5, 0x5F, 0x2A, 0xA4, 0x5B, 0x20,
    0xA3, 0x56, 0x18, 0xA1, 0x53, 0x11, 0xA1, 0x51, 0x0C, 0xA2, 0x50, 0x0B,
    0xA2, 0x51, 0x0B, 0xA3, 0x52, 0x0B, 0xA4, 0x53, 0x0B, 0x6E, 0x36, 0x10,
    0xC8, 0xBA, 0xB2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF7, 0xF6,
    0x71, 0x42, 0x25, 0xA1, 0x51, 0x0B, 0xA2, 0x51, 0x0A, 0xA2, 0x51, 0x0B,
    0xA0, 0x4F, 0x0B, 0xA0, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A,
    0x9F, 0x4E, 0x0A, 0x9E, 0x4E, 0x0A, 0x9F, 0x4D, 0x0A, 0x9F, 0x4E, 0x0A,
    0x93, 0x4C, 0x0F, 0x69, 0x44, 0x24, 0x69, 0x44, 0x25, 0x69, 0x44, 0x24,
    0x7E, 0x41, 0x11, 0xA1, 0x51, 0x0F, 0xA1, 0x53, 0x12, 0xA2, 0x55, 0x18,
    0xA3, 0x59, 0x1F, 0xA3, 0x5D, 0x28, 0xA4, 0x61, 0x31, 0xA5, 0x64, 0x39,
    0xA5, 0x68, 0x41, 0xA6, 0x6B, 0x48, 0xA6, 0x6D, 0x4D, 0xA6, 0x6F, 0x51,
    0xA6, 0x6F, 0x52, 0x92, 0x61, 0x48, 0xA3, 0x6B, 0x4D, 0xA6, 0x6C, 0x4A,
    0xA5, 0x69, 0x44, 0x81, 0x6C, 0x72, 0xC3, 0xC4, 0xF2, 0xEC, 0xF1, 0xFE,
    0xE8, 0xEC, 0xF5, 0xA7, 0x96, 0x8C, 0x8D, 0x74, 0x61, 0xD7, 0xD6, 0xDA,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEB, 0xF1, 0xFE, 0xB0, 0xAE, 0xC7, 0x6C, 0x5B, 0x64, 0xAF, 0xAD, 0xDA,
    0xD6, 0xD9, 0xF8, 0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xD2, 0xD4, 0xF7, 0x8C, 0x80, 0x99,
    0x9E, 0x72, 0x5C, 0xB2, 0x82, 0x6A, 0x99, 0x6E, 0x59, 0x85, 0x78, 0x8D,
    0xBC, 0xBC, 0xF1, 0xD4, 0xD7, 0xF8, 0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xC2, 0xC3, 0xF3,
    0xA7, 0xA2, 0xC9, 0xA3, 0x71, 0x54, 0x9B, 0x67, 0x46, 0x8B, 0x59, 0x39,
    0xA9, 0x69, 0x3D, 0xA7, 0x64, 0x32, 0xA5, 0x5F, 0x28, 0xA4, 0x5A, 0x1F,
    0xA3, 0x56, 0x17, 0xA2, 0x53, 0x10, 0xA1, 0x51, 0x0C, 0xA2, 0x51, 0x0B,
    0xA2, 0x51, 0x0B, 0xA3, 0x52, 0x0B, 0xA4, 0x53, 0x0B, 0x76, 0x3A, 0x0E,
    0xB7, 0xA5, 0x9B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
    0x70, 0x48, 0x30, 0x9E, 0x50, 0x0B, 0xA3, 0x52, 0x0A, 0xA3, 0x53, 0x0E,
    0xA0, 0x4F, 0x0B, 0xA0, 0x4F, 0x0B, 0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A,
    0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A,
    0x93, 0x4C, 0x10, 0x69, 0x44, 0x24, 0x69, 0x44, 0x25, 0x69, 0x43, 0x23,
    0x88, 0x45, 0x0F, 0xA2, 0x52, 0x0F, 0xA2, 0x54, 0x13, 0xA2, 0x56, 0x18,
    0xA3, 0x5A, 0x1F, 0xA4, 0x5D, 0x28, 0xA5, 0x61, 0x32, 0xA5, 0x65, 0x3A,
    0xA6, 0x69, 0x42, 0xA6, 0x6C, 0x49, 0xA7, 0x6E, 0x4E, 0xA7, 0x6F, 0x52,
    0xA7, 0x70, 0x53, 0x92, 0x63, 0x4A, 0xA7, 0x6F, 0x51, 0xA7, 0x6D, 0x4E,
    0xA7, 0x6B, 0x49, 0x8D, 0x5D, 0x43, 0xA6, 0xA5, 0xD1, 0xDC, 0xDF, 0xFA,
    0xD8, 0xDD, 0xE8, 0xAB, 0xAE, 0xBD, 0xAF, 0xA3, 0xA6, 0x80, 0x62, 0x4C,
    0xC0, 0xB7, 0xB4, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEC, 0xF2, 0xFE, 0xA2, 0x96, 0x9E, 0x63, 0x47, 0x3E,
    0xB2, 0xB0, 0xE0, 0xD9, 0xDC, 0xF9, 0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xD7, 0xDA, 0xF9, 0x8D, 0x82, 0x9D,
    0x9C, 0x72, 0x5E, 0xB2, 0x84, 0x70, 0xB2, 0x83, 0x6E, 0x89, 0x64, 0x54,
    0x9A, 0x93, 0xB6, 0xBD, 0xBD, 0xF2, 0xDD, 0xE1, 0xFA, 0xED, 0xF3, 0xFE,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEC, 0xF2, 0xFE,
    0xEB, 0xF1, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEB, 0xF1, 0xFE, 0xBE, 0xBE, 0xF2,
    0x9B, 0x8C, 0xA2, 0xA8, 0x72, 0x51, 0x90, 0x5E, 0x3F, 0x9C, 0x64, 0x3E,
    0xA9, 0x69, 0x3B, 0xA7, 0x63, 0x30, 0xA5, 0x5E, 0x26, 0xA4, 0x59, 0x1D,
    0xA3, 0x55, 0x15, 0xA2, 0x52, 0x0F, 0xA2, 0x51, 0x0B, 0xA2, 0x51, 0x0B,
    0xA3, 0x52, 0x0B, 0xA4, 0x53, 0x0B, 0xA5, 0x54, 0x0B, 0x80, 0x40, 0x0E,
    0xAD, 0x98, 0x8D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x75, 0x51, 0x3E, 0x9A, 0x4E, 0x0B, 0xA3, 0x52, 0x0B, 0xA4, 0x53, 0x0D,
    0xA1, 0x50, 0x0B, 0xA0, 0x4F, 0x0B, 0xA0, 0x4F, 0x0A, 0xA0, 0x4F, 0x0A,
    0x9F, 0x4F, 0x0A, 0x9F, 0x4E, 0x0A, 0x9F, 0x4E, 0x0A, 0xA0, 0x4F, 0x0A,
    0x95, 0x4C, 0x10, 0x69, 0x44, 0x24, 0x69, 0x44, 0x25, 0x69, 0x41, 0x21,
    0x90, 0x49, 0x0E, 0xA2, 0x53, 0x0F, 0xA3, 0x54, 0x14, 0xA3, 0x57, 0x19,
    0xA4, 0x5A, 0x20, 0xA5, 0x5E, 0x29, 0xA5, 0x62, 0x31, 0xA6, 0x66, 0x3B,
    0xA7, 0x69, 0x43, 0xA7, 0x6C, 0x4A, 0xA8, 0x6F, 0x4F, 0xA7, 0x70, 0x53,
    0xA8, 0x71, 0x55, 0x93, 0x64, 0x4C, 0xA7, 0x70, 0x54, 0xA7, 0x6F, 0x51,
    0xA7, 0x6E, 0x4D, 0xA3, 0x69, 0x46, 0x8B, 0x7D, 0x8F, 0xC9, 0xCA, 0xF5,
    0xED, 0xF3, 0xFE, 0x9E, 0x9C, 0xA5, 0x8D, 0x89, 0xA0, 0xC0, 0xBA, 0xC6,
    0x85, 0x69, 0x53, 0xC9, 0xC3, 0xC2, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xE6, 0xEA, 0xF6, 0x7D, 0x52, 0x34,
    0x7A, 0x60, 0x5E, 0xBD, 0xBC, 0xEF, 0xE4, 0xE9, 0xFC, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xDA, 0xDE, 0xFA, 0x89, 0x7C, 0x94,
    0xA1, 0x77, 0x64, 0xB2, 0x85, 0x73, 0xB2, 0x85, 0x72, 0xB2, 0x83, 0x6F,
    0x7D, 0x60, 0x5C, 0xB4, 0xB2, 0xE2, 0xC1, 0xC1, 0xF3, 0xE9, 0xEE, 0xFD,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFF, 0xD8, 0xDC, 0xF9,
    0xD9, 0xDC, 0xF9, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xED, 0xF3, 0xFE, 0xE4, 0xE6, 0xED, 0xCC, 0xC8, 0xCF, 0x9F, 0x91, 0xA6,
    0x87, 0x68, 0x5D, 0x90, 0x62, 0x43, 0x82, 0x53, 0x34, 0xA9, 0x6C, 0x41,
    0xA9, 0x68, 0x39, 0xA7, 0x63, 0x2E, 0xA5, 0x5D, 0x24, 0xA4, 0x59, 0x1B,
    0xA3, 0x55, 0x13, 0xA2, 0x52, 0x0E, 0xA2, 0x51, 0x0B, 0xA3, 0x52, 0x0B,
    0xA3, 0x52, 0x0A, 0xA4, 0x53, 0x0B, 0xA5, 0x54, 0x0B, 0x84, 0x42, 0x0E,
    0xAB, 0x95, 0x89, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x86, 0x68, 0x58, 0x92, 0x4A, 0x0C, 0xA4, 0x53, 0x0B, 0xA3, 0x52, 0x0C,
    0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B, 0xA0, 0x4F, 0x0B, 0xA0, 0x4F, 0x0B,
    0xA0, 0x4F, 0x0A, 0xA0, 0x4F, 0x0A, 0xA0, 0x4F, 0x0A, 0xA0, 0x4F, 0x0B,
    0x97, 0x4D, 0x0F, 0x6B, 0x44, 0x23, 0x69, 0x44, 0x25, 0x6A, 0x41, 0x20,
    0x97, 0x4D, 0x0D, 0xA3, 0x53, 0x0F, 0xA3, 0x55, 0x14, 0xA5, 0x58, 0x19,
    0xA5, 0x5B, 0x20, 0xA6, 0x5F, 0x29, 0xA6, 0x63, 0x32, 0xA6, 0x67, 0x3B,
    0xA7, 0x6A, 0x43, 0xA8, 0x6D, 0x4A, 0xA8, 0x70, 0x50, 0xA8, 0x71, 0x54,
    0xA8, 0x72, 0x56, 0x92, 0x64, 0x4D, 0xA6, 0x71, 0x56, 0xA8, 0x71, 0x54,
    0xA8, 0x70, 0x51, 0xA7, 0x6D, 0x4C, 0x86, 0x64, 0x5A, 0xBA, 0xBA, 0xED,
    0xE7, 0xEC, 0xFD, 0xDC, 0xE0, 0xF2, 0x50, 0x3D, 0x35, 0xA6, 0xA2, 0xC2,
    0xC9, 0xC4, 0xCB, 0x87, 0x6C, 0x57, 0xDE, 0xDF, 0xE5, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0x97, 0x7E, 0x6E,
    0x8F, 0x56, 0x27, 0x99, 0x90, 0xB1, 0xC8, 0xCA, 0xF5, 0xEC, 0xF2, 0xFE,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xDA, 0xDE, 0xF9, 0x7B, 0x68, 0x74,
    0xAB, 0x80, 0x6E, 0xB2, 0x86, 0x75, 0xB2, 0x86, 0x75, 0xB2, 0x85, 0x73,
    0xA5, 0x79, 0x65, 0x88, 0x77, 0x88, 0xBD, 0xBD, 0xF2, 0xCF, 0xD2, 0xF7,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEC, 0xF1, 0xFE, 0xC5, 0xC6, 0xF3,
    0xCD, 0xCF, 0xF3, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEC, 0xF1, 0xFC, 0xD6, 0xD4, 0xD7, 0xB1, 0xA2, 0x99,
    0x98, 0x81, 0x71, 0x9E, 0x8A, 0x7C, 0xA2, 0x93, 0x96, 0xA0, 0x93, 0xAA,
    0x8C, 0x63, 0x4D, 0x99, 0x67, 0x45, 0x8C, 0x5A, 0x3A, 0xAA, 0x6C, 0x40,
    0xA9, 0x67, 0x36, 0xA7, 0x62, 0x2C, 0xA6, 0x5D, 0x23, 0xA4, 0x59, 0x1A,
    0xA3, 0x55, 0x12, 0xA3, 0x53, 0x0D, 0xA3, 0x52, 0x0B, 0xA3, 0x52, 0x0B,
    0xA4, 0x53, 0x0A, 0xA5, 0x54, 0x0B, 0xA6, 0x55, 0x0B, 0x84, 0x42, 0x0E,
    0xAD, 0x98, 0x8C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x97, 0x7E, 0x70, 0x88, 0x44, 0x0D, 0xA5, 0x53, 0x0B, 0xA3, 0x52, 0x0B,
    0xA2, 0x51, 0x0B, 0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B,
    0xA0, 0x4F, 0x0B, 0xA0, 0x4F, 0x0B, 0xA0, 0x50, 0x0B, 0xA1, 0x50, 0x0B,
    0x97, 0x4E, 0x0F, 0x6C, 0x44, 0x23, 0x69, 0x44, 0x25, 0x6B, 0x40, 0x1E,
    0x9C, 0x4F, 0x0D, 0xA4, 0x54, 0x0F, 0xA4, 0x57, 0x14, 0xA5, 0x59, 0x19,
    0xA6, 0x5C, 0x20, 0xA6, 0x60, 0x28, 0xA7, 0x64, 0x32, 0xA7, 0x67, 0x3B,
    0xA8, 0x6B, 0x43, 0xA8, 0x6E, 0x4B, 0xA8, 0x70, 0x50, 0xA9, 0x72, 0x55,
    0xA9, 0x73, 0x58, 0x97, 0x68, 0x51, 0xA3, 0x70, 0x56, 0xA9, 0x73, 0x57,
    0xA8, 0x71, 0x54, 0xA8, 0x70, 0x50, 0x9A, 0x66, 0x49, 0x9F, 0x9C, 0xC4,
    0xD7, 0xDA, 0xF8, 0xE1, 0xE5, 0xFB, 0x6C, 0x62, 0x6E, 0x7A, 0x5A, 0x4C,
    0xC7, 0xC9, 0xEF, 0xCC, 0xC7, 0xC8, 0x9B, 0x86, 0x77, 0xEC, 0xF2, 0xFC,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xA9, 0x99, 0x93,
    0xAA, 0x65, 0x2A, 0x78, 0x5B, 0x57, 0xBD, 0xBD, 0xF2, 0xDC, 0xE0, 0xFA,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xD8, 0xDB, 0xF9, 0x73, 0x59, 0x59,
    0xB2, 0x86, 0x75, 0xB2, 0x86, 0x77, 0xB2, 0x87, 0x77, 0xB2, 0x86, 0x75,
    0xB2, 0x85, 0x72, 0x86, 0x61, 0x52, 0xAE, 0xAA, 0xD6, 0xBE, 0xBE, 0xF2,
    0xE6, 0xEC, 0xFD, 0xEE, 0xF4, 0xFF, 0xE1, 0xE5, 0xFB, 0xB9, 0xB8, 0xEA,
    0x8F, 0x88, 0xA1, 0xE8, 0xED, 0xFD, 0xEE, 0xF4, 0xFF, 0xE8, 0xEC, 0xF5,
    0xBB, 0xB1, 0xAC, 0x9A, 0x84, 0x76, 0xAE, 0x9F, 0x97, 0xD3, 0xD0, 0xD3,
    0xEB, 0xF0, 0xFB, 0xED, 0xF3, 0xFE, 0xC9, 0xCB, 0xF5, 0xB1, 0xAA, 0xD2,
    0xA1, 0x6E, 0x4E, 0x95, 0x63, 0x42, 0xA3, 0x6A, 0x42, 0xAA, 0x6B, 0x3D,
    0xA9, 0x66, 0x33, 0xA7, 0x61, 0x2A, 0xA6, 0x5D, 0x21, 0xA5, 0x58, 0x18,
    0xA4, 0x55, 0x11, 0xA3, 0x53, 0x0D, 0xA3, 0x53, 0x0B, 0xA4, 0x53, 0x0B,
    0xA5, 0x53, 0x0B, 0xA5, 0x55, 0x0B, 0xA7, 0x56, 0x0C, 0x7E, 0x3F, 0x0E,
    0xB6, 0xA4, 0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xB1, 0xA0, 0x96, 0x7C, 0x3E, 0x0E, 0xA5, 0x54, 0x0B, 0xA4, 0x53, 0x0B,
    0xA3, 0x52, 0x0B, 0xA2, 0x51, 0x0B, 0xA2, 0x51, 0x0B, 0xA1, 0x50, 0x0B,
    0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B,
    0x95, 0x4E, 0x10, 0x6C, 0x44, 0x23, 0x69, 0x44, 0x25, 0x68, 0x3E, 0x1C,
    0xA2, 0x53, 0x0D, 0xA5, 0x55, 0x0F, 0xA5, 0x57, 0x13, 0xA6, 0x5A, 0x19,
    0xA7, 0x5D, 0x1F, 0xA7, 0x60, 0x28, 0xA8, 0x64, 0x32, 0xA8, 0x68, 0x3A,
    0xA8, 0x6B, 0x42, 0xA9, 0x6E, 0x4A, 0xA9, 0x70, 0x51, 0xA9, 0x72, 0x55,
    0xA9, 0x74, 0x58, 0xA0, 0x6E, 0x56, 0x9C, 0x6C, 0x54, 0xAA, 0x74, 0x5A,
    0xA9, 0x73, 0x57, 0xA9, 0x72, 0x54, 0xA9, 0x70, 0x50, 0x8B, 0x7A, 0x87,
    0xC6, 0xC7, 0xF4, 0xDA, 0xDE, 0xF9, 0x84, 0x81, 0xA1, 0x8D, 0x57, 0x2F,
    0x91, 0x8B, 0xAB, 0xDE, 0xE2, 0xFA, 0xC0, 0xB8, 0xB5, 0xCC, 0xC7, 0xC7,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xA9, 0x9A, 0x93,
    0xAC, 0x67, 0x2C, 0x89, 0x5B, 0x3E, 0xAB, 0xA6, 0xD1, 0xC5, 0xC6, 0xF4,
    0xED, 0xF2, 0xFE, 0xEE, 0xF4, 0xFF, 0xCC, 0xCD, 0xEE, 0x77, 0x55, 0x49,
    0xB2, 0x86, 0x75, 0xB2, 0x87, 0x77, 0xB2, 0x87, 0x78, 0xB2, 0x87, 0x77,
    0xB2, 0x86, 0x74, 0xA9, 0x7D, 0x69, 0x8A, 0x75, 0x83, 0xBC, 0xBC, 0xF1,
    0xD5, 0xD8, 0xF8, 0xED, 0xF3, 0xFE, 0xCE, 0xD0, 0xF6, 0xAB, 0xA9, 0xD6,
    0x79, 0x55, 0x41, 0xC3, 0xC4, 0xDE, 0xBA, 0xAF, 0xAB, 0x9F, 0x8C, 0x7F,
    0xCF, 0xCB, 0xCD, 0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xE7, 0xEC, 0xFD, 0xBE, 0xBE, 0xF2, 0x9E, 0x85, 0x8D,
    0xAD, 0x75, 0x50, 0x8D, 0x5C, 0x3B, 0xAC, 0x6F, 0x44, 0xAA, 0x6A, 0x3A,
    0xA9, 0x65, 0x30, 0xA7, 0x61, 0x27, 0xA7, 0x5C, 0x1F, 0xA5, 0x58, 0x17,
    0xA4, 0x55, 0x10, 0xA4, 0x53, 0x0C, 0xA4, 0x53, 0x0B, 0xA5, 0x53, 0x0B,
    0xA5, 0x54, 0x0B, 0xA6, 0x55, 0x0B, 0xA8, 0x57, 0x0C, 0x7B, 0x3E, 0x0E,
    0xC4, 0xB3, 0xA9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xC6, 0xBA, 0xB3, 0x71, 0x38, 0x10, 0xA6, 0x55, 0x0B, 0xA4, 0x53, 0x0B,
    0xA4, 0x53, 0x0C, 0xA3, 0x52, 0x0B, 0xA2, 0x51, 0x0B, 0xA2, 0x50, 0x0B,
    0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B, 0xA1, 0x50, 0x0B,
    0x95, 0x4E, 0x10, 0x6C, 0x45, 0x23, 0x69, 0x44, 0x25, 0x69, 0x3D, 0x1B,
    0xA3, 0x54, 0x0E, 0xA5, 0x56, 0x10, 0xA6, 0x58, 0x13, 0xA6, 0x5A, 0x18,
    0xA7, 0x5D, 0x1F, 0xA8, 0x61, 0x27, 0xA8, 0x65, 0x31, 0xA9, 0x68, 0x3A,
    0xA9, 0x6B, 0x41, 0xA9, 0x6E, 0x49, 0xA9, 0x71, 0x50, 0xAA, 0x73, 0x55,
    0xAA, 0x75, 0x59, 0xA6, 0x73, 0x59, 0x97, 0x69, 0x53, 0xAA, 0x75, 0x5B,
    0xAA, 0x75, 0x5A, 0xA9, 0x73, 0x57, 0xA9, 0x71, 0x53, 0x8E, 0x68, 0x5A,
    0xB8, 0xB8, 0xEB, 0xCC, 0xCE, 0xF6, 0x92, 0x91, 0xB8, 0x91, 0x5D, 0x39,
    0x81, 0x62, 0x57, 0xBE, 0xBF, 0xEB, 0xEA, 0xF0, 0xFC, 0xBA, 0xAF, 0xAA,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xA1, 0x86, 0x75,
    0xAE, 0x6A, 0x30, 0xA6, 0x68, 0x36, 0x89, 0x7B, 0x92, 0xBD, 0xBD, 0xF2,
    0xE2, 0xE6, 0xFB, 0xED, 0xF3, 0xFE, 0xAF, 0xAA, 0xC6, 0x85, 0x5D, 0x4C,
    0xB2, 0x86, 0x74, 0xB2, 0x87, 0x77, 0xB2, 0x87, 0x78, 0xB2, 0x87, 0x78,
    0xB2, 0x86, 0x76, 0xB1, 0x84, 0x72, 0x8A, 0x64, 0x56, 0xB6, 0xB4, 0xE5,
    0xC6, 0xC7, 0xF4, 0xE6, 0xEC, 0xFD, 0xBE, 0xBF, 0xF2, 0x8D, 0x87, 0xA6,
    0x7F, 0x56, 0x38, 0x7F, 0x65, 0x5B, 0xBF, 0xB6, 0xB4, 0xEC, 0xF2, 0xFC,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xD4, 0xD7, 0xF8, 0xBC, 0xBC, 0xF0, 0x95, 0x6B, 0x54,
    0xA3, 0x6D, 0x49, 0x9A, 0x64, 0x3F, 0xAC, 0x6D, 0x40, 0xAA, 0x69, 0x37,
    0xA9, 0x64, 0x2E, 0xA7, 0x60, 0x25, 0xA6, 0x5C, 0x1D, 0xA5, 0x58, 0x15,
    0xA5, 0x56, 0x0F, 0xA4, 0x54, 0x0C, 0xA5, 0x54, 0x0B, 0xA5, 0x54, 0x0B,
    0xA6, 0x55, 0x0B, 0xA7, 0x56, 0x0C, 0xA8, 0x57, 0x0C, 0x76, 0x3B, 0x0F,
    0xD2, 0xC4, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xD8, 0xD0, 0xCD, 0x6C, 0x36, 0x11, 0xA6, 0x56, 0x0B, 0xA5, 0x54, 0x0B,
    0xA5, 0x54, 0x0C, 0xA3, 0x52, 0x0B, 0xA2, 0x51, 0x0A, 0xA2, 0x51, 0x0A,
    0xA2, 0x51, 0x0A, 0xA2, 0x51, 0x0B, 0xA2, 0x50, 0x0B, 0xA2, 0x51, 0x0B,
    0x97, 0x4E, 0x10, 0x6D, 0x44, 0x23, 0x69, 0x44, 0x25, 0x6F, 0x40, 0x1A,
    0xA5, 0x55, 0x0E, 0xA6, 0x57, 0x10, 0xA6, 0x58, 0x13, 0xA7, 0x5B, 0x18,
    0xA8, 0x5D, 0x1E, 0xA8, 0x61, 0x26, 0xA9, 0x65, 0x2F, 0xA9, 0x68, 0x38,
    0xAA, 0x6B, 0x40, 0xAA, 0x6E, 0x48, 0xAA, 0x71, 0x4E, 0xAA, 0x73, 0x53,
    0xAB, 0x75, 0x58, 0xAA, 0x75, 0x5A, 0x96, 0x68, 0x52, 0xAB, 0x76, 0x5C,
    0xAA, 0x76, 0x5B, 0xAA, 0x74, 0x58, 0xAA, 0x73, 0x55, 0x9D, 0x6A, 0x4C,
    0xA7, 0xA3, 0xCB, 0xBE, 0xBF, 0xF2, 0x92, 0x90, 0xB7, 0x97, 0x61, 0x39,
    0x9F, 0x63, 0x37, 0x92, 0x8F, 0xB1, 0xDB, 0xDE, 0xFA, 0xE6, 0xEA, 0xF2,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEC, 0xF2, 0xFD, 0x95, 0x6C, 0x4E,
    0xAF, 0x6B, 0x32, 0xAF, 0x6E, 0x39, 0x7B, 0x5D, 0x57, 0xBC, 0xBB, 0xF0,
    0xD1, 0xD4, 0xF7, 0xEA, 0xF0, 0xFE, 0x8A, 0x7B, 0x8C, 0x9F, 0x74, 0x5F,
    0xB2, 0x85, 0x73, 0xB2, 0x87, 0x76, 0xB2, 0x87, 0x78, 0xB2, 0x87, 0x78,
    0xB2, 0x86, 0x76, 0xB1, 0x84, 0x72, 0xA8, 0x7A, 0x65, 0x97, 0x89, 0xA2,
    0xBE, 0xBE, 0xF2, 0xCB, 0xCD, 0xF4, 0xA3, 0x97, 0xB1, 0x78, 0x59, 0x47,
    0x95, 0x65, 0x41, 0x9A, 0x8F, 0xAB, 0xE5, 0xEB, 0xFC, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEC, 0xF2, 0xFE, 0xC3, 0xC4, 0xF3, 0xB3, 0xAB, 0xD1, 0x9C, 0x69, 0x47,
    0x92, 0x5F, 0x3E, 0xAC, 0x6F, 0x44, 0xAC, 0x6C, 0x3D, 0xAA, 0x68, 0x34,
    0xA9, 0x63, 0x2C, 0xA8, 0x60, 0x23, 0xA7, 0x5C, 0x1B, 0xA6, 0x58, 0x14,
    0xA5, 0x56, 0x0F, 0xA5, 0x54, 0x0C, 0xA5, 0x54, 0x0B, 0xA6, 0x55, 0x0B,
    0xA7, 0x56, 0x0B, 0xA8, 0x57, 0x0B, 0xA9, 0x58, 0x0C, 0x6D, 0x37, 0x11,
    0xE7, 0xDE, 0xD6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xEB, 0xE7, 0xE5, 0x63, 0x34, 0x18, 0xA7, 0x56, 0x0B, 0xA6, 0x55, 0x0B,
    0xA6, 0x55, 0x0C, 0xA4, 0x53, 0x0B, 0xA3, 0x52, 0x0B, 0xA3, 0x51, 0x0B,
    0xA2, 0x51, 0x0B, 0xA2, 0x51, 0x0B, 0xA2, 0x51, 0x0B, 0xA2, 0x51, 0x0B,
    0x9A, 0x50, 0x0E, 0x6D, 0x45, 0x23, 0x69, 0x44, 0x25, 0x75, 0x43, 0x1A,
    0xA5, 0x56, 0x0E, 0xA6, 0x57, 0x11, 0xA7, 0x59, 0x13, 0xA8, 0x5B, 0x17,
    0xA9, 0x5E, 0x1D, 0xA9, 0x61, 0x25, 0xAA, 0x65, 0x2E, 0xAA, 0x68, 0x36,
    0xAB, 0x6C, 0x3E, 0xAB, 0x6E, 0x46, 0xAB, 0x70, 0x4C, 0xAB, 0x72, 0x51,
    0xAB, 0x74, 0x56, 0xAB, 0x75, 0x59, 0x97, 0x69, 0x52, 0xAB, 0x76, 0x5B,
    0xAB, 0x76, 0x5A, 0xAB, 0x75, 0x58, 0xAB, 0x74, 0x55, 0xA9, 0x71, 0x51,
    0x98, 0x87, 0x98, 0xBD, 0xBD, 0xF2, 0x8B, 0x87, 0xA8, 0xA6, 0x6A, 0x3F,
    0xAC, 0x6C, 0x3B, 0x87, 0x68, 0x61, 0xC3, 0xC3, 0xF0, 0xE7, 0xEB, 0xF6,
    0xED, 0xF3, 0xFD, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xDA, 0xDB, 0xE2, 0x9A, 0x66, 0x3C,
    0xAF, 0x6D, 0x35, 0xAF, 0x6F, 0x3B, 0x8C, 0x5F, 0x45, 0xB1, 0xAE, 0xDC,
    0xC2, 0xC3, 0xF3, 0xDF, 0xE4, 0xFB, 0x71, 0x55, 0x4F, 0xB0, 0x81, 0x6B,
    0xB2, 0x85, 0x71, 0xB2, 0x86, 0x75, 0xB2, 0x87, 0x77, 0xB2, 0x87, 0x77,
    0xB2, 0x86, 0x75, 0xB2, 0x85, 0x72, 0xB1, 0x82, 0x6D, 0x90, 0x73, 0x75,
    0xBC, 0xBC, 0xF0, 0x9A, 0x8B, 0x9B, 0x7B, 0x64, 0x62, 0x83, 0x59, 0x3F,
    0xAF, 0x75, 0x4E, 0x94, 0x89, 0xA3, 0xDD, 0xE1, 0xFA, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xE0, 0xE5, 0xFB, 0xBD, 0xBD, 0xF2, 0x9F, 0x8F, 0xA3, 0xA6, 0x6F, 0x49,
    0x96, 0x61, 0x3C, 0xAD, 0x6F, 0x41, 0xAC, 0x6B, 0x39, 0xAB, 0x67, 0x31,
    0xA9, 0x63, 0x29, 0xA8, 0x5F, 0x21, 0xA7, 0x5B, 0x1A, 0xA6, 0x59, 0x14,
    0xA6, 0x57, 0x10, 0xA6, 0x56, 0x0D, 0xA6, 0x55, 0x0C, 0xA7, 0x56, 0x0B,
    0xA8, 0x57, 0x0B, 0xA9, 0x58, 0x0B, 0xA7, 0x58, 0x0C, 0x6C, 0x3E, 0x21,
    0xF8, 0xF6, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF9, 0xF7, 0xF6, 0x69, 0x41, 0x2C, 0x9F, 0x52, 0x0B, 0xA6, 0x55, 0x0B,
    0xA5, 0x54, 0x0B, 0xA5, 0x53, 0x0B, 0xA4, 0x53, 0x0B, 0xA3, 0x52, 0x0B,
    0xA3, 0x52, 0x0B, 0xA3, 0x52, 0x0B, 0xA2, 0x52, 0x0B, 0xA3, 0x52, 0x0B,
    0x9F, 0x51, 0x0C, 0x6D, 0x45, 0x22, 0x69, 0x44, 0x25, 0x71, 0x42, 0x1B,
    0xA6, 0x56, 0x0F, 0xA7, 0x58, 0x11, 0xA8, 0x5A, 0x13, 0xA9, 0x5C, 0x17,
    0xA9, 0x5E, 0x1C, 0xAA, 0x61, 0x24, 0xAB, 0x65, 0x2B, 0xAB, 0x68, 0x34,
    0xAB, 0x6B, 0x3C, 0xAB, 0x6E, 0x43, 0xAB, 0x70, 0x49, 0xAB, 0x72, 0x50,
    0xAC, 0x74, 0x54, 0xAB, 0x75, 0x57, 0x9F, 0x6E, 0x53, 0xA9, 0x74, 0x59,
    0xAB, 0x76, 0x5A, 0xAB, 0x75, 0x58, 0xAB, 0x74, 0x56, 0xAB, 0x74, 0x52,
    0x97, 0x7A, 0x79, 0xBD, 0xBD, 0xF2, 0x87, 0x79, 0x89, 0xAA, 0x6D, 0x41,
    0xAB, 0x6D, 0x3E, 0x9A, 0x64, 0x3D, 0xA4, 0xA0, 0xC9, 0xDC, 0xDF, 0xF7,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xBE, 0xB7, 0xB9, 0xA8, 0x6A, 0x36,
    0xB0, 0x6F, 0x39, 0xB0, 0x71, 0x3E, 0x9C, 0x67, 0x42, 0x9C, 0x95, 0xB9,
    0xBD, 0xBD, 0xF2, 0xB2, 0xAE, 0xCB, 0x84, 0x5C, 0x48, 0xB1, 0x82, 0x6A,
    0xB2, 0x84, 0x70, 0xB2, 0x86, 0x73, 0xB2, 0x86, 0x75, 0xB2, 0x86, 0x75,
    0xB2, 0x85, 0x74, 0xB1, 0x84, 0x71, 0xB1, 0x82, 0x6D, 0x96, 0x6E, 0x61,
    0xB0, 0xAC, 0xD7, 0xB7, 0xB4, 0xE3, 0x77, 0x60, 0x65, 0xAA, 0x74, 0x50,
    0xAB, 0x74, 0x4F, 0x98, 0x8E, 0xAD, 0xD8, 0xDB, 0xF9, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE,
    0xCC, 0xCE, 0xF6, 0xBC, 0xBC, 0xF1, 0x98, 0x77, 0x71, 0x98, 0x64, 0x40,
    0xAA, 0x6F, 0x43, 0xAE, 0x6E, 0x3E, 0xAC, 0x6A, 0x36, 0xAB, 0x66, 0x2E,
    0xAA, 0x62, 0x27, 0xA9, 0x5F, 0x1F, 0xA8, 0x5C, 0x19, 0xA7, 0x59, 0x14,
    0xA7, 0x58, 0x10, 0xA7, 0x57, 0x0D, 0xA7, 0x56, 0x0B, 0xA8, 0x57, 0x0B,
    0xA9, 0x58, 0x0B, 0xAA, 0x59, 0x0C, 0x9D, 0x52, 0x0C, 0x7D, 0x59, 0x43,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x80, 0x61, 0x50, 0x90, 0x49, 0x0D, 0xA7, 0x56, 0x0B,
    0xA6, 0x55, 0x0B, 0xA5, 0x54, 0x0B, 0xA4, 0x53, 0x0B, 0xA4, 0x52, 0x0B,
    0xA3, 0x52, 0x0B, 0xA3, 0x52, 0x0B, 0xA3, 0x52, 0x0B, 0xA3, 0x52, 0x0B,
    0xA2, 0x52, 0x0C, 0x71, 0x46, 0x21, 0x69, 0x44, 0x25, 0x6C, 0x3F, 0x1C,
    0xA5, 0x56, 0x10, 0xA7, 0x59, 0x11, 0xA8, 0x5A, 0x13, 0xA9, 0x5D, 0x17,
    0xAA, 0x5F, 0x1C, 0xAA, 0x61, 0x22, 0xAB, 0x65, 0x2A, 0xAC, 0x68, 0x32,
    0xAC, 0x6B, 0x39, 0xAC, 0x6E, 0x41, 0xAC, 0x70, 0x47, 0xAC, 0x72, 0x4C,
    0xAC, 0x74, 0x51, 0xAC, 0x75, 0x55, 0xAB, 0x75, 0x57, 0xAB, 0x76, 0x58,
    0xAC, 0x76, 0x58, 0xAC, 0x76, 0x57, 0xAC, 0x75, 0x55, 0xAC, 0x74, 0x52,
    0x9B, 0x72, 0x60, 0xB9, 0xB9, 0xEC, 0x88, 0x6A, 0x61, 0xAD, 0x70, 0x44,
    0xAD, 0x70, 0x41, 0xAD, 0x6E, 0x3E, 0x8E, 0x7A, 0x83, 0xC8, 0xCA, 0xF5,
    0xED, 0xF3, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xA0, 0x87, 0x79, 0xB1, 0x6F, 0x38,
    0xB1, 0x71, 0x3C, 0xB1, 0x72, 0x40, 0xA5, 0x6F, 0x47, 0x91, 0x89, 0xA8,
    0xBC, 0xBC, 0xF1, 0x79, 0x69, 0x76, 0xA5, 0x75, 0x5A, 0xB2, 0x81, 0x68,
    0xB2, 0x83, 0x6D, 0xB2, 0x84, 0x71, 0xB2, 0x85, 0x73, 0xB2, 0x86, 0x73,
    0xB2, 0x85, 0x72, 0xB1, 0x84, 0x70, 0xB0, 0x82, 0x6B, 0x9A, 0x6E, 0x59,
    0xB2, 0xAE, 0xDA, 0xAB, 0xA5, 0xCE, 0x85, 0x59, 0x3F, 0xB0, 0x79, 0x56,
    0xA5, 0x70, 0x4E, 0x9D, 0x96, 0xB9, 0xD6, 0xDA, 0xF8, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xE3, 0xE8, 0xFC,
    0xBD, 0xBD, 0xF2, 0xB3, 0xAF, 0xDC, 0x9A, 0x69, 0x48, 0x98, 0x63, 0x3D,
    0xAF, 0x71, 0x41, 0xAE, 0x6D, 0x3A, 0xAD, 0x69, 0x33, 0xAB, 0x65, 0x2B,
    0xAA, 0x62, 0x24, 0xA9, 0x5E, 0x1E, 0xA8, 0x5C, 0x18, 0xA8, 0x5A, 0x14,
    0xA8, 0x59, 0x11, 0xA8, 0x58, 0x0E, 0xA8, 0x57, 0x0C, 0xA9, 0x58, 0x0C,
    0xAA, 0x59, 0x0C, 0xAB, 0x5A, 0x0C, 0x93, 0x4C, 0x0E, 0x95, 0x79, 0x68,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xA3, 0x8E, 0x83, 0x83, 0x42, 0x0E, 0xA8, 0x57, 0x0B,
    0xA7, 0x55, 0x0B, 0xA6, 0x54, 0x0B, 0xA5, 0x53, 0x0B, 0xA4, 0x53, 0x0B,
    0xA4, 0x53, 0x0C, 0xA3, 0x53, 0x0B, 0xA3, 0x53, 0x0B, 0xA4, 0x53, 0x0C,
    0xA4, 0x53, 0x0C, 0x79, 0x48, 0x1D, 0x69, 0x44, 0x26, 0x6D, 0x42, 0x1F,
    0xA5, 0x57, 0x10, 0xA8, 0x59, 0x11, 0xA9, 0x5B, 0x13, 0xAA, 0x5D, 0x17,
    0xAA, 0x5F, 0x1B, 0xAB, 0x62, 0x21, 0xAC, 0x65, 0x28, 0xAD, 0x68, 0x30,
    0xAD, 0x6B, 0x37, 0xAD, 0x6E, 0x3E, 0xAD, 0x70, 0x43, 0xAD, 0x71, 0x49,
    0xAC, 0x73, 0x4E, 0xAD, 0x74, 0x52, 0xAD, 0x75, 0x55, 0xAD, 0x76, 0x56,
    0xAC, 0x76, 0x56, 0xAD, 0x75, 0x55, 0xAD, 0x75, 0x54, 0xAD, 0x75, 0x52,
    0xA3, 0x6F, 0x4E, 0xA9, 0xA4, 0xCC, 0x92, 0x64, 0x46, 0xAE, 0x71, 0x45,
    0xAE, 0x70, 0x42, 0xAF, 0x71, 0x3F, 0x92, 0x67, 0x4F, 0xB6, 0xB5, 0xE7,
    0xE4, 0xE9, 0xFC, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xE3, 0xE5, 0xEE, 0x97, 0x64, 0x3D, 0xB2, 0x71, 0x3C,
    0xB2, 0x73, 0x3F, 0xB2, 0x74, 0x42, 0xA9, 0x70, 0x45, 0x93, 0x8A, 0xA7,
    0xAC, 0xA8, 0xD4, 0x76, 0x52, 0x3E, 0xB2, 0x7F, 0x61, 0xB3, 0x81, 0x66,
    0xB3, 0x83, 0x6B, 0xB2, 0x84, 0x6E, 0xB2, 0x85, 0x70, 0xB2, 0x85, 0x71,
    0xB2, 0x84, 0x70, 0xB2, 0x83, 0x6E, 0xB1, 0x82, 0x6B, 0xA4, 0x75, 0x5C,
    0xAF, 0xA5, 0xC3, 0x7A, 0x58, 0x4E, 0xAE, 0x79, 0x58, 0xB0, 0x7A, 0x58,
    0x9B, 0x6B, 0x4E, 0xA9, 0xA4, 0xCE, 0xD7, 0xDB, 0xF9, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xED, 0xF3, 0xFE, 0xC9, 0xCB, 0xF5,
    0xBD, 0xBD, 0xF2, 0x9A, 0x84, 0x8F, 0x98, 0x64, 0x3F, 0xAC, 0x6F, 0x42,
    0xAF, 0x6F, 0x3D, 0xAE, 0x6C, 0x36, 0xAD, 0x68, 0x2F, 0xAB, 0x65, 0x28,
    0xAA, 0x61, 0x22, 0xA9, 0x5E, 0x1C, 0xA9, 0x5C, 0x18, 0xA9, 0x5B, 0x14,
    0xA9, 0x5A, 0x11, 0xA9, 0x59, 0x0E, 0xA9, 0x58, 0x0C, 0xAA, 0x59, 0x0C,
    0xAB, 0x5A, 0x0C, 0xAC, 0x5B, 0x0C, 0x83, 0x43, 0x0E, 0xB2, 0x9E, 0x92,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xC8, 0xBD, 0xB7, 0x73, 0x39, 0x0F, 0xA9, 0x57, 0x0C,
    0xA7, 0x56, 0x0C, 0xA6, 0x55, 0x0B, 0xA5, 0x54, 0x0B, 0xA5, 0x54, 0x0B,
    0xA4, 0x53, 0x0B, 0xA4, 0x53, 0x0B, 0xA4, 0x53, 0x0B, 0xA4, 0x53, 0x0B,
    0xA4, 0x53, 0x0B, 0x85, 0x4B, 0x18, 0x69, 0x44, 0x26, 0x6B, 0x42, 0x21,
    0x9F, 0x53, 0x10, 0xA8, 0x59, 0x11, 0xAA, 0x5B, 0x14, 0xAB, 0x5D, 0x17,
    0xAB, 0x60, 0x1A, 0xAC, 0x62, 0x1F, 0xAC, 0x65, 0x26, 0xAD, 0x68, 0x2D,
    0xAE, 0x6B, 0x34, 0xAE, 0x6D, 0x3B, 0xAD, 0x6F, 0x41, 0xAE, 0x71, 0x46,
    0xAD, 0x73, 0x4B, 0xAD, 0x74, 0x4F, 0xAD, 0x75, 0x52, 0xAD, 0x76, 0x53,
    0xAD, 0x76, 0x54, 0xAD, 0x76, 0x54, 0xAD, 0x75, 0x52, 0xAE, 0x75, 0x50,
    0xAA, 0x72, 0x4C, 0x93, 0x7D, 0x85, 0xA4, 0x6C, 0x45, 0xAF, 0x72, 0x46,
    0xAF, 0x72, 0x43, 0xB0, 0x71, 0x40, 0xA5, 0x6B, 0x3D, 0xA2, 0x9A, 0xBD,
    0xD2, 0xD4, 0xF7, 0xED, 0xF3, 0xFF, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xB5, 0xA3, 0x9A, 0xAB, 0x6D, 0x39, 0xB3, 0x73, 0x3F,
    0xB2, 0x74, 0x42, 0xB3, 0x76, 0x45, 0xAA, 0x71, 0x46, 0x98, 0x8C, 0xA6,
    0x79, 0x69, 0x76, 0xA4, 0x72, 0x52, 0xB2, 0x7E, 0x5F, 0xB2, 0x81, 0x65,
    0xB3, 0x82, 0x68, 0xB3, 0x83, 0x6B, 0xB2, 0x84, 0x6E, 0xB2, 0x84, 0x6E,
    0xB2, 0x84, 0x6E, 0xB2, 0x83, 0x6C, 0xB2, 0x82, 0x69, 0xA6, 0x76, 0x5D,
    0x8A, 0x65, 0x53, 0xA6, 0x73, 0x56, 0xB1, 0x7C, 0x5C, 0xB1, 0x7B, 0x5A,
    0x92, 0x67, 0x53, 0xB2, 0xAF, 0xDE, 0xDA, 0xDE, 0xF9, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF, 0xE0, 0xE5, 0xFB, 0xBD, 0xBD, 0xF2,
    0xB8, 0xB7, 0xEA, 0x96, 0x6B, 0x53, 0x9A, 0x64, 0x3D, 0xB0, 0x71, 0x40,
    0xAF, 0x6E, 0x39, 0xAE, 0x6B, 0x33, 0xAD, 0x67, 0x2C, 0xAC, 0x64, 0x26,
    0xAB, 0x61, 0x20, 0xAA, 0x5E, 0x1B, 0xAA, 0x5D, 0x17, 0xA9, 0x5B, 0x13,
    0xA9, 0x5B, 0x11, 0xAA, 0x5A, 0x0F, 0xAA, 0x5A, 0x0D, 0xAB, 0x5A, 0x0C,
    0xAC, 0x5B, 0x0C, 0xAD, 0x5C, 0x0C, 0x75, 0x3B, 0x0F, 0xC8, 0xB9, 0xB1,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xEC, 0xE8, 0xE6, 0x66, 0x33, 0x13, 0xA9, 0x58, 0x0C,
    0xA8, 0x57, 0x0C, 0xA6, 0x56, 0x0C, 0xA6, 0x55, 0x0B, 0xA5, 0x54, 0x0B,
    0xA5, 0x53, 0x0B, 0xA4, 0x54, 0x0B, 0xA4, 0x54, 0x0B, 0xA4, 0x53, 0x0B,
    0xA5, 0x54, 0x0B, 0x92, 0x4F, 0x13, 0x69, 0x44, 0x25, 0x69, 0x43, 0x24,
    0x97, 0x50, 0x10, 0xA8, 0x5A, 0x11, 0xAA, 0x5B, 0x13, 0xAB, 0x5D, 0x16,
    0xAC, 0x60, 0x19, 0xAD, 0x63, 0x1E, 0xAD, 0x65, 0x24, 0xAE, 0x68, 0x2A,
    0xAE, 0x6A, 0x31, 0xAE, 0x6D, 0x38, 0xAE, 0x6F, 0x3E, 0xAE, 0x71, 0x43,
    0xAE, 0x72, 0x48, 0xAE, 0x74, 0x4B, 0xAE, 0x75, 0x4F, 0xAE, 0x75, 0x50,
    0xAE, 0x76, 0x51, 0xAE, 0x76, 0x51, 0xAE, 0x75, 0x50, 0xAE, 0x75, 0x4E,
    0xAC, 0x73, 0x4C, 0x8A, 0x60, 0x45, 0xAF, 0x73, 0x48, 0xB0, 0x73, 0x45,
    0xB0, 0x72, 0x42, 0xB1, 0x72, 0x40, 0xB1, 0x72, 0x3F, 0x96, 0x7E, 0x86,
    0xC2, 0xC2, 0xF3, 0xEC, 0xF2, 0xFE, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xE2, 0xE3, 0xEB, 0x9A, 0x68, 0x42, 0xB4, 0x74, 0x3F, 0xB4, 0x75, 0x41,
    0xB4, 0x76, 0x44, 0xB4, 0x77, 0x47, 0xA8, 0x70, 0x45, 0x90, 0x7E, 0x8C,
    0x77, 0x51, 0x3B, 0xB3, 0x7D, 0x59, 0xB3, 0x7F, 0x5E, 0xB3, 0x80, 0x62,
    0xB3, 0x82, 0x65, 0xB3, 0x83, 0x69, 0xB3, 0x84, 0x6B, 0xB3, 0x84, 0x6C,
    0xB2, 0x83, 0x6B, 0xB2, 0x82, 0x69, 0xAB, 0x7B, 0x61, 0x92, 0x64, 0x4A,
    0xA5, 0x74, 0x57, 0xB3, 0x80, 0x61, 0xB1, 0x7D, 0x5D, 0xB1, 0x7C, 0x5C,
    0x8C, 0x69, 0x5F, 0xBC, 0xBC, 0xF1, 0xDF, 0xE4, 0xFB, 0xEE, 0xF4, 0xFF,
    0xEE, 0xF4, 0xFF, 0xEC, 0xF1, 0xFE, 0xC6, 0xC7, 0xF4, 0xBD, 0xBD, 0xF2,
    0xA5, 0x98, 0xB5, 0x95, 0x62, 0x3D, 0xAE, 0x71, 0x42, 0xB0, 0x70, 0x3C,
    0xAF, 0x6D, 0x35, 0xAE, 0x6A, 0x2F, 0xAD, 0x66, 0x29, 0xAC, 0x63, 0x23,
    0xAB, 0x61, 0x1E, 0xAB, 0x5F, 0x1A, 0xAB, 0x5E, 0x16, 0xAA, 0x5C, 0x13,
    0xAB, 0x5C, 0x11, 0xAB, 0x5B, 0x0F, 0xAC, 0x5B, 0x0D, 0xAC, 0x5B, 0x0C,
    0xAD, 0x5C, 0x0C, 0xAD, 0x5C, 0x0C, 0x63, 0x31, 0x12, 0xE8, 0xE2, 0xDF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF7, 0xF6, 0xE2, 0xDD, 0xDA,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFD, 0x6D, 0x48, 0x33, 0xA1, 0x53, 0x0C,
    0xA8, 0x57, 0x0C, 0xA7, 0x56, 0x0C, 0xA6, 0x55, 0x0B, 0xA5, 0x55, 0x0B,
    0xA5, 0x54, 0x0B, 0xA5, 0x54, 0x0B, 0xA5, 0x53, 0x0B, 0xA5, 0x54, 0x0B,
    0xA5, 0x54, 0x0B, 0x9E, 0x53, 0x0E, 0x6C, 0x45, 0x24, 0x69, 0x44, 0x26,
    0x8C, 0x4B, 0x13, 0xA9, 0x5A, 0x10, 0xAA, 0x5B, 0x12, 0xAB, 0x5E, 0x15,
    0xAC, 0x60, 0x18, 0xAE, 0x62, 0x1E, 0xCB, 0x99, 0x6A, 0xE3, 0xC5, 0xA5,
    0xD3, 0xAA, 0x83, 0xB3, 0x73, 0x3E, 0xAF, 0x6F, 0x3B, 0xAF, 0x71, 0x40,
    0xAF, 0x72, 0x44, 0xAF, 0x73, 0x48, 0xAF, 0x74, 0x4B, 0xAF, 0x75, 0x4D,
    0xAF, 0x76, 0x4E, 0xAF, 0x76, 0x4E, 0xAF, 0x75, 0x4E, 0xAF, 0x75, 0x4C,
    0xAB, 0x72, 0x49, 0x9A, 0x66, 0x41, 0xB0, 0x74, 0x46, 0xB0, 0x73, 0x44,
    0xB1, 0x73, 0x42, 0xB2, 0x73, 0x40, 0xB3, 0x74, 0x40, 0x92, 0x6A, 0x55,
    0xBD, 0xBD, 0xF2, 0xE0, 0xE5, 0xFB, 0xEE, 0xF4, 0xFF, 0xEE, 0xF4, 0xFF,
    0xB3, 0x9B, 0x8B, 0xAF, 0x71, 0x3D, 0xB4, 0x75, 0x41, 0xB5, 0x76, 0x43,
    0xB4, 0x77, 0x46, 0xB5, 0x78, 0x49, 0xA3, 0x6C, 0x43, 0x6A, 0x48, 0x35,
    0xA9, 0x74, 0x4E, 0xB4, 0x7E, 0x58, 0xB4, 0x7F, 0x5C, 0xB4, 0x80, 0x60,
    0xB4, 0x81, 0x63, 0xB4, 0x82, 0x66, 0xB3, 0x83, 0x68, 0xB3, 0x83, 0x69,
    0xB3, 0x83, 0x69, 0xB0, 0x7F, 0x65, 0xA7, 0x77, 0x5C, 0xB1, 0x7F, 0x64,
    0xB2, 0x7F, 0x62, 0xB2, 0x7F, 0x60, 0xB2, 0x7E, 0x5F, 0xB2, 0x7D, 0x5F,
    0x8D, 0x70, 0x70, 0xBD, 0xBD, 0xF2, 0xE7, 0xEC, 0xFD, 0xEE, 0xF4, 0xFF,
    0xED, 0xF3, 0xFE, 0xD3, 0xD6, 0xF7, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2,
    0x95, 0x74, 0x6C, 0xA1, 0x68, 0x3E, 0xB1, 0x71, 0x3E, 0xB0, 0x6E, 0x37,
    0xAF, 0x6B, 0x32, 0xAE, 0x69, 0x2C, 0xAD, 0x65, 0x25, 0xAC, 0x62, 0x20,
    0xAC, 0x60, 0x1C, 0xAB, 0x5F, 0x18, 0xAB, 0x5E, 0x15, 0xAB, 0x5D, 0x12,
    0xAC, 0x5C, 0x10, 0xAC, 0x5C, 0x0F, 0xAC, 0x5C, 0x0E, 0xAD, 0x5C, 0x0C,
    0xAE, 0x5D, 0x0C, 0xA2, 0x57, 0x0E, 0x69, 0x41, 0x2C, 0xFD, 0xFD, 0xFD,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD3, 0xCA, 0xC5,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x95, 0x7A, 0x6A, 0x8A, 0x47, 0x0D,
    0xA9, 0x58, 0x0C, 0xA8, 0x57, 0x0C, 0xA7, 0x56, 0x0C, 0xA6, 0x55, 0x0B,
    0xA5, 0x54, 0x0B, 0xA5, 0x54, 0x0B, 0xA5, 0x54, 0x0B, 0xA5, 0x54, 0x0B,
    0xA5, 0x54, 0x0B, 0xA5, 0x54, 0x0B, 0x77, 0x47, 0x1F, 0x69, 0x44, 0x26,
    0x80, 0x47, 0x17, 0xA9, 0x5A, 0x10, 0xAA, 0x5B, 0x12, 0xAC, 0x5E, 0x14,
    0xAD, 0x60, 0x18, 0xCA, 0x95, 0x62, 0xFE, 0xF4, 0xE5, 0xFF, 0xF6, 0xE7,
    0xFE, 0xF5, 0xE6, 0xF1, 0xDF, 0xC9, 0xBE, 0x86, 0x57, 0xB0, 0x70, 0x3E,
    0xB0, 0x72, 0x42, 0xB0, 0x73, 0x45, 0xB0, 0x74, 0x48, 0xB0, 0x75, 0x4A,
    0xB0, 0x75, 0x4B, 0xB0, 0x75, 0x4B, 0xB0, 0x75, 0x4B, 0xB0, 0x74, 0x49,
    0x9F, 0x69, 0x41, 0xAE, 0x72, 0x45, 0xB1, 0x74, 0x44, 0xB2, 0x74, 0x43,
    0xB2, 0x74, 0x41, 0xB3, 0x74, 0x40, 0xB4, 0x74, 0x3F, 0x9D, 0x69, 0x41,
    0xB5, 0xB3, 0xE4, 0xD1, 0xD4, 0xF7, 0xEE, 0xF4, 0xFF, 0xDC, 0xDD, 0xE5,
    0x9E, 0x6A, 0x40, 0xB6, 0x77, 0x40, 0xB5, 0x77, 0x42, 0xB5, 0x78, 0x45,
    0xB5, 0x79, 0x47, 0xB5, 0x7A, 0x4A, 0x7C, 0x52, 0x33, 0x96, 0x66, 0x41,
    0xB5, 0x7D, 0x53, 0xB5, 0x7E, 0x56, 0xB5, 0x7F, 0x5A, 0xB5, 0x80, 0x5D,
    0xB4, 0x81, 0x60, 0xB4, 0x82, 0x63, 0xB4, 0x82, 0x65, 0xB4, 0x83, 0x67,
    0xB3, 0x82, 0x66, 0xB3, 0x82, 0x66, 0xB3, 0x81, 0x65, 0xB2, 0x80, 0x64,
    0xB3, 0x80, 0x63, 0xB2, 0x7F, 0x62, 0xB3, 0x7F, 0x61, 0xAA, 0x78, 0x5B,
    0x96, 0x83, 0x94, 0xC2, 0xC3, 0xF3, 0xEC, 0xF2, 0xFE, 0xED, 0xF3, 0xFE,
    0xE1, 0xE6, 0xFB, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xA6, 0x9D, 0xBE,
    0x7D, 0x51, 0x32, 0xB0, 0x72, 0x40, 0xB1, 0x70, 0x39, 0xB0, 0x6C, 0x33,
    0xAF, 0x6A, 0x2E, 0xAE, 0x67, 0x28, 0xAE, 0x64, 0x22, 0xAD, 0x62, 0x1D,
    0xAC, 0x60, 0x1A, 0xAC, 0x5F, 0x17, 0xAC, 0x5E, 0x14, 0xAC, 0x5D, 0x12,
    0xAC, 0x5D, 0x11, 0xAD, 0x5D, 0x0F, 0xAD, 0x5D, 0x0E, 0xAE, 0x5D, 0x0C,
    0xAF, 0x5E, 0x0C, 0x8A, 0x49, 0x0F, 0x93, 0x77, 0x68, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD1, 0xC8, 0xC3,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xB0, 0xA8, 0x72, 0x39, 0x10,
    0xAA, 0x59, 0x0C, 0xA8, 0x58, 0x0C, 0xA7, 0x56, 0x0C, 0xA7, 0x55, 0x0C,
    0xA6, 0x55, 0x0B, 0xA6, 0x55, 0x0B, 0xA5, 0x55, 0x0B, 0xA5, 0x54, 0x0B,
    0xA5, 0x54, 0x0B, 0xA6, 0x55, 0x0B, 0x88, 0x4D, 0x18, 0x69, 0x44, 0x25,
    0x72, 0x42, 0x1C, 0xA8, 0x59, 0x0F, 0xAA, 0x5B, 0x11, 0xAC, 0x5D, 0x13,
    0xAD, 0x60, 0x17, 0xE5, 0xC7, 0xA6, 0xFF, 0xF6, 0xE6, 0xF8, 0xEA, 0xD6,
    0xFE, 0xF5, 0xE6, 0xFF, 0xF6, 0xE7, 0xF7, 0xE9, 0xD6, 0xC1, 0x8C, 0x5F,
    0xB1, 0x72, 0x3F, 0xB1, 0x73, 0x43, 0xB1, 0x74, 0x45, 0xB1, 0x75, 0x47,
    0xB1, 0x75, 0x49, 0xB1, 0x75, 0x49, 0xB1, 0x75, 0x48, 0xAE, 0x72, 0x44,
    0xAA, 0x6F, 0x41, 0xB2, 0x74, 0x43, 0xB2, 0x74, 0x42, 0xB3, 0x75, 0x41,
    0xB3, 0x74, 0x40, 0xB4, 0x74, 0x3E, 0xB4, 0x75, 0x3E, 0xA9, 0x6E, 0x3D,
    0xA9, 0xA3, 0xCC, 0xC4, 0xC5, 0xF4, 0xEC, 0xF2, 0xFE, 0xA4, 0x8D, 0x86,
    0xB1, 0x74, 0x3F, 0xB6, 0x78, 0x42, 0xB6, 0x78, 0x43, 0xB6, 0x79, 0x46,
    0xB6, 0x7A, 0x48, 0x8B, 0x5C, 0x38, 0x8A, 0x5C, 0x39, 0xB6, 0x7D, 0x50,
    0xB6, 0x7D, 0x52, 0xB5, 0x7E, 0x55, 0xB5, 0x7F, 0x58, 0xB5, 0x80, 0x5B,
    0xB5, 0x81, 0x5E, 0xB5, 0x81, 0x60, 0xB4, 0x82, 0x63, 0xB4, 0x82, 0x64,
    0xB4, 0x82, 0x64, 0xB4, 0x82, 0x65, 0xB4, 0x82, 0x64, 0xB3, 0x81, 0x63,
    0xB3, 0x81, 0x63, 0xB3, 0x80, 0x63, 0xB3, 0x80, 0x63, 0x99, 0x6A, 0x50,
    0xAA, 0xA1, 0xC6, 0xCE, 0xD0, 0xF6, 0xED, 0xF3, 0xFE, 0xE8, 0xEE, 0xFD,
    0xC3, 0xC3, 0xF3, 0xBD, 0xBD, 0xF2, 0xB9, 0xB8, 0xEB, 0x7D, 0x5C, 0x4F,
    0xA3, 0x6A, 0x3E, 0xB1, 0x71, 0x3D, 0xB1, 0x6E, 0x35, 0xB0, 0x6B, 0x2F,
    0xB0, 0x69, 0x29, 0xAF, 0x66, 0x24, 0xAE, 0x63, 0x1F, 0xAD, 0x61, 0x1B,
    0xAD, 0x60, 0x18, 0xAD, 0x5F, 0x16, 0xAD, 0x5E, 0x14, 0xAD, 0x5E, 0x12,
    0xAD, 0x5E, 0x10, 0xAE, 0x5D, 0x0F, 0xAE, 0x5D, 0x0E, 0xAF, 0x5E, 0x0D,
    0xB0, 0x5F, 0x0D, 0x6E, 0x38, 0x12, 0xCA, 0xBD, 0xB6, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xD6, 0xD2, 0xAF, 0x9C, 0x93,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0xEA, 0xE7, 0x5E, 0x2F, 0x13,
    0xA7, 0x57, 0x0C, 0xA9, 0x58, 0x0C, 0xA8, 0x57, 0x0C, 0xA7, 0x56, 0x0C,
    0xA6, 0x56, 0x0C, 0xA6, 0x55, 0x0C, 0xA6, 0x55, 0x0B, 0xA6, 0x55, 0x0B,
    0xA6, 0x55, 0x0B, 0xA6, 0x55, 0x0C, 0x98, 0x51, 0x11, 0x69, 0x44, 0x25,
    0x67, 0x40, 0x21, 0xA0, 0x55, 0x10, 0xAA, 0x5B, 0x10, 0xAC, 0x5D, 0x12,
    0xAD, 0x5F, 0x16, 0xE5, 0xC7, 0xA5, 0xFF, 0xF5, 0xE6, 0xD3, 0xA6, 0x7A,
    0xD9, 0xB2, 0x8A, 0xFE, 0xF5, 0xE6, 0xFF, 0xF6, 0xE7, 0xF8, 0xEB, 0xD8,
    0xC1, 0x8D, 0x60, 0xB2, 0x73, 0x40, 0xB2, 0x74, 0x42, 0xB2, 0x75, 0x44,
    0xB2, 0x75, 0x45, 0xB2, 0x75, 0x46, 0xB2, 0x75, 0x45, 0xB2, 0x75, 0x43,
    0xB2, 0x74, 0x42, 0xB3, 0x74, 0x41, 0xB3, 0x74, 0x3F, 0xB4, 0x75, 0x3F,
    0xB4, 0x75, 0x3E, 0xB5, 0x75, 0x3D, 0xB5, 0x75, 0x3D, 0xB2, 0x74, 0x3C,
    0xA5, 0x9A, 0xB8, 0xBE, 0xBE, 0xF2, 0xCD, 0xCC, 0xEA, 0x97, 0x65, 0x40,
    0xB8, 0x79, 0x42, 0xB7, 0x79, 0x43, 0xB7, 0x7A, 0x45, 0xB7, 0x7A, 0x47,
    0x93, 0x61, 0x39, 0x85, 0x58, 0x36, 0xB6, 0x7C, 0x4D, 0xB7, 0x7D, 0x4F,
    0xB7, 0x7E, 0x51, 0xB6, 0x7E, 0x54, 0xB6, 0x7F, 0x56, 0xB6, 0x7F, 0x59,
    0xB6, 0x80, 0x5B, 0xB6, 0x81, 0x5E, 0xB5, 0x82, 0x60, 0xB5, 0x82, 0x62,
    0xB5, 0x82, 0x62, 0xB4, 0x82, 0x64, 0xB4, 0x82, 0x64, 0xB4, 0x82, 0x63,
    0xB4, 0x82, 0x63, 0xB3, 0x82, 0x63, 0xB4, 0x82, 0x64, 0x8C, 0x67, 0x58,
    0xB9, 0xB8, 0xEB, 0xDC, 0xE0, 0xFA, 0xEB, 0xF1, 0xFE, 0xC7, 0xC9, 0xF4,
    0xBD, 0xBD, 0xF2, 0xBD, 0xBC, 0xF1, 0x97, 0x81, 0x8A, 0x96, 0x61, 0x3A,
    0xB2, 0x73, 0x41, 0xB2, 0x70, 0x39, 0xB1, 0x6D, 0x30, 0xB0, 0x6A, 0x2A,
    0xAF, 0x67, 0x25, 0xAF, 0x64, 0x1F, 0xAE, 0x62, 0x1B, 0xAD, 0x61, 0x18,
    0xAD, 0x60, 0x16, 0xAD, 0x5F, 0x15, 0xAD, 0x5E, 0x13, 0xAD, 0x5E, 0x11,
    0xAE, 0x5E, 0x10, 0xAF, 0x5E, 0x0E, 0xAF, 0x5E, 0x0E, 0xB0, 0x5F, 0x0D,
    0xA7, 0x5A, 0x0E, 0x65, 0x3A, 0x23, 0xF5, 0xF2, 0xF1, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA9, 0x93, 0x87, 0xB8, 0xA7, 0x9E,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x79, 0x56, 0x43,
    0x97, 0x4E, 0x0D, 0xAA, 0x59, 0x0C, 0xA9, 0x58, 0x0C, 0xA8, 0x57, 0x0C,
    0xA7, 0x56, 0x0C, 0xA7, 0x55, 0x0C, 0xA6, 0x55, 0x0C, 0xA6, 0x55, 0x0C,
    0xA6, 0x55, 0x0C, 0xA6, 0x56, 0x0B, 0xA5, 0x55, 0x0C, 0x70, 0x46, 0x21,
    0x67, 0x42, 0x24, 0x91, 0x4E, 0x12, 0xAA, 0x5B, 0x0F, 0xAC, 0x5D, 0x11,
    0xAD, 0x5F, 0x14, 0xD6, 0xAB, 0x7E, 0xFE, 0xF5, 0xE6, 0xDF, 0xBB, 0x96,
    0xB2, 0x6A, 0x26, 0xD8, 0xB0, 0x88, 0xFE, 0xF5, 0xE5, 0xFF, 0xF6, 0xE7,
    0xF9, 0xEB, 0xD9, 0xC3, 0x8F, 0x62, 0xB3, 0x74, 0x40, 0xB3, 0x75, 0x42,
    0xB3, 0x75, 0x43, 0xB3, 0x75, 0x43, 0xB3, 0x75, 0x42, 0xB7, 0x7A, 0x48,
    0xCB, 0x9E, 0x74, 0xBF, 0x86, 0x56, 0xB5, 0x74, 0x3C, 0xB5, 0x74, 0x3C,
    0xB5, 0x75, 0x3B, 0xB6, 0x75, 0x3B, 0xB7, 0x76, 0x3B, 0xB6, 0x75, 0x3B,
    0xA1, 0x91, 0xA8, 0xBD, 0xBD, 0xF1, 0x9A, 0x84, 0x90, 0xAE, 0x72, 0x3D,
    0xB8, 0x7A, 0x42, 0xB7, 0x79, 0x43, 0xA8, 0x6E, 0x3E, 0x89, 0x59, 0x34,
    0x9D, 0x68, 0x3E, 0xB8, 0x7C, 0x4B, 0xB8, 0x7D, 0x4D, 0xB7, 0x7D, 0x4F,
    0xB7, 0x7E, 0x51, 0xB7, 0x7F, 0x53, 0xB7, 0x7F, 0x54, 0xB6, 0x7F, 0x56,
    0xB6, 0x80, 0x59, 0xB6, 0x81, 0x5B, 0xB6, 0x81, 0x5D, 0xB6, 0x82, 0x5F,
    0xB5, 0x82, 0x61, 0xB5, 0x82, 0x62, 0xB5, 0x83, 0x63, 0xB5, 0x83, 0x63,
    0xB5, 0x83, 0x64, 0xB4, 0x82, 0x65, 0xB4, 0x82, 0x65, 0x91, 0x7C, 0x8A,
    0xBE, 0xBF, 0xF2, 0xE9, 0xEF, 0xFD, 0xD0, 0xD2, 0xF7, 0xBD, 0xBD, 0xF2,
    0xBD, 0xBD, 0xF2, 0xA6, 0x97, 0xB1, 0x98, 0x65, 0x40, 0xAE, 0x71, 0x41,
    0xB2, 0x72, 0x3C, 0xB1, 0x6E, 0x33, 0xB1, 0x6B, 0x2C, 0xB1, 0x68, 0x26,
    0xB0, 0x66, 0x20, 0xAF, 0x63, 0x1B, 0xAE, 0x62, 0x18, 0xAE, 0x60, 0x16,
    0xAE, 0x60, 0x14, 0xAE, 0x5F, 0x13, 0xAE, 0x5F, 0x11, 0xAE, 0x5F, 0x10,
    0xAE, 0x5F, 0x0F, 0xAF, 0x5F, 0x0E, 0xB0, 0x5F, 0x0E, 0xB1, 0x60, 0x0D,
    0x87, 0x47, 0x0F, 0x94, 0x78, 0x6A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x79, 0x56, 0x45, 0xD4, 0xCB, 0xC6,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB2, 0x9E, 0x93,
    0x7E, 0x40, 0x0F, 0xAA, 0x59, 0x0C, 0xA9, 0x58, 0x0C, 0xA8, 0x57, 0x0C,
    0xA8, 0x57, 0x0C, 0xA7, 0x56, 0x0C, 0xA7, 0x56, 0x0C, 0xA7, 0x55, 0x0C,
    0xA7, 0x56, 0x0C, 0xA7, 0x56, 0x0B, 0xA7, 0x56, 0x0B, 0x84, 0x4C, 0x19,
    0x69, 0x44, 0x25, 0x8A, 0x4B, 0x13, 0xAB, 0x5B, 0x0E, 0xAC, 0x5D, 0x10,
    0xAD, 0x5F, 0x13, 0xBF, 0x80, 0x42, 0xFD, 0xF3, 0xE3, 0xF1, 0xDD, 0xC4,
    0xB3, 0x6B, 0x26, 0xB3, 0x6C, 0x2A, 0xDA, 0xB3, 0x8C, 0xFE, 0xF5, 0xE5,
    0xFF, 0xF6, 0xE7, 0xF8, 0xEA, 0xD8, 0xC2, 0x8D, 0x5F, 0xB4, 0x74, 0x3F,
    0xB4, 0x75, 0x40, 0xB4, 0x75, 0x40, 0xB9, 0x7E, 0x4A, 0xEB, 0xD3, 0xB9,
    0xFE, 0xF5, 0xE6, 0xFB, 0xEF, 0xDD, 0xC9, 0x96, 0x67, 0xB6, 0x74, 0x38,
    0xB7, 0x74, 0x38, 0xB7, 0x75, 0x38, 0xB8, 0x76, 0x38, 0xB7, 0x75, 0x38,
    0xA3, 0x91, 0xA5, 0xB8, 0xB6, 0xE6, 0x93, 0x64, 0x42, 0xB9, 0x7A, 0x40,
    0xB9, 0x7B, 0x41, 0xA2, 0x69, 0x39, 0x9F, 0x68, 0x3A, 0xB5, 0x7A, 0x46,
    0xB8, 0x7D, 0x49, 0xB8, 0x7D, 0x4B, 0xB8, 0x7E, 0x4C, 0xB9, 0x7E, 0x4E,
    0xB8, 0x7E, 0x50, 0xB8, 0x7E, 0x50, 0xB7, 0x7F, 0x52, 0xB7, 0x7F, 0x54,
    0xB7, 0x80, 0x56, 0xB7, 0x80, 0x58, 0xB7, 0x81, 0x5A, 0xB6, 0x82, 0x5D,
    0xB6, 0x82, 0x5F, 0xB6, 0x82, 0x61, 0xB6, 0x83, 0x62, 0xB5, 0x83, 0x63,
    0xB5, 0x83, 0x65, 0xB5, 0x84, 0x66, 0xA6, 0x7B, 0x65, 0x9F, 0x95, 0xB7,
    0xCA, 0xCC, 0xF5, 0xD4, 0xD7, 0xF8, 0xBD, 0xBD, 0xF2, 0xBC, 0xBC, 0xF1,
    0xA7, 0x9D, 0xBE, 0x9C, 0x6B, 0x4A, 0xA7, 0x6E, 0x41, 0xB3, 0x74, 0x3F,
    0xB2, 0x71, 0x37, 0xB2, 0x6D, 0x2F, 0xB1, 0x69, 0x28, 0xB0, 0x67, 0x22,
    0xB0, 0x64, 0x1D, 0xAF, 0x62, 0x18, 0xAF, 0x61, 0x15, 0xAE, 0x60, 0x13,
    0xAF, 0x60, 0x12, 0xAE, 0x5F, 0x11, 0xAE, 0x5F, 0x10, 0xAF, 0x5F, 0x0F,
    0xAF, 0x5F, 0x0E, 0xB0, 0x5F, 0x0E, 0xB1, 0x60, 0x0D, 0xAD, 0x5D, 0x0D,
    0x63, 0x32, 0x14, 0xD7, 0xCD, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xE3, 0xDC, 0xD8, 0x5C, 0x32, 0x1D, 0xE9, 0xE4, 0xE2,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xE2, 0xDF,
    0x69, 0x37, 0x16, 0xAB, 0x5A, 0x0C, 0xAA, 0x59, 0x0C, 0xA9, 0x58, 0x0C,
    0xA8, 0x57, 0x0C, 0xA8, 0x57, 0x0C, 0xA7, 0x56, 0x0C, 0xA7, 0x56, 0x0C,
    0xA7, 0x56, 0x0C, 0xA7, 0x56, 0x0B, 0xA8, 0x57, 0x0B, 0x9C, 0x53, 0x0F,
    0x6A, 0x44, 0x24, 0x76, 0x44, 0x1A, 0xAA, 0x5A, 0x0D, 0xAC, 0x5C, 0x0F,
    0xAD, 0x5E, 0x12, 0xAF, 0x62, 0x18, 0xEF, 0xD9, 0xBF, 0xFC, 0xF0, 0xDF,
    0xC0, 0x82, 0x45, 0xB3, 0x6A, 0x25, 0xB4, 0x6E, 0x2C, 0xDA, 0xB4, 0x8D,
    0xFE, 0xF5, 0xE6, 0xFF, 0xF6, 0xE7, 0xF6, 0xE7, 0xD3, 0xBF, 0x86, 0x53,
    0xB5, 0x75, 0x3D, 0xC7, 0x94, 0x66, 0xF3, 0xE2, 0xCD, 0xFE, 0xF5, 0xE6,
    0xFF, 0xF6, 0xE7, 0xFF, 0xF6, 0xE7, 0xF7, 0xE8, 0xD4, 0xBD, 0x7F, 0x44,
    0xB7, 0x74, 0x34, 0xB8, 0x75, 0x34, 0xB8, 0x75, 0x35, 0xB8, 0x75, 0x36,
    0xA5, 0x94, 0xAB, 0x99, 0x83, 0x8F, 0xAF, 0x71, 0x38, 0xBA, 0x7A, 0x3E,
    0xBA, 0x7B, 0x41, 0xB9, 0x7B, 0x43, 0xB9, 0x7C, 0x45, 0xB9, 0x7D, 0x47,
    0xB9, 0x7D, 0x49, 0xB9, 0x7D, 0x4A, 0xB9, 0x7E, 0x4C, 0xB9, 0x7E, 0x4D,
    0xB9, 0x7F, 0x4E, 0xB9, 0x7F, 0x4F, 0xB8, 0x7E, 0x4F, 0xB8, 0x7F, 0x51,
    0xB8, 0x80, 0x54, 0xB7, 0x80, 0x56, 0xB7, 0x81, 0x59, 0xB7, 0x81, 0x5A,
    0xB7, 0x82, 0x5D, 0xB7, 0x83, 0x60, 0xB6, 0x83, 0x62, 0xB6, 0x84, 0x64,
    0xB6, 0x84, 0x65, 0xB6, 0x84, 0x66, 0x90, 0x6E, 0x64, 0xB5, 0xB3, 0xE3,
    0xC9, 0xCB, 0xF5, 0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xA4, 0x9C, 0xBF,
    0xA3, 0x73, 0x55, 0xA6, 0x6F, 0x43, 0xB3, 0x76, 0x43, 0xB4, 0x73, 0x3B,
    0xB3, 0x6F, 0x33, 0xB1, 0x6B, 0x2A, 0xB1, 0x68, 0x24, 0xB0, 0x65, 0x1E,
    0xB0, 0x63, 0x19, 0xAF, 0x61, 0x15, 0xAF, 0x60, 0x13, 0xAF, 0x60, 0x11,
    0xAF, 0x5F, 0x11, 0xAF, 0x5F, 0x10, 0xAF, 0x5F, 0x0F, 0xAF, 0x5F, 0x0F,
    0xB0, 0x5F, 0x0E, 0xB0, 0x5F, 0x0D, 0xB1, 0x60, 0x0D, 0x95, 0x4F, 0x0E,
    0x73, 0x4E, 0x3B, 0xFB, 0xFA, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xA7, 0x90, 0x84, 0x66, 0x40, 0x2D, 0xFA, 0xF9, 0xF8,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x80, 0x62, 0x52, 0x9D, 0x52, 0x0D, 0xAB, 0x59, 0x0C, 0xAA, 0x59, 0x0C,
    0xA9, 0x58, 0x0C, 0xA8, 0x57, 0x0C, 0xA8, 0x57, 0x0C, 0xA8, 0x57, 0x0C,
    0xA8, 0x56, 0x0B, 0xA8, 0x57, 0x0B, 0xA8, 0x57, 0x0B, 0xA8, 0x57, 0x0B,
    0x79, 0x49, 0x1E, 0x68, 0x41, 0x22, 0x9E, 0x54, 0x0F, 0xAC, 0x5C, 0x0E,
    0xAD, 0x5E, 0x11, 0xAE, 0x60, 0x13, 0xCF, 0x9D, 0x69, 0xFC, 0xF0, 0xDF,
    0xD7, 0xAC, 0x7F, 0xB3, 0x69, 0x23, 0xB4, 0x6D, 0x28, 0xB5, 0x70, 0x2E,
    0xDC, 0xB6, 0x90, 0xFE, 0xF5, 0xE6, 0xFF, 0xF6, 0xE7, 0xF3, 0xE2, 0xCC,
    0xDB, 0xB7, 0x93, 0xFD, 0xF3, 0xE3, 0xFF, 0xF6, 0xE7, 0xFE, 0xF5, 0xE5,
    0xF6, 0xE5, 0xD0, 0xFF, 0xF6, 0xE7, 0xFF, 0xF6, 0xE7, 0xE0, 0xBE, 0x99,
    0xB8, 0x74, 0x31, 0xB9, 0x75, 0x31, 0xB9, 0x75, 0x32, 0xB9, 0x75, 0x33,
    0xA6, 0x95, 0xAB, 0x98, 0x67, 0x43, 0xBA, 0x79, 0x3A, 0xBA, 0x7A, 0x3D,
    0xBB, 0x7B, 0x3F, 0xBA, 0x7B, 0x42, 0xBC, 0x80, 0x48, 0xCC, 0x9D, 0x70,
    0xBE, 0x85, 0x52, 0xB9, 0x7E, 0x4A, 0xBA, 0x7F, 0x4B, 0xB9, 0x7E, 0x4B,
    0xB9, 0x7F, 0x4C, 0xB9, 0x7F, 0x4C, 0xB9, 0x7F, 0x4D, 0xB9, 0x7F, 0x4F,
    0xB8, 0x7F, 0x51, 0xB8, 0x7F, 0x53, 0xB8, 0x80, 0x56, 0xB8, 0x81, 0x59,
    0xB7, 0x82, 0x5C, 0xB7, 0x83, 0x5E, 0xB7, 0x83, 0x61, 0xB7, 0x84, 0x63,
    0xB6, 0x84, 0x65, 0xB5, 0x84, 0x66, 0x8B, 0x78, 0x86, 0xBD, 0xBD, 0xF2,
    0xBD, 0xBD, 0xF2, 0xBD, 0xBD, 0xF2, 0xA4, 0x97, 0xB2, 0xA3, 0x73, 0x54,
    0xAB, 0x73, 0x49, 0xB2, 0x76, 0x45, 0xB4, 0x75, 0x3F, 0xB3, 0x71, 0x36,
    0xB2, 0x6D, 0x2E, 0xB2, 0x6A, 0x26, 0xB1, 0x67, 0x20, 0xB1, 0x64, 0x1A,
    0xB0, 0x62, 0x16, 0xB0, 0x61, 0x13, 0xAF, 0x60, 0x11, 0xAF, 0x5F, 0x10,
    0xAF, 0x5F, 0x0F, 0xAF, 0x5F, 0x0F, 0xB0, 0x5F, 0x0E, 0xB0, 0x5F, 0x0E,
    0xB0, 0x5F, 0x0E, 0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D, 0x75, 0x3C, 0x10,
    0xB6, 0xA2, 0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xEE, 0xE9, 0xE7, 0x61, 0x38, 0x21, 0x84, 0x64, 0x52, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xBC, 0xAD, 0xA6, 0x7F, 0x41, 0x10, 0xAC, 0x5A, 0x0C, 0xAA, 0x5A, 0x0C,
    0xAA, 0x58, 0x0C, 0xA9, 0x58, 0x0C, 0xA9, 0x58, 0x0C, 0xA8, 0x57, 0x0C,
    0xA8, 0x57, 0x0B, 0xA8, 0x57, 0x0B, 0xA8, 0x57, 0x0B, 0xA9, 0x58, 0x0C,
    0x91, 0x51, 0x15, 0x69, 0x43, 0x24, 0x83, 0x49, 0x16, 0xAC, 0x5C, 0x0E,
    0xAD, 0x5D, 0x10, 0xAE, 0x5F, 0x12, 0xB5, 0x6B, 0x22, 0xEF, 0xD9, 0xBE,
    0xEE, 0xD8, 0xBC, 0xB7, 0x71, 0x2C, 0xB4, 0x6C, 0x25, 0xB5, 0x6E, 0x2A,
    0xB6, 0x72, 0x30, 0xDF, 0xBD, 0x99, 0xFE, 0xF5, 0xE6, 0xFF, 0xF6, 0xE7,
    0xFF, 0xF6, 0xE6, 0xFE, 0xF5, 0xE6, 0xF4, 0xE3, 0xCD, 0xCF, 0x9E, 0x6D,
    0xC0, 0x82, 0x47, 0xFA, 0xED, 0xDB, 0xFF, 0xF6, 0xE7, 0xFB, 0xEF, 0xDD,
    0xC0, 0x7F, 0x3E, 0xB9, 0x74, 0x2D, 0xBA, 0x75, 0x2E, 0xB9, 0x75, 0x2F,
    0x96, 0x78, 0x74, 0xAE, 0x6E, 0x30, 0xBB, 0x78, 0x37, 0xBB, 0x7A, 0x3A,
    0xBB, 0x7A, 0x3D, 0xBB, 0x7B, 0x3F, 0xD9, 0xB2, 0x8A, 0xFA, 0xEE, 0xDC,
    0xD9, 0xB3, 0x8D, 0xBA, 0x7E, 0x48, 0xBA, 0x7E, 0x49, 0xBA, 0x7F, 0x4A,
    0xBA, 0x7F, 0x49, 0xB9, 0x7E, 0x4A, 0xB9, 0x7E, 0x4B, 0xBA, 0x7F, 0x4D,
    0xB9, 0x7F, 0x4F, 0xB9, 0x80, 0x51, 0xB9, 0x80, 0x54, 0xB8, 0x81, 0x57,
    0xB8, 0x82, 0x5B, 0xB7, 0x83, 0x5E, 0xB8, 0x84, 0x60, 0xB7, 0x84, 0x62,
    0xB7, 0x85, 0x64, 0xA1, 0x76, 0x60, 0xA4, 0x9C, 0xC1, 0xBD, 0xBD, 0xF2,
    0xBC, 0xBC, 0xF0, 0xA0, 0x8D, 0x9F, 0xA3, 0x71, 0x4F, 0xB1, 0x79, 0x4E,
    0xB0, 0x76, 0x48, 0xB5, 0x77, 0x44, 0xB4, 0x73, 0x3B, 0xB4, 0x70, 0x32,
    0xB3, 0x6C, 0x2A, 0xB2, 0x68, 0x22, 0xB1, 0x66, 0x1C, 0xB1, 0x63, 0x17,
    0xB0, 0x61, 0x13, 0xB0, 0x60, 0x11, 0xAF, 0x5F, 0x0F, 0xAF, 0x5F, 0x0F,
    0xAF, 0x5F, 0x0E, 0xB0, 0x5F, 0x0E, 0xB0, 0x5F, 0x0E, 0xB0, 0x5F, 0x0D,
    0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D, 0xAD, 0x5E, 0x0F, 0x63, 0x37, 0x1D,
    0xF1, 0xEE, 0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFD,
    0x8E, 0x70, 0x61, 0x68, 0x35, 0x11, 0xAB, 0x95, 0x88, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF0, 0xED, 0xEC, 0x64, 0x36, 0x1A, 0xA9, 0x5A, 0x0C, 0xAB, 0x5A, 0x0C,
    0xAA, 0x59, 0x0C, 0xAA, 0x59, 0x0C, 0xA9, 0x58, 0x0C, 0xA9, 0x58, 0x0C,
    0xA9, 0x58, 0x0C, 0xA9, 0x58, 0x0C, 0xA9, 0x58, 0x0C, 0xA9, 0x58, 0x0C,
    0xA7, 0x58, 0x0C, 0x75, 0x48, 0x20, 0x6B, 0x41, 0x1F, 0xA9, 0x5A, 0x0E,
    0xAD, 0x5D, 0x0F, 0xAE, 0x5F, 0x11, 0xB0, 0x61, 0x14, 0xC6, 0x8B, 0x4E,
    0xED, 0xD4, 0xB8, 0xD1, 0xA1, 0x6E, 0xB5, 0x6B, 0x23, 0xB5, 0x6D, 0x27,
    0xB6, 0x70, 0x2C, 0xB8, 0x74, 0x33, 0xDD, 0xB9, 0x92, 0xFE, 0xF4, 0xE4,
    0xFD, 0xF3, 0xE3, 0xDF, 0xBC, 0x97, 0xBC, 0x7C, 0x3D, 0xB8, 0x74, 0x31,
    0xB9, 0x73, 0x30, 0xE0, 0xBD, 0x96, 0xFF, 0xF6, 0xE7, 0xFE, 0xF5, 0xE5,
    0xC8, 0x8D, 0x4F, 0xBA, 0x73, 0x29, 0xBB, 0x73, 0x2A, 0xB5, 0x71, 0x2C,
    0x91, 0x5F, 0x37, 0xBB, 0x77, 0x31, 0xBC, 0x78, 0x35, 0xBC, 0x79, 0x38,
    0xBB, 0x7A, 0x3B, 0xBC, 0x7D, 0x41, 0xF3, 0xE1, 0xCA, 0xFE, 0xF4, 0xE4,
    0xCD, 0x9E, 0x71, 0xBB, 0x7E, 0x46, 0xBA, 0x7E, 0x47, 0xBA, 0x7E, 0x48,
    0xBA, 0x7E, 0x48, 0xBA, 0x7E, 0x48, 0xBA, 0x7E, 0x48, 0xB9, 0x7E, 0x4A,
    0xB9, 0x7F, 0x4C, 0xB9, 0x80, 0x4F, 0xB8, 0x80, 0x52, 0xB8, 0x81, 0x55,
    0xB9, 0x82, 0x59, 0xB8, 0x83, 0x5C, 0xB8, 0x84, 0x5F, 0xB8, 0x84, 0x62,
    0xB7, 0x84, 0x62, 0x8C, 0x70, 0x71, 0xBC, 0xBC, 0xF0, 0xB9, 0xB8, 0xEB,
    0x9D, 0x85, 0x8E, 0xAA, 0x77, 0x52, 0xB7, 0x7F, 0x54, 0xB4, 0x7A, 0x4C,
    0xB5, 0x78, 0x46, 0xB5, 0x75, 0x3F, 0xB4, 0x71, 0x37, 0xB3, 0x6E, 0x2E,
    0xB3, 0x6A, 0x26, 0xB2, 0x67, 0x1F, 0xB1, 0x64, 0x19, 0xB1, 0x62, 0x14,
    0xB0, 0x61, 0x11, 0xB0, 0x60, 0x0F, 0xB0, 0x5F, 0x0E, 0xB0, 0x5F, 0x0E,
    0xB0, 0x5E, 0x0E, 0xB0, 0x5F, 0x0E, 0xB0, 0x5F, 0x0D, 0xB1, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D, 0x93, 0x4F, 0x10, 0x9B, 0x81, 0x73,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBB, 0xA9, 0xA0,
    0x66, 0x34, 0x12, 0x78, 0x40, 0x13, 0xDE, 0xD6, 0xD2, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x88, 0x6A, 0x5A, 0x97, 0x4F, 0x0D, 0xAC, 0x5B, 0x0C,
    0xAB, 0x5A, 0x0C, 0xAA, 0x5A, 0x0C, 0xAA, 0x59, 0x0C, 0xAA, 0x58, 0x0C,
    0xAA, 0x58, 0x0C, 0xA9, 0x59, 0x0C, 0xAA, 0x58, 0x0C, 0xAA, 0x59, 0x0C,
    0xAA, 0x59, 0x0C, 0x98, 0x53, 0x13, 0x68, 0x42, 0x23, 0x8F, 0x4F, 0x15,
    0xAD, 0x5D, 0x0E, 0xAE, 0x5F, 0x10, 0xB0, 0x61, 0x12, 0xB1, 0x63, 0x15,
    0xC1, 0x81, 0x40, 0xC6, 0x8A, 0x4C, 0xB5, 0x6B, 0x21, 0xB5, 0x6D, 0x25,
    0xB6, 0x6F, 0x29, 0xB7, 0x71, 0x2D, 0xB8, 0x72, 0x2F, 0xC6, 0x8D, 0x54,
    0xC5, 0x8C, 0x53, 0xB9, 0x74, 0x31, 0xB9, 0x74, 0x30, 0xB9, 0x74, 0x2F,
    0xBA, 0x74, 0x2C, 0xBF, 0x7D, 0x39, 0xE4, 0xC3, 0x9D, 0xDD, 0xB4, 0x87,
    0xBC, 0x74, 0x29, 0xBB, 0x73, 0x26, 0xBB, 0x73, 0x27, 0xAC, 0x69, 0x26,
    0xA4, 0x64, 0x26, 0xBC, 0x76, 0x2E, 0xBC, 0x78, 0x32, 0xBC, 0x79, 0x35,
    0xBB, 0x79, 0x39, 0xC2, 0x86, 0x4B, 0xFC, 0xF1, 0xDF, 0xF9, 0xEC, 0xD8,
    0xCE, 0x9F, 0x71, 0xCD, 0x9D, 0x6F, 0xCE, 0x9F, 0x72, 0xCF, 0xA1, 0x75,
    0xD0, 0xA3, 0x78, 0xD1, 0xA7, 0x7C, 0xD3, 0xA9, 0x81, 0xCF, 0xA3, 0x79,
    0xBF, 0x88, 0x56, 0xB9, 0x7F, 0x4D, 0xBA, 0x81, 0x4F, 0xB9, 0x81, 0x53,
    0xB9, 0x82, 0x57, 0xB9, 0x83, 0x5A, 0xB9, 0x84, 0x5D, 0xB9, 0x85, 0x60,
    0xA1, 0x73, 0x57, 0xA2, 0x99, 0xBC, 0xB2, 0xAC, 0xD7, 0x9C, 0x79, 0x70,
    0xB3, 0x7E, 0x57, 0xB8, 0x80, 0x55, 0xB7, 0x7E, 0x4F, 0xB6, 0x7A, 0x49,
    0xB6, 0x77, 0x41, 0xB5, 0x74, 0x3A, 0xB4, 0x70, 0x32, 0xB4, 0x6D, 0x2A,
    0xB3, 0x69, 0x22, 0xB2, 0x66, 0x1B, 0xB2, 0x63, 0x16, 0xB1, 0x61, 0x12,
    0xB1, 0x61, 0x10, 0xB0, 0x5F, 0x0E, 0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D,
    0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D,
    0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0x70, 0x3C, 0x15, 0xDD, 0xD4, 0xD0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xD8, 0xD4, 0x65, 0x3B, 0x22,
    0x9A, 0x54, 0x0F, 0x76, 0x4E, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xC2, 0xB2, 0xAA, 0x72, 0x3A, 0x10, 0xAD, 0x5C, 0x0C,
    0xAC, 0x5B, 0x0C, 0xAB, 0x5A, 0x0C, 0xAB, 0x5A, 0x0C, 0xAA, 0x59, 0x0C,
    0xAA, 0x59, 0x0C, 0xAA, 0x59, 0x0C, 0xAA, 0x59, 0x0C, 0xAA, 0x59, 0x0C,
    0xAA, 0x59, 0x0C, 0xAA, 0x59, 0x0C, 0x7E, 0x4B, 0x1C, 0x75, 0x45, 0x1C,
    0xAB, 0x5C, 0x0E, 0xAE, 0x5E, 0x0E, 0xB0, 0x60, 0x11, 0xB1, 0x62, 0x13,
    0xB2, 0x65, 0x17, 0xB4, 0x67, 0x1A, 0xB5, 0x6A, 0x1D, 0xB5, 0x6C, 0x22,
    0xB6, 0x6E, 0x26, 0xB7, 0x70, 0x29, 0xB8, 0x71, 0x2C, 0xB8, 0x73, 0x2D,
    0xB9, 0x74, 0x2F, 0xB9, 0x74, 0x2F, 0xB9, 0x74, 0x2D, 0xBA, 0x74, 0x2C,
    0xBA, 0x73, 0x29, 0xBB, 0x73, 0x27, 0xBB, 0x72, 0x26, 0xBB, 0x73, 0x25,
    0xBC, 0x72, 0x24, 0xBB, 0x72, 0x23, 0xBC, 0x72, 0x25, 0xA1, 0x60, 0x21,
    0xBA, 0x73, 0x28, 0xBC, 0x75, 0x2C, 0xBC, 0x77, 0x2F, 0xBC, 0x77, 0x32,
    0xBC, 0x78, 0x35, 0xBF, 0x80, 0x41, 0xF8, 0xE9, 0xD5, 0xFE, 0xF5, 0xE6,
    0xFE, 0xF5, 0xE6, 0xFE, 0xF5, 0xE6, 0xFE, 0xF5, 0xE6, 0xFE, 0xF5, 0xE6,
    0xFE, 0xF5, 0xE6, 0xFF, 0xF5, 0xE6, 0xFF, 0xF6, 0xE6, 0xFE, 0xF5, 0xE6,
    0xF5, 0xE6, 0xD1, 0xC2, 0x8C, 0x5D, 0xBA, 0x80, 0x4E, 0xB9, 0x81, 0x51,
    0xBA, 0x82, 0x55, 0xB9, 0x82, 0x58, 0xB9, 0x84, 0x5B, 0xB8, 0x83, 0x5C,
    0x8A, 0x6B, 0x67, 0xA7, 0x97, 0xB0, 0xA6, 0x78, 0x5B, 0xB8, 0x82, 0x59,
    0xB8, 0x81, 0x55, 0xB8, 0x7E, 0x50, 0xB7, 0x7B, 0x4A, 0xB6, 0x79, 0x43,
    0xB6, 0x75, 0x3C, 0xB5, 0x72, 0x34, 0xB4, 0x6F, 0x2D, 0xB4, 0x6B, 0x26,
    0xB2, 0x68, 0x1E, 0xB2, 0x65, 0x18, 0xB1, 0x62, 0x14, 0xB1, 0x61, 0x11,
    0xB0, 0x60, 0x0F, 0xB0, 0x5F, 0x0E, 0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D,
    0xB0, 0x5F, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D,
    0xB2, 0x61, 0x0D, 0x91, 0x4D, 0x10, 0x84, 0x64, 0x53, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xE8, 0xE2, 0xDF, 0x6B, 0x43, 0x2E, 0x97, 0x53, 0x10,
    0x98, 0x54, 0x10, 0xAA, 0x91, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF7, 0xF4, 0xF3, 0x62, 0x38, 0x21, 0xA2, 0x56, 0x0C,
    0xAD, 0x5C, 0x0C, 0xAC, 0x5B, 0x0C, 0xAC, 0x5B, 0x0C, 0xAB, 0x5A, 0x0C,
    0xAB, 0x5A, 0x0C, 0xAA, 0x59, 0x0C, 0xAB, 0x59, 0x0C, 0xAB, 0x59, 0x0C,
    0xAB, 0x5A, 0x0C, 0xAB, 0x5A, 0x0C, 0xA5, 0x59, 0x0F, 0x8B, 0x4E, 0x16,
    0xA6, 0x59, 0x0E, 0xAF, 0x5E, 0x0E, 0xB0, 0x60, 0x0F, 0xB1, 0x62, 0x12,
    0xB2, 0x64, 0x15, 0xB4, 0x66, 0x18, 0xB5, 0x69, 0x1B, 0xB6, 0x6B, 0x1F,
    0xB7, 0x6D, 0x22, 0xB7, 0x6F, 0x26, 0xB8, 0x70, 0x28, 0xB9, 0x72, 0x2A,
    0xB9, 0x72, 0x2C, 0xBA, 0x73, 0x2C, 0xBA, 0x73, 0x2B, 0xBA, 0x73, 0x29,
    0xBB, 0x73, 0x27, 0xBB, 0x72, 0x25, 0xBB, 0x72, 0x23, 0xBB, 0x72, 0x22,
    0xBB, 0x70, 0x21, 0xBC, 0x71, 0x21, 0xBB, 0x70, 0x21, 0xA5, 0x62, 0x20,
    0xBC, 0x73, 0x26, 0xBC, 0x74, 0x29, 0xBC, 0x76, 0x2C, 0xBC, 0x77, 0x2F,
    0xBC, 0x78, 0x33, 0xBC, 0x79, 0x36, 0xD5, 0xA8, 0x79, 0xF6, 0xE6, 0xD1,
    0xF9, 0xEC, 0xD9, 0xF8, 0xE9, 0xD5, 0xF8, 0xE9, 0xD5, 0xF8, 0xEA, 0xD6,
    0xF9, 0xEB, 0xD8, 0xF9, 0xEC, 0xD9, 0xF9, 0xEC, 0xD9, 0xFB, 0xEE, 0xDD,
    0xFE, 0xF4, 0xE4, 0xD5, 0xAD, 0x87, 0xBA, 0x7F, 0x4B, 0xBA, 0x80, 0x4F,
    0xBA, 0x81, 0x52, 0xBA, 0x82, 0x55, 0xB9, 0x83, 0x58, 0xA1, 0x6F, 0x4A,
    0x94, 0x6D, 0x5A, 0xB5, 0x81, 0x5A, 0xB9, 0x82, 0x57, 0xB9, 0x81, 0x54,
    0xB9, 0x7F, 0x4F, 0xB8, 0x7C, 0x4B, 0xB7, 0x79, 0x44, 0xB7, 0x76, 0x3D,
    0xB6, 0x73, 0x36, 0xB5, 0x70, 0x2E, 0xB5, 0x6D, 0x28, 0xB4, 0x6A, 0x22,
    0xB3, 0x67, 0x1B, 0xB2, 0x64, 0x16, 0xB2, 0x62, 0x12, 0xB1, 0x61, 0x0F,
    0xB0, 0x60, 0x0E, 0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D,
    0xB1, 0x5F, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D,
    0xAB, 0x5D, 0x0E, 0x67, 0x36, 0x16, 0xD3, 0xC7, 0xC1, 0xFF, 0xFF, 0xFF,
    0xEB, 0xE6, 0xE3, 0x71, 0x4B, 0x36, 0x92, 0x4F, 0x10, 0xB9, 0x68, 0x0E,
    0x75, 0x41, 0x18, 0xE6, 0xE0, 0xDC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9B, 0x81, 0x73, 0x83, 0x44, 0x10,
    0xAE, 0x5D, 0x0C, 0xAD, 0x5C, 0x0C, 0xAC, 0x5B, 0x0C, 0xAC, 0x5B, 0x0C,
    0xAB, 0x5A, 0x0C, 0xAB, 0x5A, 0x0C, 0xAB, 0x5A, 0x0C, 0xAB, 0x5A, 0x0C,
    0xAB, 0x5A, 0x0C, 0xAC, 0x5B, 0x0C, 0xAC, 0x5B, 0x0D, 0xAC, 0x5B, 0x0D,
    0xA5, 0x58, 0x0D, 0xAF, 0x5E, 0x0D, 0xB0, 0x60, 0x0E, 0xB1, 0x61, 0x10,
    0xB2, 0x64, 0x14, 0xB4, 0x66, 0x17, 0xB4, 0x68, 0x19, 0xB5, 0x69, 0x1C,
    0xB7, 0x6C, 0x1F, 0xB7, 0x6E, 0x22, 0xB8, 0x6F, 0x25, 0xB9, 0x70, 0x27,
    0xBA, 0x71, 0x29, 0xBA, 0x72, 0x28, 0xBB, 0x72, 0x27, 0xBB, 0x72, 0x26,
    0xBB, 0x72, 0x25, 0xBB, 0x71, 0x23, 0xBC, 0x71, 0x21, 0xBC, 0x71, 0x20,
    0xBC, 0x70, 0x1E, 0xBC, 0x70, 0x1E, 0xB0, 0x68, 0x1D, 0xB3, 0x6B, 0x1F,
    0xBC, 0x72, 0x23, 0xBC, 0x73, 0x26, 0xBD, 0x75, 0x29, 0xBC, 0x76, 0x2D,
    0xBC, 0x77, 0x30, 0xBC, 0x78, 0x33, 0xBB, 0x79, 0x36, 0xBD, 0x7B, 0x3A,
    0xBD, 0x7C, 0x3D, 0xBD, 0x7C, 0x3D, 0xBC, 0x7C, 0x3E, 0xBD, 0x7C, 0x3F,
    0xBC, 0x7D, 0x40, 0xBD, 0x7D, 0x41, 0xBC, 0x7D, 0x41, 0xD3, 0xA7, 0x7B,
    0xFB, 0xF0, 0xDF, 0xD3, 0xAA, 0x82, 0xBB, 0x7F, 0x49, 0xBB, 0x7F, 0x4C,
    0xBA, 0x81, 0x50, 0xBA, 0x82, 0x52, 0xB9, 0x81, 0x54, 0x8B, 0x5B, 0x39,
    0xB8, 0x80, 0x53, 0xB9, 0x81, 0x54, 0xB9, 0x81, 0x51, 0xB9, 0x7F, 0x4E,
    0xB9, 0x7D, 0x49, 0xB8, 0x7A, 0x43, 0xB7, 0x77, 0x3D, 0xB7, 0x74, 0x37,
    0xB6, 0x71, 0x30, 0xB5, 0x6E, 0x29, 0xB4, 0x6B, 0x23, 0xB4, 0x68, 0x1E,
    0xB3, 0x66, 0x19, 0xB2, 0x63, 0x13, 0xB2, 0x62, 0x10, 0xB1, 0x60, 0x0F,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x60, 0x0D, 0xB2, 0x61, 0x0D,
    0x87, 0x46, 0x0F, 0x84, 0x64, 0x53, 0xFD, 0xFC, 0xFC, 0xE2, 0xDA, 0xD5,
    0x6D, 0x45, 0x2F, 0x92, 0x4F, 0x0F, 0xB8, 0x68, 0x0E, 0xA8, 0x5E, 0x10,
    0x93, 0x76, 0x66, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE4, 0xDD, 0xD9, 0x63, 0x35, 0x19,
    0xA9, 0x5B, 0x0D, 0xAE, 0x5D, 0x0C, 0xAD, 0x5C, 0x0C, 0xAD, 0x5C, 0x0C,
    0xAC, 0x5B, 0x0C, 0xAC, 0x5B, 0x0C, 0xAC, 0x5B, 0x0C, 0xAC, 0x5B, 0x0C,
    0xAC, 0x5B, 0x0C, 0xAC, 0x5B, 0x0C, 0xAD, 0x5C, 0x0D, 0xAE, 0x5C, 0x0D,
    0xAE, 0x5D, 0x0D, 0xAF, 0x5E, 0x0D, 0xB0, 0x5F, 0x0D, 0xB1, 0x61, 0x0F,
    0xB3, 0x63, 0x12, 0xB3, 0x65, 0x15, 0xB5, 0x67, 0x17, 0xB6, 0x69, 0x1A,
    0xB7, 0x6B, 0x1C, 0xB7, 0x6D, 0x1F, 0xB8, 0x6E, 0x21, 0xB9, 0x70, 0x24,
    0xBA, 0x71, 0x25, 0xBA, 0x71, 0x25, 0xBA, 0x71, 0x24, 0xBB, 0x71, 0x24,
    0xBB, 0x71, 0x22, 0xBB, 0x71, 0x21, 0xBC, 0x71, 0x1F, 0xBC, 0x70, 0x1D,
    0xBC, 0x70, 0x1C, 0xBC, 0x70, 0x1C, 0xA8, 0x63, 0x1B, 0xBB, 0x71, 0x1F,
    0xBD, 0x72, 0x21, 0xBC, 0x73, 0x24, 0xBD, 0x74, 0x27, 0xBD, 0x75, 0x2A,
    0xBC, 0x76, 0x2D, 0xBC, 0x78, 0x30, 0xBC, 0x78, 0x33, 0xBC, 0x79, 0x35,
    0xBC, 0x79, 0x36, 0xBC, 0x79, 0x38, 0xBC, 0x7A, 0x38, 0xBC, 0x7A, 0x39,
    0xBC, 0x79, 0x3A, 0xBC, 0x7A, 0x3B, 0xBC, 0x7B, 0x3C, 0xDD, 0xB8, 0x91,
    0xF6, 0xE6, 0xD2, 0xC5, 0x90, 0x5D, 0xBA, 0x7E, 0x46, 0xBB, 0x7F, 0x49,
    0xBA, 0x7F, 0x4C, 0xBA, 0x80, 0x4E, 0x9E, 0x69, 0x40, 0xA2, 0x6D, 0x43,
    0xBA, 0x80, 0x4F, 0xBA, 0x7F, 0x4D, 0xBA, 0x7E, 0x4B, 0xB9, 0x7C, 0x47,
    0xB8, 0x7A, 0x42, 0xB8, 0x78, 0x3C, 0xB8, 0x75, 0x36, 0xB7, 0x72, 0x30,
    0xB6, 0x6F, 0x2A, 0xB5, 0x6D, 0x24, 0xC2, 0x84, 0x44, 0xD2, 0xA1, 0x6E,
    0xB6, 0x6B, 0x1E, 0xB2, 0x63, 0x12, 0xB2, 0x62, 0x0F, 0xB1, 0x60, 0x0E,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB2, 0x60, 0x0D, 0xB2, 0x61, 0x0D, 0xAC, 0x5D, 0x0E,
    0x61, 0x31, 0x14, 0xDA, 0xD0, 0xCB, 0xCC, 0xBF, 0xB8, 0x68, 0x3E, 0x25,
    0x98, 0x53, 0x10, 0xB8, 0x67, 0x0E, 0xB9, 0x68, 0x0E, 0x7D, 0x45, 0x16,
    0xD1, 0xC5, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8B, 0x6D, 0x5D,
    0x89, 0x48, 0x0F, 0xAF, 0x5E, 0x0C, 0xAE, 0x5D, 0x0C, 0xAE, 0x5C, 0x0C,
    0xAD, 0x5C, 0x0C, 0xAD, 0x5B, 0x0D, 0xAC, 0x5B, 0x0D, 0xAC, 0x5B, 0x0D,
    0xAC, 0x5C, 0x0D, 0xAD, 0x5C, 0x0D, 0xAD, 0x5C, 0x0D, 0xAE, 0x5D, 0x0D,
    0xAE, 0x5E, 0x0D, 0xAF, 0x5E, 0x0D, 0xB0, 0x5F, 0x0D, 0xB1, 0x60, 0x0E,
    0xB2, 0x62, 0x10, 0xB4, 0x65, 0x13, 0xB4, 0x66, 0x15, 0xB6, 0x68, 0x17,
    0xB7, 0x6A, 0x1A, 0xB8, 0x6C, 0x1C, 0xB9, 0x6D, 0x1E, 0xB9, 0x6F, 0x20,
    0xBA, 0x6F, 0x21, 0xBA, 0x70, 0x21, 0xBB, 0x71, 0x21, 0xBB, 0x71, 0x21,
    0xBC, 0x71, 0x20, 0xBC, 0x70, 0x1E, 0xBC, 0x70, 0x1D, 0xBD, 0x6F, 0x1B,
    0xBD, 0x70, 0x1B, 0xBC, 0x70, 0x1B, 0xA6, 0x61, 0x1A, 0xBD, 0x71, 0x1D,
    0xBD, 0x72, 0x20, 0xBD, 0x72, 0x22, 0xBD, 0x74, 0x25, 0xBD, 0x74, 0x27,
    0xBC, 0x74, 0x2A, 0xBC, 0x76, 0x2D, 0xBC, 0x77, 0x2F, 0xBC, 0x78, 0x31,
    0xBC, 0x78, 0x33, 0xBC, 0x78, 0x33, 0xBC, 0x78, 0x34, 0xBC, 0x78, 0x35,
    0xBC, 0x79, 0x36, 0xBB, 0x79, 0x37, 0xBF, 0x80, 0x43, 0xEA, 0xD1, 0xB3,
    0xE1, 0xC0, 0x9D, 0xBC, 0x7D, 0x42, 0xBB, 0x7D, 0x43, 0xBB, 0x7E, 0x46,
    0xBB, 0x7F, 0x48, 0xB1, 0x78, 0x45, 0x90, 0x5C, 0x34, 0xBB, 0x7F, 0x4A,
    0xBA, 0x7E, 0x49, 0xBB, 0x7E, 0x47, 0xBA, 0x7C, 0x43, 0xBA, 0x7A, 0x3F,
    0xB9, 0x77, 0x3A, 0xB8, 0x75, 0x35, 0xB7, 0x72, 0x2F, 0xB7, 0x70, 0x29,
    0xB6, 0x6D, 0x24, 0xBF, 0x7C, 0x38, 0xF6, 0xE6, 0xCF, 0xFC, 0xF0, 0xDF,
    0xC4, 0x84, 0x42, 0xB2, 0x62, 0x10, 0xB2, 0x61, 0x0F, 0xB1, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D,
    0xB2, 0x61, 0x0E, 0xB3, 0x62, 0x0E, 0xB3, 0x61, 0x0D, 0x87, 0x47, 0x0F,
    0x71, 0x4C, 0x39, 0xAA, 0x94, 0x88, 0x69, 0x39, 0x19, 0x9F, 0x57, 0x0E,
    0xB7, 0x66, 0x0E, 0xB8, 0x67, 0x0E, 0xAC, 0x60, 0x10, 0x86, 0x66, 0x53,
    0xFC, 0xFB, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE2, 0xDA, 0xD6,
    0x62, 0x33, 0x16, 0xAC, 0x5D, 0x0D, 0xAF, 0x5E, 0x0C, 0xAE, 0x5D, 0x0C,
    0xAE, 0x5D, 0x0C, 0xAE, 0x5C, 0x0D, 0xAD, 0x5C, 0x0D, 0xAD, 0x5C, 0x0D,
    0xAD, 0x5C, 0x0D, 0xAE, 0x5C, 0x0D, 0xAE, 0x5D, 0x0D, 0xAE, 0x5D, 0x0D,
    0xAF, 0x5E, 0x0D, 0xB0, 0x5F, 0x0D, 0xB1, 0x5F, 0x0D, 0xB1, 0x60, 0x0D,
    0xB3, 0x62, 0x0F, 0xB4, 0x64, 0x11, 0xB5, 0x66, 0x13, 0xB6, 0x67, 0x15,
    0xB7, 0x69, 0x17, 0xB8, 0x6B, 0x19, 0xB9, 0x6C, 0x1B, 0xB9, 0x6D, 0x1D,
    0xBA, 0x6E, 0x1E, 0xBB, 0x6F, 0x1E, 0xBB, 0x70, 0x1E, 0xBB, 0x70, 0x1E,
    0xBC, 0x70, 0x1D, 0xBC, 0x70, 0x1C, 0xBC, 0x6F, 0x1A, 0xBD, 0x6F, 0x1A,
    0xBD, 0x6F, 0x19, 0xB5, 0x6A, 0x19, 0xAB, 0x64, 0x19, 0xBD, 0x70, 0x1C,
    0xBC, 0x71, 0x1E, 0xBD, 0x72, 0x20, 0xBD, 0x73, 0x23, 0xBC, 0x73, 0x25,
    0xBD, 0x74, 0x27, 0xBD, 0x74, 0x29, 0xBD, 0x76, 0x2C, 0xBC, 0x77, 0x2D,
    0xBC, 0x77, 0x2E, 0xBB, 0x77, 0x2F, 0xBC, 0x77, 0x30, 0xBD, 0x77, 0x31,
    0xBC, 0x77, 0x32, 0xBB, 0x78, 0x33, 0xCB, 0x96, 0x5F, 0xE3, 0xC2, 0x9F,
    0xC3, 0x88, 0x4E, 0xBC, 0x7B, 0x3D, 0xBB, 0x7C, 0x40, 0xBB, 0x7D, 0x42,
    0xBA, 0x7C, 0x43, 0x8D, 0x59, 0x2F, 0xB5, 0x79, 0x42, 0xBC, 0x7E, 0x44,
    0xBB, 0x7D, 0x42, 0xBA, 0x7B, 0x3F, 0xBA, 0x79, 0x3C, 0xB9, 0x77, 0x38,
    0xB9, 0x75, 0x33, 0xB8, 0x72, 0x2D, 0xB8, 0x70, 0x27, 0xB7, 0x6D, 0x23,
    0xB9, 0x70, 0x26, 0xEC, 0xD2, 0xB3, 0xFE, 0xF5, 0xE6, 0xEF, 0xD8, 0xBB,
    0xB6, 0x69, 0x1A, 0xB2, 0x62, 0x10, 0xB2, 0x61, 0x0D, 0xB1, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D,
    0xB2, 0x61, 0x0E, 0xB2, 0x62, 0x0E, 0xAB, 0x5D, 0x0E, 0x60, 0x2F, 0x11,
    0x5C, 0x31, 0x1B, 0x75, 0x3E, 0x12, 0xB0, 0x61, 0x0E, 0xB7, 0x66, 0x0E,
    0xB8, 0x66, 0x0E, 0xB9, 0x67, 0x0E, 0x83, 0x4C, 0x1C, 0xD3, 0xC8, 0xC2,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x97, 0x7C, 0x6E, 0x85, 0x46, 0x10, 0xB0, 0x5F, 0x0D, 0xAF, 0x5E, 0x0C,
    0xAF, 0x5E, 0x0C, 0xAE, 0x5D, 0x0C, 0xAE, 0x5D, 0x0D, 0xAE, 0x5D, 0x0D,
    0xAE, 0x5D, 0x0D, 0xAE, 0x5D, 0x0D, 0xAE, 0x5D, 0x0D, 0xAF, 0x5E, 0x0D,
    0xAF, 0x5E, 0x0D, 0xB0, 0x5F, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D,
    0xB3, 0x62, 0x0E, 0xB4, 0x64, 0x10, 0xB5, 0x65, 0x11, 0xB6, 0x67, 0x13,
    0xB7, 0x68, 0x15, 0xB8, 0x6A, 0x16, 0xB8, 0x6B, 0x18, 0xB9, 0x6C, 0x1A,
    0xBA, 0x6E, 0x1A, 0xBB, 0x6E, 0x1B, 0xBB, 0x6F, 0x1C, 0xBC, 0x6F, 0x1B,
    0xBC, 0x6F, 0x1B, 0xBC, 0x6F, 0x19, 0xBC, 0x6F, 0x18, 0xBD, 0x6F, 0x18,
    0xBD, 0x70, 0x19, 0xAB, 0x64, 0x18, 0xB6, 0x6B, 0x19, 0xBD, 0x70, 0x1B,
    0xBD, 0x71, 0x1D, 0xBC, 0x71, 0x1F, 0xBD, 0x72, 0x21, 0xBD, 0x73, 0x23,
    0xBC, 0x73, 0x25, 0xBD, 0x74, 0x27, 0xBD, 0x74, 0x28, 0xBC, 0x74, 0x29,
    0xBC, 0x76, 0x2A, 0xBC, 0x76, 0x2B, 0xBC, 0x76, 0x2C, 0xBB, 0x76, 0x2D,
    0xBC, 0x76, 0x2D, 0xBC, 0x77, 0x2F, 0xC7, 0x8C, 0x4F, 0xC5, 0x8A, 0x4E,
    0xBC, 0x79, 0x36, 0xBC, 0x7A, 0x39, 0xBC, 0x7B, 0x3C, 0xBB, 0x7B, 0x3D,
    0x9A, 0x62, 0x31, 0xA7, 0x6C, 0x37, 0xBA, 0x7B, 0x3F, 0xBB, 0x7B, 0x3D,
    0xBB, 0x7A, 0x3B, 0xBB, 0x79, 0x38, 0xBA, 0x77, 0x34, 0xBA, 0x75, 0x30,
    0xB9, 0x72, 0x2C, 0xB8, 0x6F, 0x25, 0xB8, 0x6E, 0x21, 0xB8, 0x6D, 0x1E,
    0xDF, 0xB8, 0x8C, 0xFE, 0xF4, 0xE4, 0xF4, 0xE0, 0xC7, 0xBD, 0x76, 0x2C,
    0xB3, 0x63, 0x10, 0xB3, 0x62, 0x0F, 0xB2, 0x61, 0x0D, 0xB2, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D,
    0xB2, 0x61, 0x0D, 0xB1, 0x60, 0x0D, 0x78, 0x3E, 0x0F, 0x61, 0x31, 0x11,
    0x93, 0x50, 0x10, 0xB4, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E,
    0xB8, 0x67, 0x0E, 0xAA, 0x5F, 0x10, 0x89, 0x69, 0x57, 0xFE, 0xFE, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF1, 0xEE, 0xEC, 0x64, 0x37, 0x1D, 0xA7, 0x5A, 0x0D, 0xB0, 0x5F, 0x0D,
    0xB0, 0x5E, 0x0D, 0xAF, 0x5E, 0x0D, 0xAF, 0x5E, 0x0D, 0xAF, 0x5D, 0x0D,
    0xAF, 0x5D, 0x0D, 0xAF, 0x5D, 0x0D, 0xAF, 0x5E, 0x0D, 0xAF, 0x5E, 0x0D,
    0xB0, 0x5F, 0x0D, 0xB1, 0x5F, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D,
    0xB3, 0x62, 0x0E, 0xB4, 0x63, 0x0E, 0xB5, 0x65, 0x10, 0xB6, 0x66, 0x12,
    0xB7, 0x68, 0x13, 0xB8, 0x69, 0x14, 0xB8, 0x6A, 0x16, 0xB9, 0x6B, 0x17,
    0xBA, 0x6C, 0x17, 0xBA, 0x6D, 0x18, 0xBB, 0x6E, 0x19, 0xBC, 0x6E, 0x18,
    0xBC, 0x6E, 0x18, 0xBC, 0x6F, 0x17, 0xBD, 0x6E, 0x16, 0xBD, 0x6E, 0x16,
    0xBE, 0x70, 0x18, 0xA5, 0x60, 0x17, 0xBB, 0x6E, 0x19, 0xBD, 0x70, 0x1A,
    0xBD, 0x70, 0x1C, 0xBD, 0x71, 0x1E, 0xBC, 0x71, 0x20, 0xBD, 0x72, 0x21,
    0xBD, 0x73, 0x23, 0xBD, 0x73, 0x24, 0xBD, 0x74, 0x25, 0xBD, 0x73, 0x26,
    0xBD, 0x73, 0x26, 0xBC, 0x74, 0x27, 0xBC, 0x74, 0x27, 0xBC, 0x75, 0x28,
    0xBB, 0x75, 0x29, 0xBC, 0x75, 0x2B, 0xBD, 0x76, 0x2E, 0xBC, 0x77, 0x30,
    0xBC, 0x77, 0x32, 0xBC, 0x78, 0x35, 0xBB, 0x78, 0x37, 0x9A, 0x60, 0x2D,
    0x9C, 0x62, 0x2E, 0xBB, 0x7A, 0x3A, 0xBB, 0x7A, 0x39, 0xBB, 0x79, 0x37,
    0xBB, 0x78, 0x34, 0xBB, 0x76, 0x31, 0xBA, 0x74, 0x2D, 0xBA, 0x73, 0x29,
    0xB9, 0x70, 0x25, 0xB9, 0x6E, 0x1F, 0xB8, 0x6B, 0x1B, 0xCE, 0x98, 0x5C,
    0xFC, 0xF0, 0xDF, 0xF7, 0xE6, 0xCF, 0xC2, 0x7F, 0x37, 0xB4, 0x64, 0x10,
    0xB3, 0x63, 0x0F, 0xB3, 0x61, 0x0E, 0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D,
    0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xA7, 0x5B, 0x0D, 0x9E, 0x57, 0x0E,
    0x93, 0x51, 0x0F, 0x85, 0x47, 0x0F, 0x8B, 0x4A, 0x0F, 0xAE, 0x60, 0x0D,
    0xB5, 0x64, 0x0D, 0xB5, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E,
    0xB9, 0x68, 0x0F, 0x80, 0x4C, 0x20, 0xD4, 0xC9, 0xC3, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xB6, 0xA3, 0x99, 0x72, 0x3B, 0x10, 0xB0, 0x60, 0x0D,
    0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D, 0xAF, 0x5E, 0x0D,
    0xAF, 0x5E, 0x0D, 0xAF, 0x5E, 0x0D, 0xAF, 0x5E, 0x0D, 0xB0, 0x5F, 0x0D,
    0xB0, 0x5F, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D,
    0xB3, 0x62, 0x0D, 0xB4, 0x63, 0x0D, 0xB5, 0x64, 0x0F, 0xB6, 0x66, 0x10,
    0xB7, 0x67, 0x11, 0xB8, 0x69, 0x12, 0xB9, 0x6A, 0x14, 0xB9, 0x6B, 0x15,
    0xBA, 0x6C, 0x15, 0xBB, 0x6C, 0x15, 0xBB, 0x6D, 0x16, 0xBC, 0x6D, 0x16,
    0xBC, 0x6D, 0x16, 0xBC, 0x6E, 0x15, 0xBD, 0x6D, 0x15, 0xBD, 0x6E, 0x15,
    0xBD, 0x6E, 0x15, 0xA2, 0x5D, 0x15, 0xBD, 0x6F, 0x17, 0xBD, 0x6F, 0x19,
    0xBC, 0x70, 0x1B, 0xBD, 0x70, 0x1C, 0xBC, 0x71, 0x1E, 0xBD, 0x71, 0x1F,
    0xBC, 0x72, 0x20, 0xBC, 0x72, 0x21, 0xBC, 0x72, 0x22, 0xBC, 0x72, 0x22,
    0xBC, 0x72, 0x22, 0xBC, 0x72, 0x22, 0xBC, 0x72, 0x22, 0xBC, 0x73, 0x24,
    0xBC, 0x73, 0x24, 0xBC, 0x74, 0x26, 0xBB, 0x74, 0x29, 0xBC, 0x75, 0x2B,
    0xBD, 0x76, 0x2E, 0xBC, 0x77, 0x30, 0x9F, 0x63, 0x2A, 0x92, 0x58, 0x26,
    0xBB, 0x78, 0x34, 0xBC, 0x78, 0x33, 0xBC, 0x77, 0x33, 0xBC, 0x76, 0x30,
    0xBB, 0x75, 0x2E, 0xBA, 0x74, 0x2A, 0xBB, 0x72, 0x26, 0xBA, 0x70, 0x22,
    0xB9, 0x6D, 0x1F, 0xB9, 0x6C, 0x1A, 0xC2, 0x7E, 0x35, 0xF6, 0xE4, 0xCC,
    0xF9, 0xEB, 0xD6, 0xC8, 0x8A, 0x47, 0xB5, 0x65, 0x10, 0xB4, 0x63, 0x0E,
    0xB4, 0x62, 0x0E, 0xB3, 0x62, 0x0E, 0xB3, 0x61, 0x0D, 0xB2, 0x61, 0x0D,
    0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xAF, 0x5F, 0x0D, 0xAC, 0x5E, 0x0D,
    0xB2, 0x61, 0x0E, 0xB3, 0x62, 0x0E, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D,
    0xB5, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E, 0xB8, 0x67, 0x0E,
    0x9B, 0x56, 0x11, 0x8F, 0x72, 0x63, 0xFD, 0xFD, 0xFD, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x84, 0x64, 0x53, 0x92, 0x4D, 0x0E,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D,
    0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D, 0xB0, 0x5F, 0x0D,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D, 0xB3, 0x62, 0x0D,
    0xB3, 0x62, 0x0D, 0xB4, 0x63, 0x0D, 0xB5, 0x64, 0x0E, 0xB6, 0x66, 0x0F,
    0xB7, 0x67, 0x10, 0xB8, 0x68, 0x11, 0xB9, 0x69, 0x12, 0xB9, 0x6A, 0x13,
    0xBA, 0x6B, 0x12, 0xBB, 0x6C, 0x13, 0xBB, 0x6D, 0x14, 0xBC, 0x6D, 0x14,
    0xBC, 0x6D, 0x14, 0xBC, 0x6D, 0x13, 0xBC, 0x6D, 0x13, 0xBD, 0x6D, 0x13,
    0xBC, 0x6D, 0x14, 0xA5, 0x5F, 0x15, 0xBD, 0x6E, 0x16, 0xBD, 0x6F, 0x18,
    0xBD, 0x70, 0x19, 0xBC, 0x70, 0x1B, 0xBC, 0x70, 0x1C, 0xBD, 0x71, 0x1D,
    0xBC, 0x71, 0x1E, 0xBD, 0x71, 0x1E, 0xBD, 0x71, 0x1F, 0xBD, 0x71, 0x1F,
    0xBD, 0x71, 0x1E, 0xBD, 0x71, 0x1E, 0xBD, 0x70, 0x1E, 0xBC, 0x70, 0x1F,
    0xBC, 0x71, 0x20, 0xBD, 0x73, 0x22, 0xBC, 0x73, 0x24, 0xBC, 0x74, 0x26,
    0xBC, 0x75, 0x29, 0xA9, 0x68, 0x27, 0x91, 0x56, 0x22, 0xBC, 0x76, 0x2E,
    0xBC, 0x76, 0x2E, 0xBC, 0x76, 0x2D, 0xBB, 0x75, 0x2C, 0xBB, 0x74, 0x2A,
    0xBB, 0x73, 0x27, 0xBB, 0x72, 0x24, 0xBB, 0x70, 0x20, 0xBA, 0x6E, 0x1C,
    0xB9, 0x6C, 0x19, 0xB9, 0x6C, 0x18, 0xE8, 0xC9, 0xA4, 0xFD, 0xF2, 0xE2,
    0xEF, 0xD6, 0xB7, 0xDB, 0xAE, 0x7C, 0xD7, 0xA7, 0x72, 0xD2, 0x9E, 0x64,
    0xC9, 0x8C, 0x4B, 0xB7, 0x69, 0x17, 0xB3, 0x61, 0x0E, 0xB3, 0x61, 0x0D,
    0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xB3, 0x61, 0x0D,
    0xB3, 0x62, 0x0E, 0xB3, 0x62, 0x0E, 0xB4, 0x63, 0x0D, 0xB5, 0x64, 0x0D,
    0xB5, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E, 0xB0, 0x62, 0x0E,
    0x74, 0x4A, 0x2D, 0xEC, 0xE7, 0xE4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEC, 0xE7, 0xE4, 0x6B, 0x40, 0x28,
    0xA6, 0x5A, 0x0D, 0xB2, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xB3, 0x62, 0x0E,
    0xB4, 0x63, 0x0D, 0xB5, 0x64, 0x0D, 0xB6, 0x64, 0x0E, 0xB6, 0x65, 0x0E,
    0xB7, 0x66, 0x0F, 0xB8, 0x68, 0x0F, 0xB9, 0x69, 0x11, 0xBA, 0x6A, 0x11,
    0xBA, 0x6A, 0x11, 0xBB, 0x6B, 0x12, 0xBB, 0x6C, 0x12, 0xBC, 0x6C, 0x12,
    0xBC, 0x6D, 0x12, 0xBC, 0x6C, 0x12, 0xBC, 0x6D, 0x12, 0xBC, 0x6D, 0x12,
    0xBC, 0x6D, 0x13, 0xA6, 0x5F, 0x15, 0xBD, 0x6E, 0x15, 0xBD, 0x6F, 0x17,
    0xBD, 0x6F, 0x18, 0xBC, 0x6F, 0x1A, 0xBD, 0x70, 0x1B, 0xBD, 0x70, 0x1B,
    0xBC, 0x70, 0x1B, 0xBD, 0x70, 0x1C, 0xBD, 0x70, 0x1C, 0xBD, 0x70, 0x1B,
    0xBD, 0x70, 0x1B, 0xBC, 0x70, 0x1B, 0xBD, 0x70, 0x1A, 0xBC, 0x6F, 0x1A,
    0xBC, 0x6F, 0x1C, 0xBC, 0x70, 0x1D, 0xBC, 0x71, 0x1F, 0xBD, 0x72, 0x21,
    0xAC, 0x68, 0x21, 0x88, 0x4F, 0x1C, 0xB9, 0x73, 0x27, 0xBB, 0x74, 0x28,
    0xBC, 0x74, 0x29, 0xBC, 0x74, 0x28, 0xBC, 0x73, 0x26, 0xBC, 0x72, 0x24,
    0xBC, 0x71, 0x22, 0xBB, 0x70, 0x1F, 0xBB, 0x6F, 0x1B, 0xBA, 0x6C, 0x17,
    0xB9, 0x6B, 0x15, 0xBB, 0x6E, 0x19, 0xEF, 0xD6, 0xB7, 0xFE, 0xF4, 0xE3,
    0xFE, 0xF4, 0xE4, 0xFE, 0xF4, 0xE5, 0xFE, 0xF4, 0xE5, 0xFD, 0xF4, 0xE4,
    0xFC, 0xF2, 0xE0, 0xE1, 0xBB, 0x90, 0xB3, 0x63, 0x0E, 0xB3, 0x61, 0x0E,
    0xB3, 0x61, 0x0E, 0xB3, 0x61, 0x0E, 0xB3, 0x61, 0x0E, 0xB3, 0x62, 0x0E,
    0xB3, 0x62, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D, 0xB5, 0x64, 0x0E,
    0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E, 0xB6, 0x65, 0x0E, 0x78, 0x42, 0x16,
    0xC3, 0xB4, 0xAC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCB, 0xBE, 0xB7,
    0x6B, 0x36, 0x12, 0xB1, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xB2, 0x60, 0x0D,
    0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB1, 0x60, 0x0D, 0xB2, 0x60, 0x0D,
    0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xB3, 0x62, 0x0E, 0xB4, 0x63, 0x0D,
    0xB4, 0x63, 0x0D, 0xB5, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E,
    0xB8, 0x66, 0x0E, 0xB8, 0x67, 0x0F, 0xB9, 0x68, 0x10, 0xBA, 0x69, 0x0F,
    0xBA, 0x6A, 0x0F, 0xBB, 0x6B, 0x11, 0xBC, 0x6C, 0x11, 0xBC, 0x6C, 0x11,
    0xBC, 0x6C, 0x11, 0xBD, 0x6C, 0x11, 0xBD, 0x6C, 0x11, 0xBD, 0x6D, 0x11,
    0xBC, 0x6C, 0x12, 0xAB, 0x62, 0x14, 0xBD, 0x6E, 0x14, 0xBD, 0x6E, 0x16,
    0xBC, 0x6E, 0x17, 0xBD, 0x6F, 0x18, 0xBD, 0x6F, 0x19, 0xBD, 0x6F, 0x19,
    0xBD, 0x6F, 0x19, 0xBD, 0x6F, 0x19, 0xBD, 0x6F, 0x19, 0xBD, 0x6F, 0x19,
    0xBD, 0x6F, 0x18, 0xBC, 0x6F, 0x17, 0xBD, 0x6F, 0x17, 0xBD, 0x6F, 0x17,
    0xBC, 0x6F, 0x18, 0xBC, 0x6E, 0x19, 0xBC, 0x6F, 0x1B, 0xA5, 0x61, 0x1B,
    0x8B, 0x50, 0x19, 0xB9, 0x70, 0x21, 0xBC, 0x73, 0x22, 0xBD, 0x73, 0x23,
    0xBC, 0x73, 0x23, 0xBC, 0x73, 0x22, 0xBC, 0x72, 0x21, 0xBC, 0x71, 0x1F,
    0xBC, 0x70, 0x1D, 0xBB, 0x6E, 0x1A, 0xBA, 0x6C, 0x16, 0xBA, 0x6B, 0x13,
    0xBA, 0x6A, 0x12, 0xB9, 0x69, 0x10, 0xC0, 0x77, 0x27, 0xCE, 0x94, 0x53,
    0xD3, 0x9E, 0x62, 0xD6, 0xA5, 0x6D, 0xD9, 0xAB, 0x77, 0xED, 0xD4, 0xB4,
    0xFD, 0xF2, 0xE1, 0xE7, 0xC7, 0xA1, 0xB4, 0x63, 0x0E, 0xB3, 0x62, 0x0E,
    0xB3, 0x62, 0x0E, 0xB3, 0x62, 0x0E, 0xB3, 0x62, 0x0E, 0xB3, 0x62, 0x0E,
    0xB4, 0x62, 0x0D, 0xB4, 0x63, 0x0D, 0xB5, 0x64, 0x0D, 0xB5, 0x64, 0x0E,
    0xB6, 0x65, 0x0E, 0xB6, 0x66, 0x0E, 0x85, 0x48, 0x11, 0x9A, 0x80, 0x72,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xAE, 0x99, 0x8F, 0x7B, 0x40, 0x10, 0xB3, 0x62, 0x0D, 0xB3, 0x62, 0x0D,
    0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D, 0xB2, 0x61, 0x0D,
    0xB3, 0x61, 0x0D, 0xB3, 0x62, 0x0E, 0xB4, 0x62, 0x0D, 0xB4, 0x63, 0x0D,
    0xB5, 0x63, 0x0D, 0xB6, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E,
    0xB8, 0x67, 0x0E, 0xB9, 0x68, 0x0E, 0xB9, 0x68, 0x0F, 0xBA, 0x69, 0x0E,
    0xBB, 0x6A, 0x0F, 0xBB, 0x6A, 0x10, 0xBC, 0x6B, 0x10, 0xBC, 0x6C, 0x10,
    0xBC, 0x6B, 0x10, 0xBD, 0x6C, 0x10, 0xBC, 0x6C, 0x10, 0xBC, 0x6C, 0x10,
    0xBD, 0x6C, 0x11, 0xAF, 0x65, 0x14, 0xBC, 0x6D, 0x13, 0xBC, 0x6D, 0x14,
    0xBD, 0x6E, 0x15, 0xBD, 0x6E, 0x16, 0xBD, 0x6F, 0x17, 0xBD, 0x6F, 0x17,
    0xBD, 0x6F, 0x17, 0xBD, 0x6F, 0x17, 0xBC, 0x6E, 0x16, 0xBD, 0x6E, 0x16,
    0xBD, 0x6E, 0x15, 0xBD, 0x6E, 0x15, 0xBD, 0x6E, 0x14, 0xBD, 0x6E, 0x14,
    0xBC, 0x6E, 0x15, 0xBD, 0x6E, 0x16, 0xA1, 0x5C, 0x16, 0x8D, 0x4F, 0x16,
    0xBC, 0x6F, 0x1A, 0xBC, 0x70, 0x1C, 0xBC, 0x70, 0x1D, 0xBC, 0x71, 0x1E,
    0xBC, 0x71, 0x1E, 0xBC, 0x71, 0x1D, 0xBC, 0x71, 0x1C, 0xBC, 0x6F, 0x1B,
    0xBC, 0x6E, 0x19, 0xBB, 0x6D, 0x16, 0xBB, 0x6C, 0x13, 0xBA, 0x6A, 0x11,
    0xBA, 0x6A, 0x0F, 0xB9, 0x68, 0x0F, 0xB9, 0x68, 0x0E, 0xB8, 0x67, 0x0E,
    0xB7, 0x66, 0x0E, 0xBA, 0x6D, 0x18, 0xDC, 0xB1, 0x80, 0xFA, 0xEC, 0xD8,
    0xF4, 0xE1, 0xC8, 0xC3, 0x81, 0x39, 0xB4, 0x63, 0x0D, 0xB3, 0x63, 0x0E,
    0xB3, 0x62, 0x0E, 0xB3, 0x63, 0x0E, 0xB4, 0x63, 0x0E, 0xB4, 0x63, 0x0E,
    0xB4, 0x63, 0x0D, 0xB5, 0x64, 0x0D, 0xB5, 0x64, 0x0E, 0xB6, 0x65, 0x0E,
    0xB7, 0x65, 0x0E, 0x91, 0x4F, 0x10, 0x7D, 0x5A, 0x47, 0xF7, 0xF4, 0xF3,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFD, 0xFD, 0xFD, 0x88, 0x68, 0x58, 0x93, 0x4F, 0x0F, 0xB3, 0x62, 0x0D,
    0xB3, 0x62, 0x0D, 0xB3, 0x62, 0x0D, 0xB3, 0x62, 0x0E, 0xB3, 0x62, 0x0E,
    0xB3, 0x62, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D,
    0xB5, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E,
    0xB8, 0x67, 0x0E, 0xB9, 0x68, 0x0F, 0xB9, 0x69, 0x0E, 0xBA, 0x69, 0x0E,
    0xBB, 0x6A, 0x0E, 0xBB, 0x6A, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBC, 0x6C, 0x10,
    0xBC, 0x6C, 0x10, 0xB2, 0x66, 0x13, 0xBD, 0x6D, 0x13, 0xBD, 0x6D, 0x13,
    0xBD, 0x6D, 0x14, 0xBD, 0x6E, 0x15, 0xBD, 0x6E, 0x15, 0xBD, 0x6E, 0x15,
    0xBD, 0x6E, 0x15, 0xBD, 0x6E, 0x15, 0xBD, 0x6E, 0x14, 0xBC, 0x6D, 0x14,
    0xBD, 0x6D, 0x13, 0xBC, 0x6D, 0x12, 0xBC, 0x6D, 0x12, 0xBD, 0x6D, 0x12,
    0xBC, 0x6C, 0x12, 0x98, 0x56, 0x13, 0x93, 0x53, 0x13, 0xBC, 0x6D, 0x16,
    0xBD, 0x6E, 0x17, 0xBC, 0x6E, 0x18, 0xBD, 0x6E, 0x19, 0xBD, 0x6E, 0x19,
    0xBC, 0x6F, 0x19, 0xBC, 0x6F, 0x19, 0xBC, 0x6F, 0x18, 0xBC, 0x6E, 0x17,
    0xBC, 0x6D, 0x15, 0xBB, 0x6C, 0x14, 0xBB, 0x6B, 0x12, 0xBB, 0x6A, 0x0F,
    0xBA, 0x69, 0x0E, 0xB9, 0x68, 0x0E, 0xB9, 0x68, 0x0F, 0xB8, 0x67, 0x0E,
    0xC4, 0x80, 0x35, 0xEB, 0xCF, 0xAC, 0xFA, 0xEC, 0xD9, 0xEB, 0xCF, 0xAE,
    0xC2, 0x7D, 0x32, 0xB5, 0x64, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D,
    0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D,
    0xB5, 0x64, 0x0D, 0xB5, 0x64, 0x0E, 0xB6, 0x64, 0x0E, 0xB6, 0x65, 0x0E,
    0x94, 0x51, 0x10, 0x71, 0x49, 0x32, 0xE8, 0xE2, 0xDF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xEE, 0xEA, 0xE8, 0x6D, 0x44, 0x2D, 0x9F, 0x56, 0x0D,
    0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D,
    0xB4, 0x63, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x64, 0x0D, 0xB5, 0x64, 0x0E,
    0xB6, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E, 0xB8, 0x67, 0x0E,
    0xB8, 0x67, 0x0E, 0xB9, 0x68, 0x0F, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E,
    0xBB, 0x6A, 0x0E, 0xBB, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x10, 0xBB, 0x6C, 0x11, 0xBD, 0x6D, 0x12, 0xBC, 0x6D, 0x12,
    0xBD, 0x6D, 0x12, 0xBD, 0x6D, 0x13, 0xBD, 0x6D, 0x14, 0xBD, 0x6D, 0x14,
    0xBD, 0x6D, 0x14, 0xBD, 0x6D, 0x13, 0xBD, 0x6D, 0x13, 0xBD, 0x6D, 0x12,
    0xBD, 0x6D, 0x11, 0xBC, 0x6C, 0x11, 0xBC, 0x6C, 0x10, 0xB4, 0x67, 0x10,
    0x89, 0x4B, 0x11, 0xA3, 0x5C, 0x11, 0xBD, 0x6D, 0x12, 0xBD, 0x6D, 0x13,
    0xBD, 0x6D, 0x14, 0xBD, 0x6E, 0x15, 0xBD, 0x6E, 0x15, 0xBC, 0x6D, 0x16,
    0xBC, 0x6D, 0x16, 0xBD, 0x6D, 0x16, 0xBC, 0x6D, 0x15, 0xBC, 0x6D, 0x14,
    0xBC, 0x6C, 0x13, 0xBC, 0x6C, 0x11, 0xBB, 0x6B, 0x10, 0xBB, 0x6A, 0x0F,
    0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x6B, 0x12, 0xD2, 0x9B, 0x5D,
    0xF3, 0xDD, 0xC2, 0xF5, 0xE2, 0xC8, 0xD8, 0xA8, 0x72, 0xB9, 0x6B, 0x17,
    0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0D, 0xB4, 0x63, 0x0D,
    0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0D, 0xB5, 0x64, 0x0D,
    0xB5, 0x64, 0x0E, 0xB6, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0x91, 0x4E, 0x10,
    0x6A, 0x42, 0x2C, 0xDD, 0xD4, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD, 0xD4, 0xD0, 0x65, 0x37, 0x1D,
    0xA7, 0x5B, 0x0E, 0xB4, 0x64, 0x0D, 0xB4, 0x63, 0x0D, 0xB4, 0x64, 0x0D,
    0xB4, 0x64, 0x0D, 0xB5, 0x64, 0x0D, 0xB5, 0x64, 0x0E, 0xB6, 0x64, 0x0E,
    0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E, 0xB8, 0x67, 0x0E,
    0xB9, 0x68, 0x0F, 0xB9, 0x68, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E,
    0xBB, 0x6A, 0x0E, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6D, 0x11, 0xBE, 0x6E, 0x13, 0xBD, 0x6D, 0x12,
    0xBD, 0x6C, 0x11, 0xBC, 0x6D, 0x12, 0xBD, 0x6D, 0x12, 0xBD, 0x6D, 0x12,
    0xBD, 0x6D, 0x12, 0xBD, 0x6D, 0x12, 0xBD, 0x6D, 0x11, 0xBD, 0x6D, 0x11,
    0xBD, 0x6C, 0x10, 0xBB, 0x6B, 0x10, 0x9B, 0x57, 0x10, 0x8D, 0x4E, 0x11,
    0xB3, 0x66, 0x10, 0xBC, 0x6C, 0x0F, 0xBD, 0x6C, 0x11, 0xBD, 0x6D, 0x11,
    0xBD, 0x6D, 0x11, 0xBC, 0x6C, 0x12, 0xBD, 0x6D, 0x13, 0xBD, 0x6D, 0x13,
    0xBD, 0x6D, 0x13, 0xBD, 0x6D, 0x13, 0xBD, 0x6C, 0x12, 0xBC, 0x6D, 0x12,
    0xBC, 0x6C, 0x11, 0xBC, 0x6B, 0x10, 0xBB, 0x6B, 0x0F, 0xBB, 0x6A, 0x0E,
    0xBA, 0x69, 0x0E, 0xBB, 0x6A, 0x0F, 0xD5, 0xA2, 0x66, 0xEF, 0xD6, 0xB7,
    0xE3, 0xBD, 0x91, 0xC2, 0x7C, 0x2E, 0xB7, 0x66, 0x0E, 0xB6, 0x65, 0x0E,
    0xB6, 0x65, 0x0E, 0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0E,
    0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0E,
    0xB5, 0x64, 0x0E, 0xB5, 0x65, 0x0E, 0x89, 0x49, 0x10, 0x63, 0x39, 0x22,
    0xCD, 0xC0, 0xBA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0xBB, 0xB4,
    0x67, 0x37, 0x17, 0xAA, 0x5E, 0x0E, 0xB5, 0x64, 0x0E, 0xB5, 0x64, 0x0E,
    0xB5, 0x64, 0x0E, 0xB6, 0x64, 0x0E, 0xB6, 0x65, 0x0E, 0xB6, 0x65, 0x0E,
    0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E, 0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E,
    0xB9, 0x68, 0x0F, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xBB, 0x6A, 0x0E,
    0xBB, 0x6A, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x11, 0xBD, 0x6D, 0x12,
    0xBD, 0x6D, 0x10, 0xBD, 0x6C, 0x11, 0xBD, 0x6D, 0x11, 0xBD, 0x6D, 0x11,
    0xBD, 0x6D, 0x11, 0xBD, 0x6C, 0x10, 0xBD, 0x6C, 0x10, 0xBA, 0x6A, 0x10,
    0xA6, 0x5D, 0x10, 0x97, 0x54, 0x10, 0xAE, 0x63, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6C, 0x0F,
    0xBD, 0x6C, 0x10, 0xBD, 0x6D, 0x10, 0xBD, 0x6D, 0x11, 0xBD, 0x6D, 0x11,
    0xBD, 0x6D, 0x11, 0xBD, 0x6C, 0x11, 0xBD, 0x6C, 0x10, 0xBC, 0x6C, 0x10,
    0xBC, 0x6C, 0x10, 0xBC, 0x6B, 0x0F, 0xBB, 0x6B, 0x0F, 0xBB, 0x6A, 0x0F,
    0xBB, 0x6A, 0x0E, 0xBB, 0x6A, 0x0F, 0xC9, 0x87, 0x3C, 0xC9, 0x88, 0x3F,
    0xBA, 0x6A, 0x12, 0xB8, 0x67, 0x0E, 0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E,
    0xB6, 0x65, 0x0E, 0xB6, 0x65, 0x0E, 0xB6, 0x65, 0x0E, 0xB6, 0x64, 0x0E,
    0xB6, 0x64, 0x0E, 0xB6, 0x64, 0x0E, 0xB6, 0x64, 0x0E, 0xB6, 0x65, 0x0E,
    0xB4, 0x64, 0x0E, 0x80, 0x44, 0x10, 0x65, 0x3D, 0x27, 0xC7, 0xB9, 0xB1,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xBC, 0xAA, 0xA1, 0x68, 0x36, 0x15, 0xAE, 0x60, 0x0E, 0xB6, 0x65, 0x0E,
    0xB6, 0x65, 0x0E, 0xB6, 0x65, 0x0E, 0xB6, 0x65, 0x0E, 0xB7, 0x66, 0x0E,
    0xB7, 0x66, 0x0E, 0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E, 0xB9, 0x68, 0x0F,
    0xB9, 0x68, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xBB, 0x6A, 0x0E,
    0xBB, 0x6A, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6D, 0x10, 0xBE, 0x6E, 0x12,
    0xBC, 0x6C, 0x0F, 0xBC, 0x6C, 0x10, 0xBD, 0x6C, 0x10, 0xBC, 0x6C, 0x10,
    0xBA, 0x6A, 0x10, 0xAD, 0x62, 0x10, 0x9C, 0x57, 0x10, 0x99, 0x55, 0x10,
    0xAC, 0x61, 0x0F, 0xBC, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x10, 0xBD, 0x6C, 0x10,
    0xBD, 0x6C, 0x10, 0xBD, 0x6C, 0x10, 0xBD, 0x6C, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBB, 0x6A, 0x0F,
    0xBB, 0x6A, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xB9, 0x68, 0x0E,
    0xB9, 0x68, 0x0F, 0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E, 0xB7, 0x66, 0x0E,
    0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E, 0xB6, 0x65, 0x0E, 0xB6, 0x65, 0x0E,
    0xB6, 0x65, 0x0E, 0xB6, 0x65, 0x0E, 0xB6, 0x65, 0x0E, 0xB0, 0x61, 0x0E,
    0x75, 0x3E, 0x11, 0x6D, 0x47, 0x33, 0xD7, 0xCD, 0xC8, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xB7, 0xA4, 0x9B, 0x69, 0x36, 0x13, 0xAE, 0x60, 0x0E,
    0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E,
    0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E, 0xB9, 0x68, 0x0E, 0xB9, 0x68, 0x0F,
    0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xBB, 0x6A, 0x0E, 0xBB, 0x6A, 0x0F,
    0xBB, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6C, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xB9, 0x69, 0x0F, 0xA7, 0x5F, 0x12,
    0xAA, 0x60, 0x10, 0xA5, 0x5D, 0x10, 0x9D, 0x58, 0x10, 0x9E, 0x58, 0x10,
    0x9D, 0x58, 0x10, 0xA8, 0x5F, 0x0F, 0xB8, 0x69, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBB, 0x6B, 0x0F,
    0xBB, 0x6A, 0x0F, 0xBB, 0x6A, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E,
    0xB9, 0x68, 0x0E, 0xB9, 0x68, 0x0F, 0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E,
    0xB8, 0x66, 0x0E, 0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E,
    0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E, 0xA3, 0x5A, 0x0F, 0x68, 0x36, 0x15,
    0x86, 0x67, 0x57, 0xEB, 0xE5, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC2, 0xB3, 0xAB, 0x66, 0x36, 0x16,
    0xAA, 0x5E, 0x0E, 0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E,
    0xB8, 0x67, 0x0E, 0xB9, 0x68, 0x0F, 0xB9, 0x68, 0x0F, 0xB9, 0x68, 0x0E,
    0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xBB, 0x6A, 0x0E, 0xBB, 0x6A, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x10, 0xBA, 0x6B, 0x11,
    0xB1, 0x64, 0x0F, 0xB2, 0x65, 0x0F, 0xBB, 0x6A, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x10, 0xBD, 0x6D, 0x0F, 0xBD, 0x6B, 0x0E,
    0xBC, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6C, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0E,
    0xBB, 0x6A, 0x0F, 0xBB, 0x6A, 0x0F, 0xBB, 0x6A, 0x0E, 0xBA, 0x69, 0x0E,
    0xBA, 0x69, 0x0E, 0xB9, 0x68, 0x0E, 0xB9, 0x68, 0x0F, 0xB8, 0x67, 0x0E,
    0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E, 0xB7, 0x66, 0x0E, 0xB7, 0x66, 0x0E,
    0xB5, 0x65, 0x0E, 0x90, 0x4E, 0x10, 0x63, 0x38, 0x21, 0xB8, 0xA5, 0x9C,
    0xFB, 0xF9, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC6, 0xB7, 0xAF,
    0x67, 0x38, 0x1B, 0xA3, 0x5A, 0x0F, 0xB8, 0x67, 0x0E, 0xB9, 0x68, 0x0E,
    0xB9, 0x68, 0x0F, 0xB9, 0x68, 0x0F, 0xB9, 0x68, 0x0E, 0xBA, 0x69, 0x0E,
    0xBA, 0x69, 0x0E, 0xBB, 0x6A, 0x0E, 0xBB, 0x6A, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6D, 0x10, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x10, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBB, 0x6A, 0x0F, 0xBB, 0x6A, 0x0E, 0xBA, 0x69, 0x0E,
    0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xB9, 0x68, 0x0E, 0xB9, 0x68, 0x0F,
    0xB9, 0x68, 0x0E, 0xB8, 0x67, 0x0E, 0xB8, 0x67, 0x0E, 0xAA, 0x5F, 0x0F,
    0x6F, 0x3B, 0x14, 0x8E, 0x70, 0x61, 0xE3, 0xDB, 0xD7, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xD7, 0xCD, 0xC7, 0x6D, 0x45, 0x2E, 0x94, 0x51, 0x0F, 0xB9, 0x68, 0x0F,
    0xB9, 0x68, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E,
    0xBB, 0x6A, 0x0E, 0xBB, 0x6A, 0x0E, 0xBB, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x10,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBC, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F, 0xBE, 0x6D, 0x10,
    0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBB, 0x6A, 0x0F, 0xBB, 0x6A, 0x0E,
    0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xB9, 0x68, 0x0E,
    0xB9, 0x68, 0x0F, 0xB3, 0x64, 0x0F, 0x82, 0x46, 0x11, 0x6F, 0x47, 0x2F,
    0xC1, 0xB1, 0xA9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xF3, 0xEF, 0xEE, 0x83, 0x63, 0x52, 0x7C, 0x42, 0x11,
    0xB4, 0x65, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xBB, 0x6A, 0x0E,
    0xBB, 0x6A, 0x0E, 0xBB, 0x6A, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBE, 0x6D, 0x10, 0xBE, 0x6D, 0x11, 0xBD, 0x6C, 0x10,
    0xBE, 0x6D, 0x10, 0xBD, 0x6C, 0x10, 0xBD, 0x6C, 0x0F, 0xBC, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBE, 0x6D, 0x10,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBB, 0x6B, 0x0F, 0xBB, 0x6A, 0x0F,
    0xBB, 0x6A, 0x0E, 0xBA, 0x69, 0x0E, 0xBA, 0x69, 0x0E, 0xB8, 0x68, 0x0E,
    0x99, 0x55, 0x10, 0x69, 0x39, 0x18, 0x9E, 0x85, 0x78, 0xF4, 0xF1, 0xF0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFD, 0xAF, 0x9A, 0x90,
    0x68, 0x38, 0x18, 0x9F, 0x58, 0x0F, 0xBA, 0x69, 0x0E, 0xBB, 0x6A, 0x0F,
    0xBB, 0x6A, 0x0F, 0xBB, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x10, 0xBD, 0x6C, 0x10, 0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBB, 0x6B, 0x0F,
    0xBB, 0x6A, 0x0F, 0xB9, 0x68, 0x0E, 0x9E, 0x59, 0x10, 0x6E, 0x3C, 0x17,
    0x7D, 0x5A, 0x49, 0xD3, 0xC7, 0xC1, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xE0, 0xD8, 0xD4, 0x7D, 0x5B, 0x49, 0x6B, 0x37, 0x11, 0x95, 0x52, 0x10,
    0xB6, 0x67, 0x10, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6C, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xAF, 0x62, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6B, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xBC, 0x6B, 0x0F, 0xB7, 0x68, 0x0F,
    0x93, 0x52, 0x12, 0x73, 0x44, 0x20, 0x87, 0x68, 0x58, 0xCA, 0xBD, 0xB6,
    0xFD, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xD7, 0xCD, 0xC8, 0x89, 0x6B, 0x5B,
    0x5E, 0x32, 0x1A, 0x74, 0x3D, 0x11, 0x93, 0x51, 0x11, 0xAD, 0x62, 0x10,
    0xBC, 0x6A, 0x0F, 0xBD, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBB, 0x6B, 0x10, 0xB2, 0x67, 0x14, 0x9F, 0x5A, 0x13, 0x8D, 0x4D, 0x11,
    0x7B, 0x41, 0x10, 0x77, 0x3F, 0x10, 0x9C, 0x57, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6B, 0x0F,
    0xBB, 0x6A, 0x0F, 0xAA, 0x60, 0x10, 0x86, 0x4C, 0x17, 0x77, 0x4F, 0x37,
    0xB1, 0x9C, 0x91, 0xE8, 0xE2, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF3, 0xEF, 0xEE, 0xC5, 0xB6, 0xAE, 0x95, 0x7A, 0x6C, 0x6E, 0x48, 0x34,
    0x67, 0x38, 0x19, 0x79, 0x41, 0x12, 0x90, 0x50, 0x11, 0xA2, 0x5C, 0x10,
    0xB4, 0x67, 0x10, 0xB7, 0x69, 0x0F, 0xBA, 0x6A, 0x0F, 0xBC, 0x6B, 0x0F,
    0xB9, 0x69, 0x0F, 0xB6, 0x67, 0x0F, 0xB2, 0x65, 0x10, 0xA2, 0x5B, 0x10,
    0x94, 0x51, 0x10, 0x85, 0x48, 0x11, 0x78, 0x43, 0x17, 0x6E, 0x41, 0x22,
    0x74, 0x4D, 0x35, 0x88, 0x69, 0x59, 0x94, 0x79, 0x6A, 0x63, 0x34, 0x16,
    0x98, 0x54, 0x0F, 0xBB, 0x6B, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBA, 0x6A, 0x0F, 0xAB, 0x62, 0x12, 0x8D, 0x50, 0x15,
    0x72, 0x42, 0x1F, 0x80, 0x5D, 0x4A, 0xBE, 0xAE, 0xA5, 0xF6, 0xF4, 0xF2,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xFD,
    0xEE, 0xEA, 0xE7, 0xD3, 0xC8, 0xC2, 0xBF, 0xAE, 0xA6, 0xA6, 0x90, 0x84,
    0x8D, 0x71, 0x62, 0x81, 0x60, 0x4C, 0x85, 0x61, 0x48, 0x86, 0x5F, 0x45,
    0x82, 0x5F, 0x49, 0x8A, 0x6D, 0x5D, 0x9B, 0x82, 0x75, 0xA5, 0x8F, 0x84,
    0xC0, 0xB1, 0xA9, 0xD5, 0xCB, 0xC6, 0xEC, 0xE8, 0xE5, 0xFB, 0xFA, 0xFA,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0xCB, 0xC6,
    0x78, 0x54, 0x41, 0x73, 0x3C, 0x11, 0x9E, 0x58, 0x0F, 0xB6, 0x68, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F, 0xBD, 0x6C, 0x0F,
    0xBD, 0x6C, 0x0F, 0xB9, 0x69, 0x0F, 0xAB, 0x60, 0x0F, 0x96, 0x53, 0x10,
    0x7D, 0x43, 0x12, 0x6A, 0x3C, 0x1E, 0x7F, 0x5D, 0x4C, 0xA9, 0x93, 0x87,
    0xE0, 0xD8, 0xD4, 0xFD, 0xFC, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFD, 0xFD, 0xFD, 0xCF, 0xC3, 0xBC, 0x85, 0x66, 0x56, 0x5F, 0x32, 0x18,
    0x72, 0x3B, 0x11, 0x89, 0x4A, 0x10, 0x95, 0x52, 0x0F, 0x9A, 0x55, 0x0F,
    0x9C, 0x56, 0x0F, 0x98, 0x54, 0x0F, 0x8F, 0x4E, 0x10, 0x7F, 0x44, 0x11,
    0x6C, 0x38, 0x12, 0x5F, 0x31, 0x17, 0x68, 0x40, 0x2C, 0x94, 0x79, 0x6A,
    0xC4, 0xB5, 0xAD, 0xF1, 0xEE, 0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xEC, 0xE7, 0xE4,
    0xBF, 0xAE, 0xA6, 0xAA, 0x93, 0x88, 0x9B, 0x82, 0x74, 0x8D, 0x70, 0x61,
    0x87, 0x67, 0x58, 0x90, 0x73, 0x65, 0xA1, 0x88, 0x7C, 0xAF, 0x9A, 0x8F,
    0xC6, 0xB7, 0xAF, 0xDB, 0xD2, 0xCD, 0xF9, 0xF8, 0xF7, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

    // 检查BMP数据是否完整
    if (sizeof(logoBMP) >= 54) // 至少包含文件头和DIB头
    {
        // 解析BMP文件头
        BITMAPFILEHEADER* bf = (BITMAPFILEHEADER*)logoBMP;
        BITMAPINFOHEADER* bi = (BITMAPINFOHEADER*)(logoBMP + sizeof(BITMAPFILEHEADER));

        // 验证是否为有效的BMP文件
        if (bf->bfType == 0x4D42 && // "BM"
            bi->biWidth == 128 &&
            bi->biHeight == 128 &&
            bi->biBitCount == 24)
        {
            // 获取像素数据起始位置
            unsigned char* pixelData = (unsigned char*)(logoBMP + bf->bfOffBits);
            int bytesPerPixel = bi->biBitCount / 8;
            int srcRowPadding = (4 - ((bi->biWidth * bytesPerPixel) % 4)) % 4;

            // 创建用于显示的位图
            HDC logoDC = CreateCompatibleDC(TextDC);

            // 创建DIB段以正确处理BMP数据
            BITMAPINFO dibInfo = { 0 };
            dibInfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
            dibInfo.bmiHeader.biWidth = bi->biWidth;
            dibInfo.bmiHeader.biHeight = -bi->biHeight; // 负值表示从上到下的图像数据
            dibInfo.bmiHeader.biPlanes = 1;
            dibInfo.bmiHeader.biBitCount = bi->biBitCount;
            dibInfo.bmiHeader.biCompression = BI_RGB;

            void* dibBits;
            HBITMAP hDIB = CreateDIBSection(logoDC, &dibInfo, DIB_RGB_COLORS, &dibBits, NULL, 0);
            SelectObject(logoDC, hDIB);

            // 手动复制并翻转图像数据以修正方向
            unsigned char* dst = (unsigned char*)dibBits;
            int dstRowPadding = (4 - ((bi->biWidth * bytesPerPixel) % 4)) % 4;

            for (int y = 0; y < bi->biHeight; y++)
            {
                // 翻转Y轴：从底部到顶部读取，写入从顶部到底部
                int srcY = bi->biHeight - 1 - y;

                for (int x = 0; x < bi->biWidth; x++)
                {
                    // 翻转X轴：镜像处理
                    int srcX = bi->biWidth - 1 - x;

                    // 计算源和目标偏移
                    int srcOffset = (srcY * (bi->biWidth * bytesPerPixel + srcRowPadding)) + (srcX * bytesPerPixel);
                    int dstOffset = (y * (bi->biWidth * bytesPerPixel + dstRowPadding)) + (x * bytesPerPixel);

                    // 复制像素数据 (BGR格式)
                    if (srcOffset + 2 < (int)(sizeof(logoBMP) - bf->bfOffBits))
                    {
                        dst[dstOffset] = pixelData[srcOffset];     // B
                        dst[dstOffset + 1] = pixelData[srcOffset + 1]; // G
                        dst[dstOffset + 2] = pixelData[srcOffset + 2]; // R
                    }
                }
            }

            // 放大并绘制到主DC（同时修正方向）
            SetStretchBltMode(TextDC, HALFTONE);
            StretchBlt(TextDC, logoX, logoY, scaledLogoWidth, scaledLogoHeight,
                logoDC, 0, 0, bi->biWidth, bi->biHeight, SRCCOPY);

            DeleteDC(logoDC);
            DeleteObject(hDIB);
        }
    }

    // 设置文字属性
    SetBkMode(TextDC, TRANSPARENT);
    SetTextColor(TextDC, RGB(0, 0, 0)); // 黑色文字

    HFONT hFont = CreateFontW(
        fontSize,                             // 字体高度
        0,                                    // 字体宽度
        0,                                    // 文字倾斜角度
        0,                                    // 字符基线倾斜角度
        FW_BOLD,                              // 粗体
        FALSE,                                // 斜体
        FALSE,                                // 下划线
        FALSE,                                // 删除线
        DEFAULT_CHARSET,                      // 字符集
        OUT_DEFAULT_PRECIS,                   // 输出精度
        CLIP_DEFAULT_PRECIS,                  // 裁剪精度
        ANTIALIASED_QUALITY,                  // 输出质量
        DEFAULT_PITCH | FF_SWISS,             // 字符间距和字体系列
        L"Microsoft YaHei"                    // 字体名称
    );

    // 如果微软雅黑不可用，使用系统默认字体
    if (!hFont) {
        hFont = CreateFontW(
            fontSize,
            0,
            0,
            0,
            FW_BOLD,
            FALSE,
            FALSE,
            FALSE,
            DEFAULT_CHARSET,
            OUT_DEFAULT_PRECIS,
            CLIP_DEFAULT_PRECIS,
            ANTIALIASED_QUALITY,
            DEFAULT_PITCH | FF_SWISS,
            NULL
        );
    }

    HGDIOBJ oldFont = SelectObject(TextDC, hFont);

    // 计算文字位置（在LOGO下方居中）
    RECT textRect = { 0, textY, bufWidth, textY + textHeight };
    DrawTextW(TextDC, displayText, textLen, &textRect, DT_CENTER | DT_VCENTER | DT_SINGLELINE);

    // 将文字图层合成到主图像上
    if (State->BufBPP == 4)
    {
        // 32位格式处理
        BYTE* src = (BYTE*)pTextBuf;
        BYTE* dst = State->Buf;
        for (int i = 0; i < bufWidth * bufHeight; i++)
        {
            // 如果文字像素不是白色，则用文字颜色替换
            if (src[i * 4] != 0xFF || src[i * 4 + 1] != 0xFF || src[i * 4 + 2] != 0xFF)
            {
                dst[i * 4] = src[i * 4];     // B
                dst[i * 4 + 1] = src[i * 4 + 1]; // G
                dst[i * 4 + 2] = src[i * 4 + 2]; // R
                dst[i * 4 + 3] = 0xFF;       // Alpha保持不透明
            }
        }
    }
    else
    {
        // 24位格式处理
        BYTE* src = (BYTE*)pTextBuf;
        BYTE* dst = State->Buf;
        for (int i = 0; i < bufWidth * bufHeight; i++)
        {
            // 如果文字像素不是白色，则用文字颜色替换
            if (src[i * 3] != 0xFF || src[i * 3 + 1] != 0xFF || src[i * 3 + 2] != 0xFF)
            {
                dst[i * 3] = src[i * 3];     // B
                dst[i * 3 + 1] = src[i * 3 + 1]; // G
                dst[i * 3 + 2] = src[i * 3 + 2]; // R
            }
        }
    }

    // 清理资源
    SelectObject(TextDC, oldFont);
    DeleteObject(hFont);
    DeleteObject(TextHBitmap);
    DeleteDC(TextDC);
    ReleaseDC(NULL, screenDC);
    }
    else
    {
        // 原有的处理逻辑
        switch (edm)
        {
        case EDM_GREENKEY:
            while (p != pEnd)
            {
                *(p++) = 0x00;
                *(p++) = 0xFE;
                *(p++) = 0x00;
                p += SkipCount;
            }
            break; // Filled with 0x00FE00 (BGR colors)
        case EDM_GREENYELLOW:
            while (p != pEnd)
            {
                *(p++) = 0x00;
                *(p++) = 0xFF;
                *(p++) = static_cast<BYTE>((size_t)p % 0xFF);
                p += SkipCount;
            }
            break; // Green/yellow color pattern (BGR colors)
        case EDM_BLUEPINK:
            while (p != pEnd)
            {
                *(p++) = 0xFF;
                *(p++) = 0x00;
                *(p++) = static_cast<BYTE>((size_t)p % 0xFF);
                p += SkipCount;
            }
            break; // Blue/pink color pattern (BGR colors)
        case EDM_BLACK:
            ZeroMemory(State->Buf, (State->BufWidth * State->BufHeight * State->BufBPP));
            break; // Filled with black
        }

        if (LineCount && edm != EDM_BLACK && edm != EDM_GREENKEY && State->BufHeight >= LineCount * 20)
        {
            // 保持原有的错误信息显示逻辑
            void* pTextBuf;
            HDC TextDC = CreateCompatibleDC(0);
            // 修复类型转换警告：确保所有值都是正数并正确转换为所需的类型
            LONG bufWidth = static_cast<LONG>(State->BufWidth);
            LONG lineHeight = static_cast<LONG>(LineCount * 20);
            WORD bitCount = static_cast<WORD>(8 * State->BufBPP);
            // 确保图像大小不会溢出，并正确转换为DWORD
            LONG imageSize = static_cast<LONG>(lineHeight * State->BufWidth * State->BufBPP);
            DWORD dwImageSize = (imageSize > 0) ? static_cast<DWORD>(imageSize) : 0;

            BITMAPINFO TextBMI = {
                sizeof(BITMAPINFOHEADER),
                bufWidth,
                lineHeight,
                1,
                bitCount,
                0,
                dwImageSize
            };
            TextBMI.bmiHeader.biHeight = lineHeight;
            HBITMAP TextHBitmap = CreateDIBSection(TextDC, &TextBMI, DIB_RGB_COLORS, &pTextBuf, NULL, 0);
            SelectObject(TextDC, TextHBitmap);
            SetBkMode(TextDC, TRANSPARENT);
            SetTextColor(TextDC, RGB(255, 0, 0));
            for (int i = 0; i < LineCount; i++)
                TextOutA(TextDC, 10, i * 20, LineStrings[i], LineLengths[i]);
            memcpy(State->Buf + ((State->BufHeight - TextBMI.bmiHeader.biHeight) / 2) * State->BufWidth * State->BufBPP, pTextBuf, TextBMI.bmiHeader.biHeight * State->BufWidth * State->BufBPP);
            DeleteObject(TextHBitmap);
            DeleteDC(TextDC);
        }
    }

    if (State->BufBPP == 4)
    {
        BYTE FillAlpha = (edm == EDM_GREENKEY ? 0x0 : (edm == EDM_BLACK ? 0x0 : 0xA0));
        // 对于"虚拟摄像头未开启"的情况，保持alpha为不透明
        if (LineCount > 0 && LineStrings != NULL && LineStrings[0] != NULL &&
            strstr(LineStrings[0], "HuahuaLive capture has not started sending image data") != NULL)
        {
            FillAlpha = 0xFF; // 不透明
        }
        for (p = State->Buf; p != pEnd; p += 4)
            p[3] = FillAlpha;
    }
}

    static void RenderFPSDisplay(ProcessState* State)
    {
        static LONGLONG MyFPS = 0, MyLastFPSTime = GetTickCount64(), MyLastFPS = 0;
        for (MyFPS++; GetTickCount64() - MyLastFPSTime > 1000; MyFPS = 0, MyLastFPSTime += 1000)
        {
            MyLastFPS = MyFPS;
        }
        char DisplayString[128];
        // 修复格式字符串警告，使用 %lld 格式化 LONGLONG 类型
        int DisplayStringLen = sprintf_s(DisplayString, sizeof(DisplayString), "%lld FPS", MyLastFPS);

        void* pTextBuf;
        HDC TextDC = CreateCompatibleDC(0);
        // 修复类型转换警告：确保所有值都是正数并正确转换为所需的类型
        LONG bufWidth = static_cast<LONG>(State->BufWidth);
        LONG imageSize = static_cast<LONG>(20 * State->BufWidth * State->BufBPP);
        WORD bitCount = static_cast<WORD>(8 * State->BufBPP);
        DWORD dwImageSize = (imageSize > 0) ? static_cast<DWORD>(imageSize) : 0;

        BITMAPINFO TextBMI = {
            sizeof(BITMAPINFOHEADER),
            bufWidth,
            20,
            1,
            bitCount,
            0,
            dwImageSize
        };
        HBITMAP TextHBitmap = CreateDIBSection(TextDC, &TextBMI, DIB_RGB_COLORS, &pTextBuf, NULL, 0);
        SelectObject(TextDC, TextHBitmap);
        SetBkMode(TextDC, TRANSPARENT);
        SetTextColor(TextDC, RGB(0, 255, 0));
        TextOutA(TextDC, 10, 0, DisplayString, DisplayStringLen);
        if (State->BufBPP == 4)
            for (BYTE* p = (BYTE*)pTextBuf, *pEnd = p + 20 * State->BufWidth * 4; p != pEnd; p += 4)
                p[3] = 0xFF;
        memcpy(State->Buf, pTextBuf, TextBMI.bmiHeader.biHeight * State->BufWidth * State->BufBPP);
        DeleteObject(TextHBitmap);
        DeleteDC(TextDC);
    }

    // IUnknown
    STDMETHODIMP QueryInterface(REFIID riid, void **ppv) override
    {
        if (ppv == NULL)
            return E_POINTER;
        else if (riid == _uuidof(IAMStreamConfig))
        {
            *ppv = (IAMStreamConfig *)this;
            AddRef();
            return S_OK;
        }
        else if (riid == _uuidof(IKsPropertySet))
        {
            *ppv = (IKsPropertySet *)this;
            AddRef();
            return S_OK;
        }
        return CSourceStream::QueryInterface(riid, ppv);
    }

    STDMETHODIMP_(ULONG)
    AddRef() override { return GetOwner()->AddRef(); }
    STDMETHODIMP_(ULONG)
    Release() override { return GetOwner()->Release(); }

    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void **ppv) override
    {
        if (ppv == NULL)
            return E_POINTER;
        else if (riid == IID_IKsPropertySet)
        {
            *ppv = (IKsPropertySet *)this;
            AddRef();
            return S_OK;
        }
        else if (riid == IID_IQualityControl)
        {
            *ppv = (IQualityControl *)this;
            AddRef();
            return S_OK;
        }
        else if (riid == IID_IAMStreamConfig)
        {
            *ppv = (IAMStreamConfig *)this;
            AddRef();
            return S_OK;
        }
        return CSourceStream::NonDelegatingQueryInterface(riid, ppv);
    }

    STDMETHODIMP QuerySupported(REFGUID rguidPropSet, ULONG ulId, PULONG pulTypeSupport) override
    {
        if (rguidPropSet != AMPROPSETID_Pin)
            return E_PROP_SET_UNSUPPORTED;
        if (ulId != AMPROPERTY_PIN_CATEGORY)
            return E_PROP_ID_UNSUPPORTED;
        if (pulTypeSupport)
            *pulTypeSupport = KSPROPERTY_SUPPORT_GET; // We support getting this property, but not setting it.
        return S_OK;

        // if(rguidPropSet == AMPROPSETID_Pin && ulId == AMPROPERTY_PIN_CATEGORY) { *pulTypeSupport = KSPROPERTY_SUPPORT_GET; return S_OK; }
        // return E_NOTIMPL;
    }

    STDMETHODIMP Get(REFGUID rguidPropSet, ULONG ulId, LPVOID pInstanceData, ULONG ulInstanceLength, LPVOID pPropertyData, ULONG ulDataLength, PULONG pulBytesReturned) override
    {
        if (rguidPropSet != AMPROPSETID_Pin)
            return E_PROP_SET_UNSUPPORTED;
        if (ulId != AMPROPERTY_PIN_CATEGORY)
            return E_PROP_ID_UNSUPPORTED;
        if (pPropertyData == NULL && pulBytesReturned == NULL)
            return E_POINTER;

        if (pulBytesReturned)
            *pulBytesReturned = sizeof(GUID);
        if (pPropertyData == NULL)
            return S_OK; // Caller just wants to know the size.
        if (ulDataLength < sizeof(GUID))
            return E_UNEXPECTED; // The buffer is too small.

        *(GUID *)pPropertyData = PIN_CATEGORY_CAPTURE;
        return S_OK;

        // if(rguidPropSet == AMPROPSETID_Pin && ulId == AMPROPERTY_PIN_CATEGORY)
        //{
        //	if (pPropertyData == NULL) return E_POINTER;
        //	if (ulDataLength != sizeof(GUID)) return E_INVALIDARG;
        //	memcpy(pPropertyData, &PIN_CATEGORY_CAPTURE, sizeof(GUID));
        //	*pulBytesReturned = sizeof(GUID);
        //	return S_OK;
        // }
        // return E_NOTIMPL;
    }

    STDMETHODIMP Set(REFGUID rguidPropSet, ULONG ulId, LPVOID pInstanceData, ULONG ulInstanceLength, LPVOID pPropertyData, ULONG ulDataLength) override { return E_NOTIMPL; }
    STDMETHODIMP Notify(IBaseFilter *pSelf, Quality q) override { return S_OK; }
    STDMETHODIMP SetSink(IQualityControl *piqc) override { return S_OK; }

    HRESULT DecideBufferSize(IMemAllocator *pAlloc, ALLOCATOR_PROPERTIES *pRequest) override
    {
        if (pAlloc == NULL || pRequest == NULL)
            DebugLog("[DecideBufferSize] E_POINTER\n");
        if (pAlloc == NULL || pRequest == NULL)
            return E_POINTER;
        CAutoLock cAutoLock(m_pFilter->pStateLock());
        HRESULT hr = NOERROR;
        VIDEOINFO *pvi = (VIDEOINFO *)m_mt.Format();
        pRequest->cBuffers = 1;

        DebugLog("[DecideBufferSize] Request Size: %d - Have Size: %d\n", (int)pvi->bmiHeader.biSizeImage, (int)pRequest->cbBuffer);
        if (pvi->bmiHeader.biSizeImage > (DWORD)pRequest->cbBuffer)
            pRequest->cbBuffer = pvi->bmiHeader.biSizeImage;

        ALLOCATOR_PROPERTIES actual;
        hr = pAlloc->SetProperties(pRequest, &actual);
        if (FAILED(hr))
            DebugLog("[DecideBufferSize] E_SOMETHING\n");
        if (FAILED(hr))
            return hr;

        DebugLog("[DecideBufferSize] Request Size: %d - Actual Size: %d\n", (int)pvi->bmiHeader.biSizeImage, (int)actual.cbBuffer);
        return (actual.cbBuffer < pRequest->cbBuffer ? E_FAIL : S_OK);
    }

    STDMETHODIMP SetFormat(AM_MEDIA_TYPE *pmt) override
    {
        if (pmt == NULL)
            DebugLog("[SetFormat] E_POINTER\n");
        if (pmt == NULL)
            return E_POINTER;

        VIDEOINFO *pvi = (VIDEOINFO *)pmt->pbFormat;
        if (pvi == NULL)
            DebugLog("[SetFormat] E_UNEXPECTED (pvi is null)\n");
        if (pvi == NULL)
            return E_UNEXPECTED;

        bool HasStrideBytes = (DIBSIZE(pvi->bmiHeader) != pvi->bmiHeader.biWidth * pvi->bmiHeader.biHeight * pvi->bmiHeader.biBitCount / 8);
        if (HasStrideBytes)
            DebugLog("[SetFormat] E_FAIL (has stride bytes)\n");
        if (HasStrideBytes)
            return E_FAIL;

        DebugLog("[SetFormat] WIDTH: %d - HEIGHT: %d - BITS: %d - TPS: %d - SIZE: %d - SIZE CALC: %d\n", (int)pvi->bmiHeader.biWidth, (int)pvi->bmiHeader.biHeight, (int)pvi->bmiHeader.biBitCount, (int)pvi->AvgTimePerFrame,
                 (int)pvi->bmiHeader.biSizeImage, (int)DIBSIZE(pvi->bmiHeader));
        m_avgTimePerFrame = pvi->AvgTimePerFrame;
        m_mt = *pmt;
        ((VIDEOINFO *)m_mt.pbFormat)->bmiHeader.biSizeImage = DIBSIZE(((VIDEOINFO *)m_mt.pbFormat)->bmiHeader);
        return S_OK;
    }

    STDMETHODIMP GetFormat(AM_MEDIA_TYPE **ppmt) override
    {
        if (ppmt == NULL)
            DebugLog("[GetFormat] E_POINTER\n");
        if (ppmt == NULL)
            return E_POINTER;
        DebugLog("[GetFormat] RETURNING WIDTH: %d - HEIGHT: %d - BITS: %d - TPS: %d - SIZEIMAGE: %d - SIZECALC: %d\n", (int)((VIDEOINFO *)m_mt.Format())->bmiHeader.biWidth, (int)((VIDEOINFO *)m_mt.Format())->bmiHeader.biHeight, (int)((VIDEOINFO *)m_mt.Format())->bmiHeader.biBitCount, (int)((VIDEOINFO *)m_mt.Format())->AvgTimePerFrame, (int)((VIDEOINFO *)m_mt.Format())->bmiHeader.biSizeImage, (int)DIBSIZE(((VIDEOINFO *)m_mt.Format())->bmiHeader));
        *ppmt = CreateMediaType(&m_mt);
        return S_OK;
    }

    // 修改GetNumberOfCapabilities函数
    STDMETHODIMP GetNumberOfCapabilities(int* piCount, int* piSize) override
    {
        if (piCount == NULL || piSize == NULL)
            DebugLog("[GetNumberOfCapabilities] E_POINTER\n");
        if (piCount == NULL || piSize == NULL)
            return E_POINTER;

        // 修改为支持3种格式：RGB24、RGB32、ARGB
        *piCount = (sizeof(_media) / sizeof(_media[0])) * 3; // RGB24, RGB32, and ARGB variations
        *piSize = sizeof(VIDEO_STREAM_CONFIG_CAPS);
        DebugLog("[GetNumberOfCapabilities] Returning Count: %d - Size: %d\n", *piCount, *piSize);
        return S_OK;
    }

    STDMETHODIMP GetStreamCaps(int iIndex, AM_MEDIA_TYPE** ppmt, BYTE* pSCC) override
    {
        if (ppmt == NULL || pSCC == NULL)
        {
            DebugLog("[GetStreamCaps] E_POINTER\n");
            return E_POINTER;
        }

        CMediaType mt;
        HRESULT hr = GetMediaType(iIndex, &mt);
        if (FAILED(hr))
            return hr;

        VIDEOINFO* pvi = (VIDEOINFO*)mt.Format();
        if (!pvi)
        {
            DebugLog("[GetStreamCaps] VIDEOINFO is NULL\n");
            return E_FAIL;
        }

        *ppmt = CreateMediaType(&mt);
        if (!*ppmt)
        {
            DebugLog("[GetStreamCaps] CreateMediaType failed\n");
            return E_OUTOFMEMORY;
        }

        VIDEO_STREAM_CONFIG_CAPS* pCaps = (VIDEO_STREAM_CONFIG_CAPS*)pSCC;
        if (!pCaps)
        {
            DebugLog("[GetStreamCaps] pCaps is NULL\n");
            return E_POINTER;
        }

        ZeroMemory(pCaps, sizeof(VIDEO_STREAM_CONFIG_CAPS));

        pCaps->guid = FORMAT_VideoInfo;
        pCaps->VideoStandard = 0;
        pCaps->CropAlignX = 1;
        pCaps->CropAlignY = 1;
        pCaps->OutputGranularityX = 1;
        pCaps->OutputGranularityY = 1;
        pCaps->StretchTapsX = 2;
        pCaps->StretchTapsY = 2;
        pCaps->ShrinkTapsX = 2;
        pCaps->ShrinkTapsY = 2;
        pCaps->InputSize.cx = static_cast<LONG>(pvi->bmiHeader.biWidth);
        pCaps->InputSize.cy = static_cast<LONG>(pvi->bmiHeader.biHeight);
        pCaps->MinCroppingSize.cx = 1;
        pCaps->MinCroppingSize.cy = 1;
        pCaps->MaxCroppingSize.cx = static_cast<LONG>(pvi->bmiHeader.biWidth);
        pCaps->MaxCroppingSize.cy = static_cast<LONG>(pvi->bmiHeader.biHeight);
        pCaps->CropGranularityX = 1;
        pCaps->CropGranularityY = 1;
        pCaps->MinOutputSize.cx = 4;
        pCaps->MinOutputSize.cy = 4;
        pCaps->MaxOutputSize.cx = static_cast<LONG>(pvi->bmiHeader.biWidth);
        pCaps->MaxOutputSize.cy = static_cast<LONG>(pvi->bmiHeader.biHeight);

        REFERENCE_TIME minFrameInterval = 10000000 / 120;
        REFERENCE_TIME maxFrameInterval = 10000000 / 15;
        pCaps->MinFrameInterval = minFrameInterval;
        pCaps->MaxFrameInterval = maxFrameInterval;

        DWORD biBitCount = pvi->bmiHeader.biBitCount;
        LONG minOutputWidth = pCaps->MinOutputSize.cx;
        LONG minOutputHeight = pCaps->MinOutputSize.cy;
        LONG maxOutputWidth = pCaps->MaxOutputSize.cx;
        LONG maxOutputHeight = pCaps->MaxOutputSize.cy;

        DWORD dwMinOutputWidth = (minOutputWidth > 0) ? static_cast<DWORD>(minOutputWidth) : 0;
        DWORD dwMinOutputHeight = (minOutputHeight > 0) ? static_cast<DWORD>(minOutputHeight) : 0;
        DWORD dwMaxOutputWidth = (maxOutputWidth > 0) ? static_cast<DWORD>(maxOutputWidth) : 0;
        DWORD dwMaxOutputHeight = (maxOutputHeight > 0) ? static_cast<DWORD>(maxOutputHeight) : 0;

        // 防止溢出
        ULONGLONG minBitsPerSecond = (ULONGLONG)dwMinOutputWidth * dwMinOutputHeight * biBitCount * 15;
        ULONGLONG maxBitsPerSecond = (ULONGLONG)dwMaxOutputWidth * dwMaxOutputHeight * biBitCount * 120;

        if (minBitsPerSecond > MAXDWORD)
            minBitsPerSecond = MAXDWORD;
        if (maxBitsPerSecond > MAXDWORD)
            maxBitsPerSecond = MAXDWORD;

        pCaps->MinBitsPerSecond = static_cast<DWORD>(minBitsPerSecond);
        pCaps->MaxBitsPerSecond = static_cast<DWORD>(maxBitsPerSecond);

        // 确定格式名称用于日志
        const char* formatName = "Unknown";
        if (biBitCount == 32) {
            formatName = "32-bit";
        }
        else if (biBitCount == 24) {
            formatName = "RGB24";
        }

        DebugLog("[GetStreamCaps] Index: %d - WIDTH: %d - HEIGHT: %d - BITS: %d - FORMAT: %s\n",
            iIndex,
            static_cast<int>(pCaps->MaxOutputSize.cx),
            static_cast<int>(pCaps->MaxOutputSize.cy),
            static_cast<int>(biBitCount),
            formatName);

        return S_OK;
    }


    HRESULT SetMediaType(const CMediaType* pmt) override
    {
        if (!pmt)
        {
            DebugLog("[SetMediaType] pmt is NULL\n");
            return E_POINTER;
        }

        VIDEOINFOHEADER* pvi = (VIDEOINFOHEADER*)(pmt->Format());
        if (!pvi)
        {
            DebugLog("[SetMediaType] VIDEOINFOHEADER is NULL\n");
            return E_FAIL;
        }

        DebugLog("[SetMediaType] [ASKD] WIDTH: %d - HEIGHT: %d - BITS: %d - TPS: %d - SIZEIMAGE: %d - SIZECALC: %d\n",
            (int)pvi->bmiHeader.biWidth,
            (int)pvi->bmiHeader.biHeight,
            (int)pvi->bmiHeader.biBitCount,
            (int)pvi->AvgTimePerFrame,
            (int)pvi->bmiHeader.biSizeImage,
            (int)DIBSIZE(pvi->bmiHeader));

        VIDEOINFO* currentVi = (VIDEOINFO*)m_mt.Format();
        if (currentVi)
        {
            DebugLog("[SetMediaType] [HAVE] WIDTH: %d - HEIGHT: %d - BITS: %d - TPS: %d - SIZEIMAGE: %d - SIZECALC: %d\n",
                (int)currentVi->bmiHeader.biWidth,
                (int)currentVi->bmiHeader.biHeight,
                (int)currentVi->bmiHeader.biBitCount,
                (int)currentVi->AvgTimePerFrame,
                (int)currentVi->bmiHeader.biSizeImage,
                (int)DIBSIZE(currentVi->bmiHeader));
        }
        else
        {
            DebugLog("[SetMediaType] [HAVE] VIDEOINFO is NULL\n");
        }

        HRESULT hr = CSourceStream::SetMediaType(pmt);
        return hr;
    }

    // 修改CheckMediaType函数，优化格式检查顺序
    HRESULT CheckMediaType(const CMediaType* pMediaType) override
    {
        if (!pMediaType)
        {
            DebugLog("[CheckMediaType] pMediaType is NULL\n");
            return E_POINTER;
        }

        CAutoLock lock(m_pFilter->pStateLock());
        VIDEOINFOHEADER* pvi = (VIDEOINFOHEADER*)(pMediaType->Format());
        if (!pvi)
        {
            DebugLog("[CheckMediaType] WANT VIDEO INFO NULL\n");
            return E_FAIL;
        }

        // 确定格式名称用于日志
        const char* subtypeName = "Unknown";
        if (pMediaType->subtype == MEDIASUBTYPE_RGB24) {
            subtypeName = "RGB24";
        }
        else if (pMediaType->subtype == MEDIASUBTYPE_ARGB32) {
            subtypeName = "ARGB";
        }
        else if (pMediaType->subtype == MEDIASUBTYPE_RGB32) {
            subtypeName = "RGB32";
        }

        DebugLog("[CheckMediaType] [WANT] WIDTH: %d - HEIGHT: %d - BITS: %d - TPS: %d - SIZEIMAGE: %d - SUBTYPE: %s\n",
            (int)pvi->bmiHeader.biWidth,
            (int)pvi->bmiHeader.biHeight,
            (int)pvi->bmiHeader.biBitCount,
            (int)pvi->AvgTimePerFrame,
            (int)pvi->bmiHeader.biSizeImage,
            subtypeName);

        // 检查主类型
        if (pMediaType->majortype != MEDIATYPE_Video)
        {
            DebugLog("[CheckMediaType] Invalid major type\n");
            return E_INVALIDARG;
        }

        // 检查格式类型
        if (pMediaType->formattype != FORMAT_VideoInfo)
        {
            DebugLog("[CheckMediaType] Invalid format type\n");
            return E_INVALIDARG;
        }

        // 检查位深度和子类型匹配 - 优先检查ARGB
        if (pvi->bmiHeader.biBitCount == 32) {
            // 对于32位格式，优先接受ARGB32，然后是RGB32
            bool supported = (pMediaType->subtype == MEDIASUBTYPE_ARGB32 ||
                pMediaType->subtype == MEDIASUBTYPE_RGB32);
            if (!supported) {
                DebugLog("[CheckMediaType] Unsupported 32-bit subtype: %08X\n", pMediaType->subtype.Data1);
                return E_INVALIDARG;
            }
        }
        else if (pvi->bmiHeader.biBitCount == 24) {
            // 对于24位格式，只接受RGB24
            if (pMediaType->subtype != MEDIASUBTYPE_RGB24) {
                DebugLog("[CheckMediaType] Unsupported 24-bit subtype: %08X\n", pMediaType->subtype.Data1);
                return E_INVALIDARG;
            }
        }
        else {
            DebugLog("[CheckMediaType] Unsupported bit count: %d\n", (int)pvi->bmiHeader.biBitCount);
            return E_INVALIDARG;
        }

        if (pvi->bmiHeader.biCompression != BI_RGB)
        {
            DebugLog("[CheckMediaType] Invalid compression\n");
            return E_INVALIDARG;
        }

        // 检查分辨率是否在支持列表中
        bool resolutionSupported = false;
        for (int i = 0; i < sizeof(_media) / sizeof(_media[0]); i++)
        {
            if ((_media[i].width == 0 || _media[i].width == pvi->bmiHeader.biWidth) &&
                (_media[i].height == 0 || _media[i].height == pvi->bmiHeader.biHeight))
            {
                resolutionSupported = true;
                break;
            }
        }

        if (!resolutionSupported)
        {
            DebugLog("[CheckMediaType] Resolution not supported: %d x %d\n",
                (int)pvi->bmiHeader.biWidth, (int)pvi->bmiHeader.biHeight);
            return E_INVALIDARG;
        }

        DebugLog("[CheckMediaType] [RETURNING] S_OK\n");
        return S_OK;
    }

    // 修改GetMediaType函数，调整格式优先级，将ARGB设置为首选格式
    HRESULT GetMediaType(int iPos, CMediaType* pMediaType) override
    {
        CheckPointer(pMediaType, E_POINTER);
        if (iPos < 0)
            return E_INVALIDARG;

        const int mediaCount = sizeof(_media) / sizeof(_media[0]);
        // 修改为支持3种格式：RGB24、ARGB、RGB32，每种分辨率都支持这3种格式
        if (iPos >= mediaCount * 3)
            return VFW_S_NO_MORE_ITEMS;

        CAutoLock cAutoLock(m_pFilter->pStateLock());

        int iMedia = iPos % mediaCount;
        UCASSERT(_media[iMedia].width * _media[iMedia].height * 4 * sizeof(short) <= MAX_SHARED_IMAGE_SIZE);

        VIDEOINFO* pvi = (VIDEOINFO*)pMediaType->AllocFormatBuffer(sizeof(VIDEOINFO));
        if (!pvi)
        {
            DebugLog("[GetMediaType] AllocFormatBuffer failed\n");
            return E_OUTOFMEMORY;
        }

        ZeroMemory(pvi, sizeof(VIDEOINFO));
        pvi->AvgTimePerFrame = m_avgTimePerFrame;

        BITMAPINFOHEADER* pBmi = &(pvi->bmiHeader);
        pBmi->biSize = sizeof(BITMAPINFOHEADER);

        VIDEOINFO* currentVi = (VIDEOINFO*)m_mt.Format();
        pBmi->biWidth = (_media[iMedia].width ? _media[iMedia].width : (currentVi ? currentVi->bmiHeader.biWidth : 0));
        pBmi->biHeight = (_media[iMedia].height ? _media[iMedia].height : (currentVi ? currentVi->bmiHeader.biHeight : 0));

        pBmi->biPlanes = 1;
        // 调整格式顺序，将ARGB设置为首选格式 (0->ARGB, 1->RGB32, 2->RGB24)
        int formatIndex = (iPos / mediaCount) % 3;
        switch (formatIndex) {
        case 0: // ARGB (首选格式)
            pBmi->biBitCount = 32;
            pMediaType->SetSubtype(&MEDIASUBTYPE_ARGB32);
            DebugLog("[GetMediaType] Setting subtype to ARGB32\n");
            break;
        case 1: // RGB32
            pBmi->biBitCount = 32;
            pMediaType->SetSubtype(&MEDIASUBTYPE_RGB32);
            DebugLog("[GetMediaType] Setting subtype to RGB32\n");
            break;
        case 2: // RGB24
        default:
            pBmi->biBitCount = 24;
            pMediaType->SetSubtype(&MEDIASUBTYPE_RGB24);
            DebugLog("[GetMediaType] Setting subtype to RGB24\n");
            break;
        }

        pBmi->biCompression = BI_RGB;
        pBmi->biSizeImage = DIBSIZE(*pBmi);

        pMediaType->SetType(&MEDIATYPE_Video);
        pMediaType->SetFormatType(&FORMAT_VideoInfo);
        pMediaType->SetSampleSize(pBmi->biSizeImage);
        pMediaType->SetTemporalCompression(FALSE);

        // 在日志中显示具体的格式名称
        const char* formatName = "Unknown";
        if (pBmi->biBitCount == 32) {
            if (pMediaType->subtype == MEDIASUBTYPE_RGB32) {
                formatName = "RGB32";
            }
            else if (pMediaType->subtype == MEDIASUBTYPE_ARGB32) {
                formatName = "ARGB";
            }
            else {
                formatName = "32-bit";
            }
        }
        else {
            formatName = "RGB24";
        }

        DebugLog("[GetMediaType] Index: %d - WIDTH: %d - HEIGHT: %d - BITS: %d - SUBTYPE: %s\n",
            iPos,
            (int)pBmi->biWidth,
            (int)pBmi->biHeight,
            (int)pBmi->biBitCount,
            formatName);

        return S_OK;
    }


    HRESULT OnThreadStartPlay() override
    {
        DebugLog("[OnThreadStartPlay] OnThreadStartPlay\n");
        m_llFrame = m_llFrameMissCount = 0;
        m_llFrameMissMax = 5;
        return CSourceStream::OnThreadStartPlay();
    }

    CMediaType m_mt;
    LONGLONG m_llFrame, m_llFrameMissCount, m_llFrameMissMax;
    REFERENCE_TIME m_prevStartTime;
    REFERENCE_TIME m_avgTimePerFrame;
    SharedImageMemory *m_pReceiver;
    ProcessWorkers m_ProcessWorkers;
    DWORD m_iUnscaledBufSize;
    uint8_t *m_pUnscaledBuf, *m_RGBA16Table;
    SharedImageMemory::EFormat m_RGBA16TableFormat;

    // IAMStreamControl
    HRESULT STDMETHODCALLTYPE StartAt(const REFERENCE_TIME *ptStart, DWORD dwCookie) override { return NOERROR; }
    HRESULT STDMETHODCALLTYPE StopAt(const REFERENCE_TIME *ptStop, BOOL bSendExtra, DWORD dwCookie) override { return NOERROR; }
    HRESULT STDMETHODCALLTYPE GetInfo(AM_STREAM_INFO *pInfo) override { return NOERROR; }

    // IAMPushSource
    HRESULT STDMETHODCALLTYPE GetLatency(REFERENCE_TIME *prtLatency) override { return NOERROR; }
    HRESULT STDMETHODCALLTYPE GetPushSourceFlags(ULONG *pFlags) override
    {
        *pFlags = AM_PUSHSOURCECAPS_INTERNAL_RM;
        return NOERROR;
    }
    HRESULT STDMETHODCALLTYPE SetPushSourceFlags(ULONG Flags) override { return E_NOTIMPL; }
    HRESULT STDMETHODCALLTYPE SetStreamOffset(REFERENCE_TIME rtOffset) override { return NOERROR; }
    HRESULT STDMETHODCALLTYPE GetStreamOffset(REFERENCE_TIME *prtOffset) override
    {
        *prtOffset = 0;
        return NOERROR;
    }
    HRESULT STDMETHODCALLTYPE GetMaxStreamOffset(REFERENCE_TIME *prtMaxOffset) override
    {
        *prtMaxOffset = 0;
        return NOERROR;
    }
    HRESULT STDMETHODCALLTYPE SetMaxStreamOffset(REFERENCE_TIME rtMaxOffset) override { return NOERROR; }
};

class CCaptureProperties : public CBasePropertyPage
{
public:
    static CUnknown *WINAPI CreateInstance(LPUNKNOWN lpunk, HRESULT *phr)
    {
        CUnknown *punk = new CCaptureProperties(lpunk, phr);
        *phr = (punk ? S_OK : E_OUTOFMEMORY);
        return punk;
    }

private:
    CCaptureProperties(LPUNKNOWN lpunk, HRESULT *phr) : CBasePropertyPage("", lpunk, -1, -1) {}

    STDMETHODIMP Activate(HWND hwndParent, LPCRECT prect, BOOL fModal)
    {
        struct MyData
        {
#pragma pack(4)
            DLGTEMPLATE Header;
#pragma pack(2)
            WORD NoMenu, StdClass;
            wchar_t Title[1]; // 0 - no menu | 0 - standard dialog class | No title
#pragma pack(4)
            struct Item
            {
#pragma pack(4)
                DLGITEMTEMPLATE Header;
#pragma pack(2)
                WORD FFFF, ClassID;
                wchar_t Text[2];
                WORD NoData;
#pragma pack(4)
            } Items[8];
#pragma pack(4)
        } md = {
            {WS_CHILD | WS_VISIBLE | DS_CENTER, NULL, sizeof(md.Items) / sizeof(MyData::Item)}, 0, 0, L"", {
                                                                                                               {{WS_VISIBLE | WS_CHILD | SS_LEFT, NULL, 5, 18, 80, 10, 1000}, 0xFFFF, 0x0082, L"-"},                          // Label
                                                                                                               {{WS_VISIBLE | WS_CHILD | WS_TABSTOP | CBS_DROPDOWNLIST, NULL, 90, 17, 150, 100, 1001}, 0xFFFF, 0x0085, L"-"}, // Combo Box
                                                                                                               {{WS_VISIBLE | WS_CHILD | SS_LEFT, NULL, 5, 36, 80, 10, 1002}, 0xFFFF, 0x0082, L"-"},                          // Label
                                                                                                               {{WS_VISIBLE | WS_CHILD | WS_TABSTOP | CBS_DROPDOWNLIST, NULL, 90, 35, 150, 100, 1003}, 0xFFFF, 0x0085, L"-"}, // Combo Box
                                                                                                               {{WS_VISIBLE | WS_CHILD | SS_LEFT, NULL, 5, 54, 80, 10, 1004}, 0xFFFF, 0x0082, L"-"},                          // Label
                                                                                                               {{WS_VISIBLE | WS_CHILD | WS_TABSTOP | CBS_DROPDOWNLIST, NULL, 90, 53, 150, 100, 1005}, 0xFFFF, 0x0085, L"-"}, // Combo Box
                                                                                                               {{WS_VISIBLE | WS_CHILD | SS_LEFT, NULL, 5, 72, 80, 10, 1006}, 0xFFFF, 0x0082, L"-"},                          // Label
                                                                                                               {{WS_VISIBLE | WS_CHILD | WS_TABSTOP | BS_CHECKBOX, NULL, 90, 71, 150, 10, 1007}, 0xFFFF, 0x0080, L"-"},       // Check Box
                                                                                                           }};

        HWND hwnd = CreateDialogIndirectParamW(NULL, &md.Header, hwndParent, &MyDialogProc, (LPARAM)this);
        SetDlgItemTextW(hwnd, 1000, L"Resolution mismatch:");
        SetDlgItemTextW(hwnd, 1002, L"HuahuaLive capture never started:");
        SetDlgItemTextW(hwnd, 1004, L"HuahuaLive capture sending stopped:");
        SetDlgItemTextW(hwnd, 1006, L"Display FPS:");
        SetDlgItemTextW(hwnd, 1007, L"Show capture frame rate");
        for (int i = 0; i < 3; i++)
        {
            HWND hWndComboBox = GetDlgItem(hwnd, 1001 + i * 2);
            for (int j = 0; j < sizeof(ErrorDrawModeNames) / sizeof(ErrorDrawModeNames[0]); j++)
                SendMessageW(hWndComboBox, (UINT)CB_ADDSTRING, (WPARAM)0, (LPARAM)ErrorDrawModeNames[j]);
            SendMessageA(hWndComboBox, CB_SETCURSEL, (WPARAM)ErrorDrawModes[i], (LPARAM)0);
        }
        SendMessage(GetDlgItem(hwnd, 1007), BM_SETCHECK, (OutputFrameRate ? BST_CHECKED : BST_UNCHECKED), 0);

        SetWindowPos(hwnd, NULL, prect->left, prect->top, prect->right - prect->left, prect->bottom - prect->top, 0); // show in tab page
        return S_OK;
    }

    static INT_PTR CALLBACK MyDialogProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
        if (uMsg == WM_INITDIALOG)
            return TRUE;
        if (uMsg == WM_COMMAND)
        {
            // DebugLog("[DIALOG] WM_COMMAND - ItemID: %d - SubCommand: %d - Value: %d\n", (int)LOWORD(wParam), (int)HIWORD(wParam), (int)lParam);
            int ItemID = LOWORD(wParam), SubCommand = HIWORD(wParam);
            HWND hWndItem = GetDlgItem(hwnd, ItemID);
            int SelectionIndex = (int)SendMessageA(hWndItem, CB_GETCURSEL, 0, 0);
            if (ItemID == 1001 && SubCommand == 1)
                ErrorDrawModes[EDC_ResolutionMismatch] = (EErrorDrawMode)SelectionIndex;
            if (ItemID == 1003 && SubCommand == 1)
                ErrorDrawModes[EDC_UnityNeverStarted] = (EErrorDrawMode)SelectionIndex;
            if (ItemID == 1005 && SubCommand == 1)
                ErrorDrawModes[EDC_UnitySendingStopped] = (EErrorDrawMode)SelectionIndex;
            if (ItemID == 1007)
                SendMessage(hWndItem, BM_SETCHECK, ((OutputFrameRate ^= 1) ? BST_CHECKED : BST_UNCHECKED), 0);
            return TRUE;
        }
        return FALSE;
    }

    STDMETHODIMP GetPageInfo(__out LPPROPPAGEINFO pPageInfo)
    {
        pPageInfo->pszTitle = (WCHAR *)CoTaskMemAlloc(sizeof(CaptureSourceName));
        memcpy(pPageInfo->pszTitle, CaptureSourceName, sizeof(CaptureSourceName));
        pPageInfo->size.cx = 490;
        pPageInfo->size.cy = 200;
        pPageInfo->pszDocString = NULL;
        pPageInfo->pszHelpFile = NULL;
        pPageInfo->dwHelpContext = 0;
        return NOERROR;
    }
};

class CCaptureSource : CSource, IQualityControl, ICamSource, ISpecifyPropertyPages
{
public:
    static CUnknown *CreateInstance(LPUNKNOWN lpunk, HRESULT *phr, int32_t CapNum)
    {
        UCASSERT(phr);
        *phr = S_OK;

        CCaptureSource *pSource = new CCaptureSource(lpunk, phr);
        if (FAILED(*phr) || !pSource)
        {
            if (!pSource)
                *phr = E_OUTOFMEMORY;
            delete pSource;
            return NULL;
        }

        CCaptureStream *pStream = new CCaptureStream(pSource, phr, CapNum);
        if (FAILED(*phr) || !pStream)
        {
            if (!pStream)
                *phr = E_OUTOFMEMORY;
            delete pStream;
            delete pSource;
            return NULL;
        }

        return pSource;
    }

private:
    DECLARE_IUNKNOWN;

    CCaptureSource(LPUNKNOWN lpunk, HRESULT *phr) : CSource("Source", lpunk, CLSID_UnityCaptureService, phr) {}

    // CSource
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void **ppv) override
    {
        if (ppv == NULL)
            return E_POINTER;
        if (riid == IID_IQualityControl)
        {
            *ppv = (IQualityControl *)this;
            AddRef();
            return S_OK;
        }
        else if (riid == IID_ICamSource)
        {
            *ppv = (ICamSource *)this;
            AddRef();
            return S_OK;
        }
        else if (riid == IID_ISpecifyPropertyPages)
        {
            *ppv = (ISpecifyPropertyPages *)this;
            AddRef();
            return S_OK;
        } //
        return CSource::NonDelegatingQueryInterface(riid, ppv);
    }

    // IQualityControl
    STDMETHODIMP Notify(IBaseFilter *pSelf, Quality q) override { return S_OK; }
    STDMETHODIMP SetSink(IQualityControl *piqc) override { return S_OK; }

    // ISpecifyPropertyPages
    STDMETHODIMP GetPages(CAUUID *pPages) override
    {
        CheckPointer(pPages, E_POINTER);
        pPages->cElems = 1;
        pPages->pElems = (GUID *)CoTaskMemAlloc(sizeof(GUID));
        if (pPages->pElems == NULL)
            return E_OUTOFMEMORY;
        *(pPages->pElems) = CLSID_UnityCaptureProperties;
        return NOERROR;
    }
};

// 修改sudCaptureSourceOut结构体
static const AMOVIESETUP_MEDIATYPE sudMediaTypesCaptureSourceOut = { &MEDIATYPE_Video, &MEDIASUBTYPE_NULL };
static const AMOVIESETUP_PIN sudCaptureSourceOut = {
    L"Output",                     // Pin string name
    FALSE,                         // Is it rendered
    TRUE,                          // Is it an output
    FALSE,                         // Can we have none
    FALSE,                         // Can we have many
    &CLSID_NULL,                   // Connects to filter
    NULL,                          // Connects to pin
    1,                             // Number of types
    &sudMediaTypesCaptureSourceOut // Pin Media types
};

struct WStringHolder
{
    wchar_t str[256];
};
__inline static WStringHolder GetCaptureSourceNameNum(const wchar_t *pCaptureSourceName, int i)
{
    WStringHolder res;
    StringCchPrintfW(res.str, sizeof(res.str) / sizeof(*res.str), (i == 0 ? L"%s" : L"%s #%d"), pCaptureSourceName, i + 1);
    return res;
}

__inline static GUID GetCLSIDUnityCaptureServiceNum(int i)
{
    GUID NumCLSID = CLSID_UnityCaptureService;
    if (i != 0)
        NumCLSID.Data4[7] += 1 + i;
    return NumCLSID;
}

extern "C" int CustomGetFactoryType(const IID &rClsID)
{
    if (IsEqualCLSID(rClsID, CLSID_UnityCaptureProperties))
        return 1;
    if (memcmp(&rClsID, &CLSID_UnityCaptureService, sizeof(GUID) - 1))
        return 0;
    unsigned char LastByteOffset = (rClsID.Data4[7] - CLSID_UnityCaptureService.Data4[7]);
    return 2 + (LastByteOffset == 0 ? 0 : LastByteOffset - 1);
}

CUnknown *CustomCreateInstance(int FactoryType, LPUNKNOWN pUnkOuter, HRESULT *hr)
{
    if (FactoryType == 1)
        return CCaptureProperties::CreateInstance(pUnkOuter, hr);
    if (FactoryType >= 2)
        return CCaptureSource::CreateInstance(pUnkOuter, hr, FactoryType - 2);
    return NULL;
}

// Stack Overflow - "Fake" DirectShow video capture device
// http://stackoverflow.com/questions/1376734/fake-directshow-video-capture-device
STDAPI AMovieSetupRegisterServer(CLSID clsServer, LPCWSTR szDescription, LPCWSTR szFileName, LPCWSTR szThreadingModel = L"Both", LPCWSTR szServerType = L"InprocServer32");
STDAPI AMovieSetupUnregisterServer(CLSID clsServer);
// 在RegisterFilters函数中添加更完整的注册表设置
static HRESULT RegisterFilters(BOOL bRegister)
{
    UCASSERT(g_hInst != 0);
    WCHAR achFileName[MAX_PATH];
    if (!GetModuleFileNameW(g_hInst, achFileName, sizeof(achFileName)))
        return AmHresultFromWin32(GetLastError());
    HRESULT hr = CoInitialize(0);

    int MaxCapNum = (bRegister ? 1 : SharedImageMemory::MAX_CAPNUM);
    const wchar_t* pCaptureSourceName = CaptureSourceName;
    if (SUCCEEDED(hr) && bRegister)
    {
        char* CapNumParam = strstr(GetCommandLineA(), "/i:UnityCaptureDevices=");
        if (CapNumParam)
            MaxCapNum = atoi(CapNumParam + sizeof("/i:UnityCaptureDevices=") - 1);

        const wchar_t* CapNameParam = wcsstr(GetCommandLineW(), L"/i:UnityCaptureName=");
        if (CapNameParam)
        {
            // Parse custom filter names from /i:UnityCaptureName=NAME or "/i:UnityCaptureName=NAME NAME" or /i:UnityCaptureName="NAME NAME"
            const wchar_t* CapNameStart = CapNameParam + sizeof("/i:UnityCaptureName=") - 1;
            if (CapNameStart[0] == L'"')
                CapNameStart++;
            const wchar_t* CapNameEnd = wcsstr(CapNameStart, (CapNameParam[-1] == L'"' || CapNameStart[-1] == L'"' ? L"\"" : L" "));
            if (!CapNameEnd)
                CapNameEnd = CapNameStart + wcslen(CapNameStart);
            size_t CapNameLen = CapNameEnd - CapNameStart;
            if (CapNameLen > 0 && CapNameLen < 200)
            {
                // Allocate memory to hold the name string (this is never freed until regsvr32 ends, which is soon after this function anyway)
                wchar_t* CustomCaptureSourceName = (wchar_t*)malloc(sizeof(wchar_t) * (CapNameLen + 1));
                memcpy(CustomCaptureSourceName, CapNameStart, sizeof(wchar_t) * CapNameLen);
                CustomCaptureSourceName[CapNameLen] = L'\0';
                pCaptureSourceName = CustomCaptureSourceName;
            }
        }

        if (MaxCapNum < 1)
            MaxCapNum = 1;
        if (MaxCapNum > SharedImageMemory::MAX_CAPNUM)
            MaxCapNum = SharedImageMemory::MAX_CAPNUM;

        for (int i = 0; SUCCEEDED(hr) && i != MaxCapNum; i++)
            hr = AMovieSetupRegisterServer(GetCLSIDUnityCaptureServiceNum(i), GetCaptureSourceNameNum(pCaptureSourceName, i).str, achFileName, L"Both", L"InprocServer32");
        if (SUCCEEDED(hr))
            hr = AMovieSetupRegisterServer(CLSID_UnityCaptureProperties, CaptureSourceName L" Configuration", achFileName, L"Both", L"InprocServer32");
        if (FAILED(hr))
            MessageBoxA(0, "AMovieSetupRegisterServer failed", "RegisterFilters setup", NULL);
    }

    if (SUCCEEDED(hr))
    {
        IFilterMapper2* fm = NULL;
        hr = CoCreateInstance(CLSID_FilterMapper2, NULL, CLSCTX_INPROC_SERVER, IID_IFilterMapper2, (void**)&fm);

        if (SUCCEEDED(hr))
        {
            if (bRegister)
            {
                REGFILTER2 rf2;
                rf2.dwVersion = 1;
                rf2.dwMerit = MERIT_NORMAL; // 从MERIT_DO_NOT_USE改为MERIT_NORMAL
                rf2.cPins = 1;
                rf2.rgPins = &sudCaptureSourceOut;
                for (int i = 0; SUCCEEDED(hr) && i != MaxCapNum; i++)
                {
                    hr = fm->RegisterFilter(GetCLSIDUnityCaptureServiceNum(i), GetCaptureSourceNameNum(pCaptureSourceName, i).str, 0, &CLSID_VideoInputDeviceCategory, NULL, &rf2);

                    // This is needed for Unity and Skype to access the virtual camera
                    // Thanks to: https://social.msdn.microsoft.com/Forums/windowsdesktop/en-US/cd2b9d2d-b961-442d-8946-fdc038fed530/where-to-specify-device-id-in-the-filter?forum=windowsdirectshowdevelopment
                    LPOLESTR CLSID_Category_Str, CLSID_Filter_Str;
                    WCHAR strKey[256];
                    HKEY hKey;
                    StringFromCLSID(CLSID_VideoInputDeviceCategory, &CLSID_Category_Str);
                    StringFromCLSID(GetCLSIDUnityCaptureServiceNum(i), &CLSID_Filter_Str);
                    StringCchPrintfW(strKey, 256, L"SOFTWARE\\Classes\\CLSID\\%s\\Instance\\%s", CLSID_Category_Str, CLSID_Filter_Str);
                    RegOpenKeyExW(HKEY_LOCAL_MACHINE, strKey, 0, KEY_ALL_ACCESS, &hKey);
                    RegSetValueExA(hKey, "DevicePath", 0, REG_SZ, (LPBYTE)"foo:bar", (DWORD)sizeof("foo:bar"));
                    RegCloseKey(hKey);

                    // 添加更完整的注册表项以支持ARGB32格式并设置为首选
                    StringCchPrintfW(strKey, 256, L"SOFTWARE\\Classes\\CLSID\\%s\\Instance\\%s\\Formats", CLSID_Category_Str, CLSID_Filter_Str);
                    HKEY hFormatsKey;
                    if (RegCreateKeyExW(HKEY_LOCAL_MACHINE, strKey, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hFormatsKey, NULL) == ERROR_SUCCESS) {
                        // 注册ARGB32格式为首选
                        HKEY hARGB32Key;
                        if (RegCreateKeyExW(hFormatsKey, L"ARGB32", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hARGB32Key, NULL) == ERROR_SUCCESS) {
                            DWORD value = 32;
                            RegSetValueExW(hARGB32Key, L"BitCount", 0, REG_DWORD, (BYTE*)&value, sizeof(value));

                            // 设置最高优先级
                            DWORD priority = 0; // 最高优先级
                            RegSetValueExW(hARGB32Key, L"Priority", 0, REG_DWORD, (BYTE*)&priority, sizeof(priority));
                            RegCloseKey(hARGB32Key);
                        }

                        // 注册RGB32格式
                        HKEY hRGB32Key;
                        if (RegCreateKeyExW(hFormatsKey, L"RGB32", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hRGB32Key, NULL) == ERROR_SUCCESS) {
                            DWORD value = 32;
                            RegSetValueExW(hRGB32Key, L"BitCount", 0, REG_DWORD, (BYTE*)&value, sizeof(value));

                            // 设置次优先级
                            DWORD priority = 1;
                            RegSetValueExW(hRGB32Key, L"Priority", 0, REG_DWORD, (BYTE*)&priority, sizeof(priority));
                            RegCloseKey(hRGB32Key);
                        }

                        // 注册RGB24格式
                        HKEY hRGB24Key;
                        if (RegCreateKeyExW(hFormatsKey, L"RGB24", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hRGB24Key, NULL) == ERROR_SUCCESS) {
                            DWORD value = 24;
                            RegSetValueExW(hRGB24Key, L"BitCount", 0, REG_DWORD, (BYTE*)&value, sizeof(value));

                            // 设置较低优先级
                            DWORD priority = 2;
                            RegSetValueExW(hRGB24Key, L"Priority", 0, REG_DWORD, (BYTE*)&priority, sizeof(priority));
                            RegCloseKey(hRGB24Key);
                        }
                        RegCloseKey(hFormatsKey);
                    }
                }
                if (FAILED(hr))
                    MessageBoxA(0, "Service RegisterFilter of IFilterMapper2 failed", "RegisterFilters setup", NULL);
            }
            else
            {
                for (int i = 0; SUCCEEDED(hr) && i != MaxCapNum; i++)
                    hr = fm->UnregisterFilter(&CLSID_VideoInputDeviceCategory, 0, GetCLSIDUnityCaptureServiceNum(i));
                if (FAILED(hr))
                    MessageBoxA(0, "Service UnregisterFilter of IFilterMapper2 failed", "RegisterFilters setup", NULL);
            }
        }

        if (fm)
            fm->Release();
    }

    if (SUCCEEDED(hr) && !bRegister)
    {
        for (int i = 0; SUCCEEDED(hr) && i != MaxCapNum; i++)
            hr = AMovieSetupUnregisterServer(GetCLSIDUnityCaptureServiceNum(i));
        if (SUCCEEDED(hr))
            hr = AMovieSetupUnregisterServer(CLSID_UnityCaptureProperties);
        if (FAILED(hr))
            MessageBoxA(0, "AMovieSetupUnregisterServer failed", "RegisterFilters setup", NULL);
    }

    CoFreeUnusedLibraries();
    CoUninitialize();
    return hr;
}

STDAPI DllRegisterServer()
{
    return RegisterFilters(TRUE);
}

STDAPI DllInstall(BOOL bInstall, PCWSTR pszCmdLine)
{
    return S_OK;
}

STDAPI DllUnregisterServer()
{
    return RegisterFilters(FALSE);
}

extern "C" BOOL WINAPI DllEntryPoint(HINSTANCE, ULONG, LPVOID);
BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
{
    return DllEntryPoint((HINSTANCE)(hModule), ul_reason_for_call, lpReserved);
}
